.
├── config.py
├── core
│   ├── api_routes.py
│   ├── controller.py
│   ├── __init__.py
│   ├── models.py
│   ├── schemas.py
│   ├── templates
│   │   ├── dashboard
│   │   │   ├── clients.j2
│   │   │   ├── not_authorized.j2
│   │   │   ├── profile.j2
│   │   │   ├── users.j2
│   │   │   ├── vars
│   │   │   └── welcome.j2
│   │   ├── home.j2
│   │   ├── installer.j2
│   │   ├── login.j2
│   │   ├── logout.j2
│   │   └── text
│   │       └── about_text.j2
│   └── web_routes.py
├── extensions.py
├── helpers
│   ├── crud_pattern.py
│   ├── error_handler.py
│   ├── helpers_functions.py
│   ├── mail.py
│   ├── route_lister.py
│   └── validators.py
├── __init__.py
├── modules
│   ├── foliage
│   │   ├── api_routes.py
│   │   ├── controller.py
│   │   ├── helpers.py
│   │   ├── __init__.py
│   │   ├── models.py
│   │   ├── schemas.py
│   │   ├── templates
│   │   │   ├── common_analyses.j2
│   │   │   ├── crops.j2
│   │   │   ├── farms.j2
│   │   │   ├── leaf_analyses.j2
│   │   │   ├── lot_crops.j2
│   │   │   ├── lots.j2
│   │   │   ├── nutrient_applications.j2
│   │   │   ├── nutrients.j2
│   │   │   ├── objectives.j2
│   │   │   ├── product_contributions.j2
│   │   │   ├── productions.j2
│   │   │   ├── product_prices.j2
│   │   │   ├── products.j2
│   │   │   └── soil_analyses.j2
│   │   └── web_routes.py
│   ├── foliage_report
│   │   ├── api_routes.py
│   │   ├── controller.py
│   │   ├── helpers.py
│   │   ├── __init__.py
│   │   ├── templates
│   │   │   ├── listar_reportes.j2
│   │   │   ├── solicitar_informe.j2
│   │   │   └── ver_reporte.j2
│   │   └── web_routes.py
│   └── __init__.py
├── static
│   └── assets
│       ├── css
│       │   ├── extra.css
│       │   └── main.css
│       ├── img
│       │   ├── avatar.png
│       │   ├── bg_home.webp
│       │   ├── favicon.ico
│       │   ├── logo.png
│       │   ├── og-image.jpg
│       │   └── twitter-image.jpg
│       └── js
│           ├── dashboard.js
│           ├── login.js
│           ├── main.js
│           ├── pluginAssets
│           └── popper.min.js
└── templates
    └── default
        ├── base.j2
        ├── error.j2
        ├── example
        │   └── example_forms.j2
        ├── layouts
        │   ├── access_form.j2
        │   ├── contact_form_base.j2
        │   ├── crud_base.j2
        │   ├── error_handler.j2
        │   └── generic.j2
        ├── macros
        │   ├── _button.j2
        │   └── _forms.j2
        ├── partials
        │   ├── float_login_button.j2
        │   ├── footer.j2
        │   ├── header.j2
        │   ├── head.j2
        │   ├── navigation.j2
        │   ├── sidebar.j2
        │   └── sidebar_toggle.j2
        ├── router_lister.j2
        └── settings
            ├── _flowbite_ouline_icons.j2
            ├── _flowbite_solid_icons.j2
            └── _ui_class.j2

25 directories, 88 files

=== File: ./templates/default/base.j2 ===
```jinja-html
{# base.j2 #}
<!DOCTYPE html>
<html lang="es" class="h-full">
<head>
    {% include 'partials/head.j2' %}
    {% from "settings/_ui_class.j2" import body_classes, main_clases, text_color, bg_color, hover_bg, menu_bg_color, shadow, rounded, padding, container, close_menu_button, menu_link_style %}
</head>
<body class="{{ body_classes }} home">
    {% block header %}
    {% include 'partials/header.j2' %}
    {% endblock %}

    {% set c_page = "flex flex-grow overflow-hidden" if dashboard else "container mx-auto px-0 py-0" %}
    {% set is_full_width = dashboard %}
    {% set has_login_button = not dashboard and request.endpoint != 'core.login' %}

    {% if basic_form_view or app_home %}
    {% set main_clases = "w-full" %}
    {% set is_full_width = true %}
    {% set c_page, bg_color, rounded, shadow, padding = "", "", "", "", "" %}
    {% endif %}
    
    <div class="{{ c_page }}">

        {% if dashboard %}
        {% include 'partials/sidebar_toggle.j2' %}
        {% include 'partials/sidebar.j2' %}
        {% endif %}

        <main class="{{ main_clases }} {% if is_full_width %} w-full {% endif %}" role="main">
            {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
            <ul class="space-y-2">
                {% for category, message in messages %}
                <li class="p-4 rounded-md {% if category == 'success' %}bg-green-100 border border-green-400 text-green-700{% elif category == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-blue-100 border border-blue-400 text-blue-700{% endif %}"
                    role="alert">
                    {{ message }}
                </li>
                {% endfor %}
            </ul>
            {% endif %}
            {% endwith %}
            <div class="{{ bg_color }} {{ rounded }} {{ shadow }} {{ padding }}">
                {% block content %}
                {% if heading %}
                <h1 class="text-4xl font-bold mb-4 dark:text-white">{{ heading }}</h1>
                {% endif %}
                <div class="text-lg text-gray-700 dark:text-white">
                    {{ content | safe }}
                </div>
                {% if additional_content %}
                <div class="mt-4 text-lg text-gray-700 dark:text-white">
                    {{ additional_content | safe }}
                </div>
                {% endif %}
                {% endblock %}
            </div>

            {% if has_login_button %}
            {% include "partials/float_login_button.j2" %}
            {% endif %}

        </main>
    </div>

    {% block footer %}
    {% include 'partials/footer.j2' %}
    {% endblock %}
    {% block extra_js %}
    
    {% endblock %}
</body>

</html>
```

=== File: ./templates/default/layouts/error_handler.j2 ===
```jinja-html
{# layouts/error_handler.j2 #}
{# used to present errors (example 404) #}
{% extends "error.j2" %}
{% block title %}ERROR{% endblock %}
{% block content %}
<div class="flex justify-center">
    <div class="w-full md:w-full">
        <div class="py-10 text-center">
            <h1 class="text-9xl font-bold pb-14">Oops!</h1>
            <h2 class="text-6xl font-bold pb-8">Error {{ e }}</h2>
            <h3 class="mb-4 text-xl">{{ e_description }}</h3>
            <div class="mb-4 text-gray-600">
                {{ e_details }}
            </div>
            <div class="space-x-4">
                <a href="/"
                    class="inline-flex items-center px-6 py-3 text-white bg-blue-600 hover:bg-blue-700 rounded-lg text-lg transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20"
                        fill="currentColor">
                        <path
                            d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
                    </svg>
                    Volver al inicio
                </a>
                <a href="https://tecnovant.net/es/contacto/"
                    class="inline-flex items-center px-6 py-3 text-white bg-gray-600 hover:bg-gray-700 rounded-lg text-lg transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20"
                        fill="currentColor">
                        <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                        <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                    </svg>
                    Contactar soporte
                </a>
            </div>
        </div>
    </div>
</div>

{% endblock %}
```

=== File: ./templates/default/layouts/generic.j2 ===
```jinja-html
{# layouts/generic.j2 #}
{# this layout displays a standard content page #}
{% extends "base.j2" %}
{% set has_login_button = "True" %}
{% set is_full_width = "True" %}

```

=== File: ./templates/default/layouts/access_form.j2 ===
```jinja-html
{# layouts/access_form.j2 #}
{# usaje example: login.j2 #}
{% extends "base.j2" %}
{% set basic_form_view = true %}
{% block content %}
<div class="home flex flex-col lg:flex-row">
    <div class="hidden lg:flex lg:w-1/2 bg-blue-800 justify-center items-center dark:bg-zinc-950 ">
        <h1 class="text-white text-5xl font-bold dark:text-white">{{ title }}</h1>
    </div>
    <div class="w-full lg:w-1/2 flex flex-col justify-center items-center p-6">
        <form id="{{ form_id }}" class="w-full max-w-sm mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
            {% for field in fields %}
            <div class="mb-4">
                <label for="{{ field.name }}" class="block text-gray-700 text-sm font-bold mb-2">{{ field.label }}</label>
                <input type="{{ field.type }}" id="{{ field.name }}" name="{{ field.name }}" required
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            {% endfor %}
            <div class="flex items-center justify-between mt-4">
                <button type="submit"
                    class="bg-gray-800 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    {{ button_text }}
                </button>
            </div>
        </form>
        <div id="message" class="max-w-sm mx-auto mt-10 text-red-500"></div>
        {% if extra_links %}
        <div class="mt-4">
            {% for link in extra_links %}
            <a href="{{ link.url }}" class="text-blue-500 hover:underline">{{ link.text }}</a>{% if not loop.last %} | {% endif %}
            {% endfor %}
        </div>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block extra_js %}
{% endblock %}
```

=== File: ./templates/default/layouts/contact_form_base.j2 ===
```jinja-html
{# layouts/contact_form_base.j2 #}
{# base for contact form #}
{% extends "base.j2" %}
{% set basic_form_view = true %}
{% from "macros/_forms.j2" import render_form %}

{% block content %}
    <div class="mx-auto max-w-lg mt-8 w-5/6 bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
       {{ render_form(form_fields, form_id, form_title, submit_button_text, extra_links) }}
    </div>
{% endblock %}

{% block extra_js %}
<script>
document.getElementById('contactForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('{{ form_submit_url }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        if (response.ok) {
            alert('Formulario enviado con éxito');
            this.reset();
        } else {
            alert('Error al enviar el formulario');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error al enviar el formulario');
    }
});
</script>
{% endblock %}
{# usage example: 

{% extends "layouts/contact_form_base.j2" %}
{% set form_id = "contactForm" %}
{% set extra_links = [
    {"url": "/contact", "text": "Volver a Contacto"}
] %}
{% set form_title = "Formulario de Contacto" %}
{% set form_fields = [
    {"id": "name", "label": "Nombre", "type": "text"},
    {"id": "email", "label": "Correo Electrónico", "type": "email"},
    {"id": "subject", "label": "Asunto", "type": "text"},
    {"id": "message", "label": "Mensaje", "type": "textarea"},
] %}
{% set submit_button_text = "Enviar Mensaje" %}
{% set form_submit_url = "/api/contact" %}

#}
```

=== File: ./templates/default/layouts/crud_base.j2 ===
```jinja-html
{# layouts/crud_base.j2 #}
{# base for developing CRUD forms
Requires handling of GET, PUT, POST, DELETE methods from a single endpoint.
receives item parameters and "items" a table with the get content,
creates a modal type form for editing or adding
creates a deletion confirmation modal
allows bulk deletion

example of use: users.j2
#}
{% extends "base.j2" %}

{# declaracion de variables #}
{% set dashboard = true %}
{% from "settings/_ui_class.j2" import input_bg_color, 
border_color, hover_bg_color, focus_ring_color, button_bg_color,
delete_button_bg_color, input_focus_bg_color, base_button_classes, 
base_input_classes, table_header_class, table_cell_class %}


{# Macro - > dropdown de acciones #}
{% macro action_dropdown(item_id) %}
<div class="relative inline-block text-left">
    <div>
        <button type="button" class="{{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }}" id="options-menu-{{ item_id }}" aria-haspopup="true" aria-expanded="true" onclick="toggleDropdown('{{ item_id }}')">
            ...
        </button>
    </div>
    <div class="hidden origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg {{ bg_color }} ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 z-[9999] dark:divide-gray-600" role="menu" aria-orientation="vertical" aria-labelledby="options-menu-{{ item_id }}" id="dropdown-{{ item_id }}">
        <div class="py-1" role="none">
            {% if show_view_button %}
            <a href="#" class="{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}" role="menuitem" onclick="showModal('view', '{{ item_id }}')">Ver</a>
            {% endif %}
            <a href="#" class="{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}" role="menuitem" onclick="showModal('edit', '{{ item_id }}')">Editar</a>
            <a href="#" class="{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}" role="menuitem" onclick="showModal('delete', '{{ item_id }}')">Borrar</a>
        </div>
    </div>
</div>
{% endmacro %}


{################## INICIO  MODAL ##################}
{# Macro - > Generador de modales #}
{% macro modal(modal_id, modal_label, modal_content, modal_actions) %}
<div id="{{ modal_id }}" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="{{ modal_id }}Label" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom {{ bg_color }} rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <h3 class="text-lg leading-6 font-medium {{ text_color }}" id="{{ modal_id }}Label">{{ modal_label }}</h3>
                <div class="mt-2">
                    {{ modal_content }}
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse dark:bg-gray-700">
                {{ modal_actions }}
            </div>
        </div>
    </div>
</div>
{% endmacro %}
{################## FIN MODAL ##################}

{% macro info_card(title, value, description) %}
    <div class="bg-gray-50 p-4 rounded-lg shadow text-center">
        <p class="text-lg font-semibold">{{ title }}</p>
        <p class="text-2xl font-bold">{{ value }}</p>
        <p class="text-gray-500">{{ description }}</p>
    </div>
{% endmacro %}

{# Inicio de contenido para el formulario #}
{################# Inicio block content #################}
{% block content %}
{# title #}
<div class="sm:px-6 lg:px-8 flex justify-between items-center mb-0">
    <h1 class="text-2xl mt-0 pt-0 font-bold">{{ title }}</h1>
    {% if reports %}
        <div>
            <span class="bg-gray-200 px-4 py-2 rounded mr-2">Informes generados {{ total_informes }}</span>
            <button class="bg-blue-600 text-white px-4 py-2 rounded">+ Crear Nuevo Informe</button>
        </div>
    {% endif %}
</div>
<div id="message" class="max-w-sm mx-auto mt-10 text-red-500"></div>
{# Contenido genérico de la página crud #}
<div class="mx-auto max-w-8xl pt-0 pb-6 sm:px-6 lg:px-8">
    <div class="px-4 py-2 sm:px-0">
    {# Selector dinámico #}
{% if filter_field %}
<div class="px-0 py-4 bg-white dark:bg-gray-900 flex flex-col sm:flex-row sm:items-end gap-3 w-full max-w-md">
<form action="{{ select_url }}" method="get" class="w-full flex flex-col sm:flex-row gap-3">
        <select id="filter_{{ filter_field }}" name="filter_value" class="flex-grow w-full pl-4 pr-10 py-2.5 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white text-gray-700 dark:bg-gray-800 dark:text-gray-200 dark:border-gray-600 shadow-sm">
            <option value="">Todos</option>
            {% for option in filter_options %}
                <option value="{{ option.id }}" {% if option.id == filter_value %}selected{% endif %}>{{ option.name }}</option>
            {% endfor %}
        </select>
    <button type="submit" class="px-5 py-2.5 rounded-lg font-medium text-sm shadow-sm transition-all duration-200 ease-in-out {{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }}">
        Filtrar
    </button>
</form>
</div>
{% endif %}
{# fin Selector dinámico #}

        <div class="mb-4 flex justify-between">        
            <button onclick="showModal('create')" class="{{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }}">
                Crear Nuevo {{ entity_name }}
            </button>
            {% if show_select_box %}
            <button onclick="handleBulkAction()" class="{{ base_button_classes }} {{ border_color }} {{ delete_button_bg_color }} text-white {{ focus_ring_color }}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
            </button>
            {% endif %}
        </div>
        <div>
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700 border rounded">
                <thead class="{{ bg_color }} dark:bg-gray-900 hidden sm:table-header-group">
                    <tr class="bg-gray-200 dark:bg-gray-900 hidden sm:table-row">
                        {% if show_select_box %}
                        <th scope="col" class="{{ table_header_class }}">
                            <input type="checkbox" id="select-all" onclick="toggleSelectAll()">
                        </th>
                        {% endif %}
                        {% for header in table_headers %}
                        <th scope="col" class="{{ table_header_class }} text-gray-800">
                            {{ header }}
                        </th>
                        {% endfor %}
                        <th scope="col" class="{{ table_header_class }} text-gray-500">
                            Acciones
                        </th>
                    </tr>
                </thead>
                <tbody class="{{ bg_color }} divide-y divide-gray-200 dark:divide-gray-700"
                    id="{{ entity_name_lower }}-table-body">
                    {% for item in items %}
                    <tr class="{{ hover_bg_color }} hidden sm:table-row">
                        {% if show_select_box %}
                        <td class="{{ table_cell_class }} {{ text_color }}">
                            <input type="checkbox" class="item-checkbox" value="{{ item.id }}">
                        </td>
                        {% endif %}
                        {% for field in item_fields %}
                        <td class="{{ table_cell_class }} {{ text_color }}">
                            {% if field == 'active' %}
                                {{ "Activo" if item[field] else "Inactivo" }}
                            {% else %}
                                {{ item[field] }}
                            {% endif %}
                        </td>
                        {% endfor %}
                        <td class="{{ table_cell_class }} font-medium sm:table-cell">
                            {{ action_dropdown(item.id) }}
                        </td>
                    </tr>
    <!-- Vista móvil en formato de tarjeta -->
                <tr class="block sm:hidden border-b p-4">
                    <td class="px-4 py-3">
                        {% if show_select_box %}
                        <input type="checkbox" class="item-checkbox mb-2" value="{{ item.id }}">
                        {% endif %}
                        {% for field in item_fields %}
                        <div class="text-xs text-gray-500">
                            <span class="font-bold">{{ table_headers[loop.index0] }}:</span> 
                            {% if field == 'active' %}
                                {{ "Activo" if item[field] else "Inactivo" }}
                            {% else %}
                                {{ item[field] }}
                            {% endif %}
                        </div>
                        {% endfor %}
                    </td>
                </tr>




                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

{# Contenido del formulario dentro de un modal para crear/editar/ver elementos #}
{################ Formulario que se presenta en los modales ################}
{% set form_content %}
<form id="{{ entity_name_lower }}Form">
    <input type="hidden" id="{{ entity_name_lower }}Id">
    {% for field_name, field_info in form_fields.items() %}
    <div class="mb-4">
        <label for="{{ field_name }}" class="block text-sm font-medium {{ text_color }}">{{ field_info.label }}</label>
        {% if field_info.type == 'select' %}
{# selector variable #}
{% set allowed_new_value = field_info.get('new_value', False) %}

<div class="relative">
    <select id="{{ field_name }}" name="{{ field_name }}"
        class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }} {{ input_focus_bg_color }} {{ focus_ring_color }} {{ text_color }}"
        {% if field_info.required %}required{% endif %} {% if allowed_new_value %} onchange="handleSelectChange(this, '{{ field_name }}')" {% endif %} >
        {% for display, value in field_info.options.items() %}
        <option value="{{ value }}">{{ display }}</option>
        {% endfor %}
        {% if allowed_new_value %} 
        <option value="other">Otro</option>
        {% endif %}
    </select>
    {% if allowed_new_value %}
    <input 
        type="text" 
        id="{{ field_name }}_custom" 
        name="{{ field_name }}_custom" 
        class="mt-2 hidden w-full rounded-md border border-gray-300 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 shadow-sm disabled:bg-gray-100 disabled:cursor-not-allowed" 
        disabled
        placeholder="Especifique otro valor"
    >
    {% endif %}
</div>
{# fin selector variable #}

        {% elif field_info.type == 'radio' %}
        {% for display, value in field_info.options.items() %}
        <div class="flex items-center">
            <input type="radio" id="{{ field_name }}_{{ value }}" name="{{ field_name }}" value="{{ value }}"
                class="{{ base_input_classes }}" {% if field_info.required %}required{% endif %}>
            <label for="{{ field_name }}_{{ value }}" class="ml-2 text-sm {{ text_color }}">{{ display }}</label>
        </div>
        {% endfor %}
        {% elif field_info.type == 'checkbox' %}
        <input type="checkbox" id="{{ field_name }}" name="{{ field_name }}" class="{{ base_input_classes }}">
        {% elif field_info.type in ['text', 'password', 'email', 'date', 'datetime-local', 'tel', 'url', 'number',
        'color', 'month', 'week', 'time', 'search', 'range', 'file', 'image', 'hidden'] %}
        <input type="{{ field_info.type }}" id="{{ field_name }}" name="{{ field_name }}"
            class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }} {{ input_focus_bg_color }} {{ focus_ring_color }} {{ text_color }}"
            {% if field_info.required %}required{% endif %} {% if field_info.placeholder
            %}placeholder="{{ field_info.placeholder }}" {% endif %} {% if field_info.min is defined
            %}min="{{ field_info.min }}" {% endif %} {% if field_info.max is defined %}max="{{ field_info.max }}" {%
            endif %}>
        {% endif %}
    </div>
    {% endfor %}
</form>
{% endset %}

{# Acciones del formulario dentro del modal #}
{% set form_actions %}
<button type="button" id="saveButton" onclick="save{{ entity_name }}()"
    class="w-full sm:w-auto {{ base_button_classes }} {{ button_bg_color }} text-white {{ focus_ring_color }} sm:ml-3">
    Guardar
</button>
<button type="button" onclick="closeModal()"
    class="mt-3 w-full sm:w-auto {{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }} sm:mt-0 sm:ml-3">
    Cerrar
</button>
{% endset %}

{# Renderizado del modal para crear/editar/ver elementos #}
{{ modal(entity_name_lower ~ 'Modal', '', form_content, form_actions) }}

{# Contenido del modal para confirmar la eliminación #}
{% set delete_content %}
<p class="text-sm {{ text_color }}">
    ¿Está seguro de que desea eliminar este {{ entity_name_lower }}?
</p>
{% endset %}

{# Acciones del modal de eliminación #}
{% set delete_actions %}
<button type="button" onclick="delete{{ entity_name }}()"
    class="w-full sm:w-auto {{ base_button_classes }} {{ delete_button_bg_color }} text-white {{ focus_ring_color }} sm:ml-3">
    Eliminar
</button>
<button type="button" onclick="closeDeleteModal()"
    class="mt-3 w-full sm:w-auto {{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }} sm:mt-0 sm:ml-3">
    Cancelar
</button>
{% endset %}

{# Renderizado del modal para confirmar la eliminación #}
{{ modal('deleteModal', 'Confirmar Eliminación', delete_content, delete_actions) }}
{% if DEBUG %}
<pre class="w-[800px] max-w-4xl p-6 bg-gray-800 text-gray-200 rounded-lg shadow-lg font-mono text-sm leading-relaxed whitespace-pre-wrap break-words border border-gray-700 my-4 mx-auto">
mensajes  de depuracion 
{{ items }}
</pre>
{% endif %}

{% endblock %}
{################# Fin block content #################}

{% block extra_js %}
<script>

    // Función para obtener un valor de cookie
    function getCookie(name) {
        let cookieValue = null;
        let nameEQ = name + "=";
        let cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i];
            while (cookie.charAt(0) === ' ') {
                cookie = cookie.substring(1, cookie.length);
            }
            if (cookie.indexOf(nameEQ) === 0) {
                cookieValue = decodeURIComponent(cookie.substring(nameEQ.length));
                break;
            }
        }
        return cookieValue;
    }

    let currentAction = '';
    let current{{ entity_name }}Id = null;
    let activeDropdown = null;

    // Función para alternar la visibilidad del dropdown
    function toggleDropdown(id) {
        const dropdown = document.getElementById(`dropdown-${id}`);
        const allDropdowns = document.querySelectorAll('.origin-top-right');
        allDropdowns.forEach(d => {
            if (d !== dropdown) d.classList.add('hidden');
        });
        dropdown.classList.toggle('hidden');
        activeDropdown = dropdown.classList.contains('hidden') ? null : dropdown;
    }

    // Cierra todos los dropdowns si se hace clic fuera de ellos
    window.onclick = function (event) {
        if (!event.target.closest('.origin-top-right') && !event.target.matches('[aria-haspopup="true"]')) {
            document.querySelectorAll('.origin-top-right').forEach(dropdown => {
                dropdown.classList.add('hidden');
            });
            activeDropdown = null;
        }
    };

    // Muestra el modal de creación/edición/vista
    function showModal(action, id = null) {
        currentAction = action;
        current{{ entity_name }}Id = id;
        const modal = document.getElementById('{{ entity_name_lower }}Modal');
        const form = document.getElementById('{{ entity_name_lower }}Form');
        const title = document.getElementById('{{ entity_name_lower }}ModalLabel');
        const saveButton = document.getElementById('saveButton');

        form.reset();
        
        // Primero habilitamos todos los campos (independientemente de la acción)
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.disabled = false;
        });

        switch (action) {
            case 'create':
                title.textContent = 'Crear Nuevo {{ entity_name }}';
                saveButton.style.display = 'inline-flex';
                break;
            case 'edit':
                title.textContent = 'Editar {{ entity_name }}';
                saveButton.style.display = 'inline-flex';
                fillFormWithData(id);
                disableFieldsInEdit();
                break;
            case 'view':
                title.textContent = 'Ver {{ entity_name }}';
                saveButton.style.display = 'none';
                fillFormWithData(id);
                disableAllFields(); 
                break;
            case 'delete':
                document.getElementById('deleteModal').classList.remove('hidden');
                return;
        }
        modal.classList.remove('hidden');
    }

/////////////////////////////
// Cierra los modales si se hace clic fuera de ellos
window.addEventListener('click', function(event) {
    const modals = [
        document.getElementById('{{ entity_name_lower }}Modal'),
        document.getElementById('deleteModal')
    ];
    
    modals.forEach(modal => {
        if (modal && !modal.classList.contains('hidden')) {
            // Verifica si el clic fue fuera del contenido del modal
            // El contenido del modal es el div dentro del modal que contiene el formulario
            const modalContent = modal.querySelector('.inline-block');
            if (modalContent && !modalContent.contains(event.target) && modal.contains(event.target)) {
                // Si el clic fue dentro del modal pero fuera del contenido del modal (en el overlay)
                if (modal.id === '{{ entity_name_lower }}Modal') {
                    closeModal();
                } else if (modal.id === 'deleteModal') {
                    closeDeleteModal();
                }
            }
        }
    });
});
/////////////////////////////

    // Cierra el modal de creación/edición/vista
    function closeModal() {
        document.getElementById('{{ entity_name_lower }}Modal').classList.add('hidden');
    }

    // Cierra el modal de confirmación de eliminación
    function closeDeleteModal() {
        document.getElementById('deleteModal').classList.add('hidden');
    }

    // Rellena el formulario con los datos del elemento seleccionado
    function fillFormWithData(id) {
        // const item = {{ items | tojson | safe }}.find(f => f.id === id);
        // const item = {{ items | tojson | safe }}.find(f => f.id === parseInt(id));
        const item = {{ items | tojson | safe }}.find(f => String(f.id) === String(id));

        if (item) {
            document.getElementById('{{ entity_name_lower }}Id').value = item.id;
    {% for field_name, field_info in form_fields.items() %}
            
            {% if field_info.type == 'select' %}
            document.getElementById('{{ field_name }}').value = item.{{ field_name }} || '';
            
            {% elif field_info.type == 'checkbox' %}
            document.getElementById('{{ field_name }}').checked = item.{{ field_name }} === true || item.{{ field_name }} === 'true';
            {% elif field_info.type == 'radio' %}
            const radioValue = item.{{ field_name }};
        if (radioValue) {
            document.querySelector(`input[name="{{ field_name }}"][value="${radioValue}"]`).checked = true;
        }
    {% elif field_info.type == 'file' or field_info.type == 'image' %}
        // Los campos de archivo/imagen no se pueden rellenar por seguridad, omitir
    {% else %}
        document.getElementById('{{ field_name }}').value = item.{{ field_name }} || '';
    {% endif %}
    {% endfor %}
    }
        
    }
    // Deshabilita los campos que tienen la propiedad disabled_in_edit cuando currentAction es 'edit'
    function disableFieldsInEdit() {
        {% for field_name, field_info in form_fields.items() %}
        {% if field_info.disabled_in_edit %}
        document.getElementById('{{ field_name }}').disabled = currentAction === 'edit';
        {% endif %}
        {% endfor %}
    }
    // Deshabilita todos los campos del formulario cuando se visualiza un elemento

    function disableAllFields() {
        if (currentAction === 'view') {
            const form = document.getElementById('{{ entity_name_lower }}Form');
            const inputs = form.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.disabled = true;
            });
        }
    }
    function handleSelectChange(select, fieldId) {
        const customInput = document.getElementById(`${fieldId}_custom`);
        if (customInput) {
            if (select.value === 'other') {
                customInput.classList.remove('hidden');
                customInput.disabled = false;
            } else {
                customInput.classList.add('hidden');
                customInput.disabled = true;
                customInput.value = ''; // Limpiar el valor cuando no está seleccionado "Otro"
            }
        }
    }


    {# Guarda o actualiza un {{ entity_name_lower }} #}
    async function save{{ entity_name }}() {
        const data = {
            {% for field_name, field_info in form_fields.items() %}
                {% if field_info.type == 'checkbox' %}
                {{ field_name }}: document.getElementById('{{ field_name }}').checked,
                {% elif field_info.type == 'select' %}
                {{ field_name }}: (function() {
                    const selectValue = document.getElementById('{{ field_name }}').value;
                    {% if allowed_new_value %}
                    const customInput = document.getElementById('{{ field_name }}_custom').value;
                    {% endif %}
                    return (selectValue === 'other' && customInput && !customInput.disabled) ? customInput : selectValue;
                })(),
                {% elif field_info.type == 'radio' %}
                {{ field_name }}: document.querySelector('input[name="{{ field_name }}"]:checked') ? document.querySelector('input[name="{{ field_name }}"]:checked').value : '',
                {% elif field_info.type == 'file' or field_info.type == 'image' %}
                // Los campos de archivo/imagen requieren manejo especial (por ejemplo, FormData)
                {{ field_name }}: document.getElementById('{{ field_name }}').files[0] || null,
                {% else %}
                {{ field_name }}: document.getElementById('{{ field_name }}').value,
                {% endif %}
            {% endfor %}
        };

        let url = '{{ api_url }}';
        let method = 'POST';

        if (currentAction === 'edit') {
            method = 'PUT';
            data.id = current{{ entity_name }}Id;
            url = `{{ api_url }}${current{{ entity_name }}Id.toString()}`;
        }

        {# Si hay campos de archivo/imagen, usar FormData #}
        const hasFiles = {% for field_name, field_info in form_fields.items() %}
            {% if field_info.type == 'file' or field_info.type == 'image' %}
            data.{{ field_name }} !== null ||
            {% endif %}
            {% endfor %} false;

        if (hasFiles) {
            const formData = new FormData();
            for (const key in data) {
                if (data[key] !== null) {
                    formData.append(key, data[key]);
                }
            }
            try {
                const response = await fetch(url, {
                    method: method,
                    credentials: 'include',
                    headers: {
                        "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                    },
                    body: formData,
                });
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error al guardar el {{ entity_name_lower }}');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al guardar el {{ entity_name_lower }}');
            }
        } else {
            try {
                const response = await fetch(url, {
                    method: method,
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                    },
                    body: JSON.stringify(data),
                });
                if (response.ok) {
                     location.reload();
                } else {
                    alert('Error al guardar el {{ entity_name_lower }}');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al guardar el {{ entity_name_lower }}');
            }
        }
    }

    // Elimina un {{ entity_name_lower }}
    async function delete{{ entity_name }}() {
        let url = `{{ api_url }}${current{{ entity_name }}Id.toString()}`;
        let method = 'DELETE';
        try {
            const response = await fetch(url, {
                method: method,
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                },
                body: JSON.stringify({ id: current{{ entity_name }}Id.toString() }),
        });

        if (response.ok) {
            location.reload();
        } else {
            alert('Error al eliminar el {{ entity_name_lower }}');
        }
            } catch (error) {
            console.error('Error:', error);
            alert('Error al eliminar el {{ entity_name_lower }}');
        }
    }

    // Alternar la selección de todos los checkboxes en la tabla
    function toggleSelectAll() {
        const checkboxes = document.querySelectorAll('.item-checkbox');
        const selectAll = document.getElementById('select-all').checked;
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll;
        });
    }

    // Manejar acciones en bulk (eliminación de múltiples elementos)
    async function handleBulkAction() {
        const selectedItems = Array.from(document.querySelectorAll('.item-checkbox:checked')).map(checkbox => checkbox.value);

        if (selectedItems.length === 0) {
            alert('Por favor seleccione al menos un elemento.');
            return;
        }
        if (confirm('¿Está seguro de que desea eliminar los elementos seleccionados?')) {
            try {
                const response = await fetch('{{ api_url }}', {
                    method: 'DELETE',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                    },
                    body: JSON.stringify({ "ids": selectedItems }),
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error al eliminar los elementos seleccionados');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al eliminar los elementos seleccionados');
            }
        }
    }
    
</script>
{% endblock %}

```

=== File: ./templates/default/macros/_forms.j2 ===
```jinja-html
<!-- macros/_forms.j2 -->
{# example of use in contact_form.j2 #}
{% macro render_form(form_fields, form_id, form_title, submit_button_text, extra_links=None) %}
{% from "macros/_button.j2" import button %}
<div class="px-4 py-6 sm:px-0">
    <h2 class="text-2xl font-bold mb-4">{{ form_title }}</h2>
    <form id="{{ form_id }}" class="space-y-4">

        {% for field in form_fields %}
        <div>
            <label for="{{ field.id }}" class="block text-gray-700 text-sm font-bold mb-2">{{ field.label }}</label>
            {% if field.type == 'textarea' %}
            <textarea id="{{ field.id }}" name="{{ field.id }}" rows="4"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
            {% else %}
            <input type="{{ field.type }}" id="{{ field.id }}" name="{{ field.id }}"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            {% endif %}
        </div>
        {% endfor %}
        <div>
            <button type="submit"
                class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ submit_button_text }}
            </button>
        </div>
    </form>
</div>
{% if extra_links %}
<div class="mt-4">
    {% for link in extra_links %}
    <a href="{{ link.url }}" class="text-blue-500 hover:underline">{{ link.text }}</a>{% if not loop.last %} | {% endif
    %}
    {% endfor %}
</div>
{% endif %}
{% endmacro %}
```

=== File: ./templates/default/macros/_button.j2 ===
```jinja-html
{# macros/_button.j2 #}
{% macro button(text, type="button", color="blue", size="md", href=None, onclick=None, extra_classes="") %}
    {% set color_classes = {
        "blue": "bg-blue-500 hover:bg-blue-600 text-white",
        "green": "bg-green-500 hover:bg-green-600 text-white",
        "red": "bg-red-500 hover:bg-red-600 text-white",
        "gray": "bg-gray-500 hover:bg-gray-600 text-white"
    } %}
    {% set size_classes = {
        "sm": "px-3 py-1.5 text-sm",
        "md": "px-4 py-2 text-base",
        "lg": "px-6 py-3 text-lg"
    } %}

    {% if href %}
        <a href="{{ href }}" class="inline-block rounded-lg transition-colors duration-200 {{ color_classes[color] }} {{ size_classes[size] }} {{ extra_classes }}">
            {{ text }}
        </a>
    {% else %}
        <button type="{{ type }}" class="rounded-lg transition-colors duration-200 {{ color_classes[color] }} {{ size_classes[size] }} {{ extra_classes }}"
            {% if onclick %} onclick="{{ onclick }}" {% endif %}>
            {{ text }}
        </button>
    {% endif %}
{% endmacro %}

{# ejemplos de uso: 
    <!-- Botón como enlace -->
    {{ button("Ir a Google", href="https://www.google.com", color="blue", size="lg") }}

    <!-- Botón con acción onclick -->
    {{ button("Mostrar Alerta", onclick="showMessage()", color="green", size="lg") }}
#}
```

=== File: ./templates/default/partials/sidebar.j2 ===
```jinja-html
{# partials/sidebar.j2 #}
{# Dynamic sidebar, show menus based on user role #}
{% from "settings/_ui_class.j2" import class_sidebar_menu %}
{% from "settings/_flowbite_solid_icons.j2" import icon_caret_down, icon_home, icon_window, icon_inbox, icon_users, icon_microscope, icon_file_chart_bar %}

{# "name": "Administración", "url": "#", "icon": icon_window, "pro": true #}
{% set sidebar_menu = {
    "menu": [
        {"name": "Home", "url": url_for('core.dashboard'), "icon": icon_home},
    ]
} %}

{% if rol == "administrator" or rol == "reseller" %}
    {% set usuarios_menu = {
        "name": "Adm Usuarios",
        "url": "#",
        "icon": icon_users,
        "submenu": [
            {"name": "Clientes", "url": url_for('core.amd_clients')},
            {"name": "Usuarios", "url": url_for('core.amd_users')},
        ]
    } %}
    {% set sidebar_menu = {
        "menu": sidebar_menu.menu + [usuarios_menu]
    } %}
{% endif %}

{% if rol == "administrator" or rol == "reseller" %}
    {% set adm_foliar_menu = {
        "name": "Adm Foliar",
        "url": "#",
        "icon": icon_window,
        "submenu": [
            {"name": "Nutrientes", "url": url_for('foliage.nutrientes') },
            {"name": "Tipos de Cultivos", "url": url_for('foliage.amd_crops') },
            {"name": "Objetivos de Cultivo", "url": url_for('foliage.amd_objectives') }, 

            {"name": "Fincas", "url": url_for('foliage.amd_farms') },
            {"name": "Lotes", "url": url_for('foliage.amd_lots') },
            {"name": "Lote/Cultivo", "url": url_for('foliage.amd_lot_crops') }, 
            
            {"name": "Productos", "url": url_for('foliage.amd_products') },
            {"name": "Aportes de Productos", "url": url_for('foliage.amd_product_contributions') },
            {"name": "Precios de Prod", "url": url_for('foliage.amd_product_prices') },
        ]
    } %}
    {% set sidebar_menu = {
        "menu": sidebar_menu.menu + [adm_foliar_menu]
    } %}
{% endif %}

{% if rol == "administrator" or rol == "reseller" %}
    {% set foliar_menu = {
        "name": "Análisis Foliar",
        "url": "#",
        "icon": icon_microscope,
        "submenu": [
            {"name": "Análisis Común", "url": url_for('foliage.amd_common_analyses') },
            {"name": "Análisis Foliar", "url": url_for('foliage.amd_leaf_analyses') },
            {"name": "Análisis de Suelo", "url": url_for('foliage.amd_soil_analyses') },
            {"name": "Consumo - Apl. Nutrientes", "url": url_for('foliage.amd_nutrient_applications') }, 
            {"name": "Producción", "url": url_for('foliage.amd_productions') }, 
        ]
    } %}
    {% set sidebar_menu = {
        "menu": sidebar_menu.menu + [foliar_menu]
    } %}
{% endif %}

{% set reportes = {
    "name": "Análisis de datos",
    "url": "#",
    "icon": icon_file_chart_bar,
    "notifications": 3,
    "submenu": [
        {"name": "Recomendaciones", "url": url_for('foliage_report.listar_reportes') },
        {"name": "Generar reporte", "url": url_for('foliage_report.generar_informe') },
        {"name": "Ver reporte", "url": url_for('foliage_report.vista_reporte') },
    ]
} %}
{% set sidebar_menu = {
    "menu": sidebar_menu.menu + [reportes]
} %}

<aside id="sidebar" class="w-64 flex-shrink-0 h-full overflow-y-auto sidebar-hidden md:block bg-gray-800 text-white"
    aria-label="Sidebar">
    <div class="h-full px-3 py-4 overflow-y-auto bg-gray-50 dark:bg-gray-800">
    {% if sidebar_menu %}
        <ul class="space-y-2 font-medium">
            {% for item in sidebar_menu.menu %}
                <li data-visible="{% if item.submenu %}{{ item.visible|default('onClick') }}{% endif %}">
                    {% if item.submenu %}
                        <button type="button" class="flex items-center w-full p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100
                            dark:hover:bg-gray-700 group text-left" onclick="toggleSubMenu(this)">
                            {{ item.icon }}
                            <span class="flex-1 ms-3 whitespace-nowrap">{{ item.name }}</span>
                                {{ icon_caret_down }}
                        </button>
                        <ul class="hidden pl-1 mt-2 space-y-2 rounded-lg bg-gray-200 dark:bg-gray-900">
                            {% for submenu_item in item.submenu %}
                                <li>
                                    <a href="{{ submenu_item.url }}" class="flex p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-300
                                        dark:hover:bg-gray-700 group">
                                        <span class="flex-1 ms-3 whitespace-nowrap">{{ submenu_item.name }}</span>
                                    </a>
                                </li>
                            {% endfor %}
                        </ul>
                    {% else %}
                        <a href="{{ item.url }}" class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100
                            dark:hover:bg-gray-700 group">
                            {{ item.icon }}
                            <span class="flex-1 ms-3 whitespace-nowrap">{{ item.name }}</span>
{% if item.pro %}
      <span class="inline-flex items-center justify-center px-2 ms-3 text-sm font-medium text-gray-800 bg-gray-300 rounded-full dark:bg-gray-700 dark:text-gray-300">Pro</span>
                              {% endif %}
                            {% if item.notifications %}
                                <span class="inline-flex items-center justify-center w-3 h-3 p-3 ms-3 text-sm font-medium text-blue-800 
                                    bg-blue-100 rounded-full dark:bg-blue-900 dark:text-blue-300">
                                    {{ item.notifications }}
                                </span>
                            {% endif %}
                        </a>
                    {% endif %}
                </li>
            {% endfor %}
        </ul>
        {% else %}
            <p class="text-center text-gray-500">No menu items</p>
        {% endif %}
    </div>
</aside>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Restaurar estado del menú
    document.querySelectorAll('[data-visible="onClick"]').forEach(li => {
        const submenu = li.querySelector('ul');
        const currentPath = window.location.pathname;
        
        // Verificar si la ruta actual está en este submenú
        const hasActiveLink = Array.from(submenu.querySelectorAll('a'))
            .some(a => a.getAttribute('href') === currentPath);
        
        if (hasActiveLink) {
            submenu.classList.remove('hidden');
        } else {
            const buttonText = li.querySelector('button').textContent.trim().toLowerCase();
            const storedState = localStorage.getItem(`submenu-${buttonText}`);
            
            // Si no hay nada guardado en localStorage, se establece el estado inicial como cerrado
            if (storedState === null) {
                submenu.classList.add('hidden');
                localStorage.setItem(`submenu-${buttonText}`, 'closed');
            } else {
                submenu.classList.toggle('hidden', storedState === 'closed');
            }
        }
    });
});

function toggleSubMenu(button) {
    const li = button.closest('li');
    const submenu = li.querySelector('ul');
    
    // Verificar si el submenú está abierto o cerrado
    const isOpen = submenu.classList.contains('hidden');
    
    // Toggle el estado del submenú
    submenu.classList.toggle('hidden');
    
    // Guardar estado
    const buttonText = button.textContent.trim().toLowerCase();
    localStorage.setItem(`submenu-${buttonText}`, isOpen ? 'open' : 'closed');
}
</script>
```

=== File: ./templates/default/partials/float_login_button.j2 ===
```jinja-html
{# partials/float_login_botton.j2 #}
{# It should have been a macro, but it's just a floating button #}
<div class="fixed bottom-20 right-0 z-50 ">
    <div class="login-button">
        <a href="{{ url_for('core.login') }}" class="duration-300">
            <svg class="w-[34px] h-[34px] text-gray-800 dark:text-white" aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg" width="34" height="34" fill="currentColor" viewBox="0 0 24 24">
                <path fill-rule="evenodd"
                    d="M12 20a7.966 7.966 0 0 1-5.002-1.756l.002.001v-.683c0-1.794 1.492-3.25 3.333-3.25h3.334c1.84 0 3.333 1.456 3.333 3.25v.683A7.966 7.966 0 0 1 12 20ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10c0 5.5-4.44 9.963-9.932 10h-.138C6.438 21.962 2 17.5 2 12Zm10-5c-1.84 0-3.333 1.455-3.333 3.25S10.159 13.5 12 13.5c1.84 0 3.333-1.455 3.333-3.25S13.841 7 12 7Z"
                    clip-rule="evenodd" />
            </svg>

        </a>
    </div>
</div>
```

=== File: ./templates/default/partials/footer.j2 ===
```jinja-html
{# partials/footer.j2 #}
<footer class="bg-white dark:bg-gray-700 shadow-md mt-auto">
    <div class="container mx-auto px-6 py-4 flex flex-col md:flex-row justify-between items-center">
        <!-- Copyright Section -->
        <div class="text-center md:text-left mb-4 md:mb-0">
            <p class="text-gray-600 dark:text-gray-300 text-xs">&copy; Copyright 2025 <a href="https://www.tecnovant.com/" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-600 transition-colors duration-200">TecnoVant</a> - All rights reserved.</p>
        </div>

        <!-- Credits Section -->
        <div class="credits text-center md:text-right" itemscope itemtype="http://schema.org/CreativeWork">
            <h6 class="text-gray-600 text-xs dark:text-gray-300" itemprop="creator" itemscope itemtype="http://schema.org/Organization">
                Design & development by
                <a class="text-blue-600 text-xs dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-600 transition-colors duration-200"
                   itemprop="url" 
                   href="https://www.unweb.co/" 
                   title="Diseño Web Profesional">
                    UnWeb.CO
                </a>
            </h6>
        </div>
    </div>
</footer>

<button id="darkModeToggle" class="fixed bottom-4 right-4 bg-gray-200 dark:bg-gray-950 p-2 rounded-full shadow-lg">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
    </svg>
</button>

<script src="/js/popper.min.js"></script>
<script src="/js/main.js"></script>
```

=== File: ./templates/default/partials/head.j2 ===
```jinja-html
{# partials/head.j2 #}
{# dinamic head metadata and tags #}
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="{% block description %}{{ description|default('Descripción por defecto del sitio.') }}{% endblock %}">
    <meta name="keywords" content="{% block keywords %}{{ keywords|default('palabra clave 1, palabra clave 2, palabra clave 3') }}{% endblock %}">
    <meta name="author" content="{{ author|default('Nombre del autor o empresa') }}">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{ request.url }}">
    <meta property="og:title" content="{% block og_title %}{{ title }} - {{ site_title }}{% endblock %}">
    <meta property="og:description" content="{% block og_description %}{{ description|default('Descripción por defecto del sitio.') }}{% endblock %}">
    <meta property="og:image" content="{% block og_image %}{{ og_image|default('/img/og-image.jpg') }}{% endblock %}">
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="{{ request.url }}">
    <meta property="twitter:title" content="{% block twitter_title %}{{ title }} - {{ site_title }}{% endblock %}">
    <meta property="twitter:description" content="{% block twitter_description %}{{ description|default('Descripción por defecto del sitio.') }}{% endblock %}">
    <meta property="twitter:image" content="{% block twitter_image %}{{ twitter_image|default('/img/twitter-image.jpg') }}{% endblock %}">
    
    <link rel="icon" type="image/x-icon" href="/img/favicon.ico">
    
    
    <link rel="stylesheet" type="text/css" href="/css/main.css">
    <link rel="stylesheet" type="text/css" href="/css/extra.css">

    
    {% block extra_css %}
    {{ css_code|safe }}
    {% endblock %}
    {% block extra_head %}
    {{ js_code|safe }}
    {% endblock %}
    
    <title>{% block title %}{{ title }} - {{ site_title }}{% endblock %}</title>

```

=== File: ./templates/default/partials/header.j2 ===
```jinja-html
{# partials/header.j2 #}
{# header layout, topbar -> logo, menu #}
<header class="bg-white dark:bg-gray-700 shadow-md">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
            <!-- Logo -->
            <div class="flex-shrink-0 lg:pl-12 sm:pl-12 xs:pl-12">
                <a href="/" class="flex items-center">
                    <img class="h-12 w-auto" src="/img/logo.png" alt="Logo">
                </a>
            </div>

            <!-- Title (hidden on mobile) -->
            <h1 class="hidden md:block text-2xl font-bold text-primary">{{ page_title }}</h1>

{% if data_menu %}
            {% block navigation %}
            <nav class="flex items-center">
                {% include 'partials/navigation.j2' %}
            </nav>

            {% endblock %}
{% endif %}
        </div>


        <!-- Title (visible only on mobile) -->
        <h1 class="md:hidden text-2xl font-bold text-primary text-center py-2">{{ page_title }}</h1>
    </div>
</header>
```

=== File: ./templates/default/partials/navigation.j2 ===
```jinja-html
{# partials/navigation.j2 #}
{# top navigation menu #}
{% from "settings/_ui_class.j2" import close_menu_button, menu_link_style, bg_color, menu_bg_color, shadow, rounded %}

<button id="mobile-menu-button" class="md:hidden {{ close_menu_button }}" aria-controls="menu" aria-expanded="false">
    <span class="sr-only">Toggle menu</span>
    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
</button>

<nav id="menu" class="hidden md:block {{ menu_bg_color }} {{ shadow }} {{ rounded }}">
    <button id="close-menu-button" class="hidden absolute top-4 right-4 {{ close_menu_button }}">
        <span class="sr-only">Close menu</span>
        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
    </button>


    {% if data_menu %}
    <ul class="md:flex md:space-x-4">
        {% for item in data_menu.menu %}
        <li><a href="{{ item.url }}" class="{{ menu_link_style }}">{{ item.name }}</a></li>
        {% endfor %}
    </ul>
    {% endif %}
</nav>
```

=== File: ./templates/default/partials/sidebar_toggle.j2 ===
```jinja-html
{# partials/sidebar_toggle.j2 #}
{# Button to hide and show the sidebar on mobile #}
<button id="sidebarToggle"
    class="md:hidden fixed top-4 left-4 z-50 bg-gray-200 dark:bg-gray-700 p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
    aria-label="Toggle Sidebar">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
    </svg>
</button>
```

=== File: ./templates/default/settings/_flowbite_solid_icons.j2 ===
```jinja-html
{% set icon_arrow_right_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M3 4a1 1 0 0 0-.822 1.57L6.632 12l-4.454 6.43A1 1 0 0 0 3 20h13.153a1 1 0 0 0 .822-.43l4.847-7a1 1 0 0 0 0-1.14l-4.847-7a1 1 0 0 0-.822-.43H3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_caret_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M18.425 10.271C19.499 8.967 18.57 7 16.88 7H7.12c-1.69 0-2.618 1.967-1.544 3.271l4.881 5.927a2 2 0 0 0 3.088 0l4.88-5.927Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_caret_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M13.729 5.575c1.304-1.074 3.27-.146 3.27 1.544v9.762c0 1.69-1.966 2.618-3.27 1.544l-5.927-4.881a2 2 0 0 1 0-3.088l5.927-4.88Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_caret_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M10.271 5.575C8.967 4.501 7 5.43 7 7.12v9.762c0 1.69 1.967 2.618 3.271 1.544l5.927-4.881a2 2 0 0 0 0-3.088l-5.927-4.88Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_caret_sort = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12.832 3.445a1 1 0 0 0-1.664 0l-4 6A1 1 0 0 0 8 11h8a1 1 0 0 0 .832-1.555l-4-6Zm-1.664 17.11a1 1 0 0 0 1.664 0l4-6A1 1 0 0 0 16 13H8a1 1 0 0 0-.832 1.555l4 6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_caret_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.575 13.729C4.501 15.033 5.43 17 7.12 17h9.762c1.69 0 2.618-1.967 1.544-3.271l-4.881-5.927a2 2 0 0 0-3.088 0l-4.88 5.927Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_forward = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M5.027 10.9a8.729 8.729 0 0 1 6.422-3.62v-1.2A2.061 2.061 0 0 1 12.61 4.2a1.986 1.986 0 0 1 2.104.23l5.491 4.308a2.11 2.11 0 0 1 .588 2.566 2.109 2.109 0 0 1-.588.734l-5.489 4.308a1.983 1.983 0 0 1-2.104.228 2.065 2.065 0 0 1-1.16-1.876v-.942c-5.33 1.284-6.212 5.251-6.25 5.441a1 1 0 0 1-.923.806h-.06a1.003 1.003 0 0 1-.955-.7A10.221 10.221 0 0 1 5.027 10.9Z" />
</svg>' %}

{% set icon_reply_all = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9.484 6.743c.41-.368.443-1 .077-1.41a.99.99 0 0 0-1.405-.078L2.67 10.203l-.007.006A2.048 2.048 0 0 0 2 11.721a2.058 2.058 0 0 0 .662 1.51l5.584 5.09a.99.99 0 0 0 1.405-.07 1.003 1.003 0 0 0-.07-1.412l-5.577-5.082a.05.05 0 0 1 0-.072l5.48-4.942Zm6.543 9.199v-.42a4.168 4.168 0 0 1 2.715 2.415c.154.382.44.695.806.88a1.683 1.683 0 0 0 2.167-.571c.214-.322.312-.707.279-1.092V15.88c0-3.77-2.526-7.039-5.966-7.573V7.57a1.957 1.957 0 0 0-.994-1.838 1.931 1.931 0 0 0-2.153.184L7.8 10.164a.753.753 0 0 0-.012.011l-.011.01a2.098 2.098 0 0 0-.703 1.57 2.108 2.108 0 0 0 .726 1.59l5.08 4.25a1.933 1.933 0 0 0 2.929-.614c.167-.32.242-.68.218-1.04Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_reply = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M14.502 7.046h-2.5v-.928a2.122 2.122 0 0 0-1.199-1.954 1.827 1.827 0 0 0-1.984.311L3.71 8.965a2.2 2.2 0 0 0 0 3.24L8.82 16.7a1.829 1.829 0 0 0 1.985.31 2.121 2.121 0 0 0 1.199-1.959v-.928h1a2.025 2.025 0 0 1 1.999 2.047V19a1 1 0 0 0 1.275.961 6.59 6.59 0 0 0 4.662-7.22 6.593 6.593 0 0 0-6.437-5.695Z" />
</svg>' %}

{% set icon_share_all = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M14.516 6.743c-.41-.368-.443-1-.077-1.41a.99.99 0 0 1 1.405-.078l5.487 4.948.007.006A2.047 2.047 0 0 1 22 11.721a2.06 2.06 0 0 1-.662 1.51l-5.584 5.09a.99.99 0 0 1-1.404-.07 1.003 1.003 0 0 1 .068-1.412l5.578-5.082a.05.05 0 0 0 .015-.036.051.051 0 0 0-.015-.036l-5.48-4.942Zm-6.543 9.199v-.42a4.168 4.168 0 0 0-2.715 2.415c-.154.382-.44.695-.806.88a1.683 1.683 0 0 1-2.167-.571 1.705 1.705 0 0 1-.279-1.092V15.88c0-3.77 2.526-7.039 5.967-7.573V7.57a1.957 1.957 0 0 1 .993-1.838 1.931 1.931 0 0 1 2.153.184l5.08 4.248a.646.646 0 0 1 .012.011l.011.01a2.098 2.098 0 0 1 .703 1.57 2.108 2.108 0 0 1-.726 1.59l-5.08 4.25a1.933 1.933 0 0 1-2.929-.614 1.957 1.957 0 0 1-.217-1.04Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_X = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M13.795 10.533 20.68 2h-3.073l-5.255 6.517L7.69 2H1l7.806 10.91L1.47 22h3.074l5.705-7.07L15.31 22H22l-8.205-11.467Zm-2.38 2.95L9.97 11.464 4.36 3.627h2.31l4.528 6.317 1.443 2.02 6.018 8.409h-2.31l-4.934-6.89Z" />
</svg>' %}

{% set icon_apple = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M17.537 12.625a4.421 4.421 0 0 0 2.684 4.047 10.96 10.96 0 0 1-1.384 2.845c-.834 1.218-1.7 2.432-3.062 2.457-1.34.025-1.77-.794-3.3-.794-1.531 0-2.01.769-3.275.82-1.316.049-2.317-1.318-3.158-2.532-1.72-2.484-3.032-7.017-1.27-10.077A4.9 4.9 0 0 1 8.91 6.884c1.292-.025 2.51.869 3.3.869.789 0 2.27-1.075 3.828-.917a4.67 4.67 0 0 1 3.66 1.984 4.524 4.524 0 0 0-2.16 3.805m-2.52-7.432A4.4 4.4 0 0 0 16.06 2a4.482 4.482 0 0 0-2.945 1.516 4.185 4.185 0 0 0-1.061 3.093 3.708 3.708 0 0 0 2.967-1.416Z" />
</svg>' %}

{% set icon_aws = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M7.70858 10.176c-.0059.1918.02016.3833.07716.567.05635.1582.12675.3114.21041.4577.02989.0424.04691.0921.04909.1435-.00368.0394-.01708.0774-.03906.1107-.02198.0333-.05189.0609-.08718.0806l-.41382.2664c-.04921.0342-.10786.0533-.16833.0546-.03729-.0006-.07404-.0088-.10786-.0241-.03383-.0153-.06399-.0373-.08852-.0647-.09084-.0886-.17086-.1872-.23847-.2937-.06312-.1093-.12625-.2323-.19638-.3758-.23007.28-.52286.505-.85597.6577-.3331.1528-.69768.2293-1.0658.2236-.23782.0125-.47581-.0215-.69988-.1002-.22407-.0786-.42969-.2002-.60468-.3575-.16281-.1601-.28937-.3516-.37152-.5622s-.11806-.4357-.10542-.6607c-.0085-.2476.04-.49387.14195-.72084.10194-.22696.25475-.42883.44721-.59079.45708-.34704 1.02741-.5217 1.60615-.49187.23468-.00102.46912.01497.70137.04782.24549.03416.49097.08198.75048.13663V8.2153c.03746-.36552-.07329-.73083-.30861-1.0179-.30324-.22803-.68514-.33327-1.06609-.29376-.23624.00109-.47158.02859-.70138.08198-.23919.05528-.47367.12837-.70137.21861l-.23146.08198h-.09819c-.09819 0-.14027-.06832-.14027-.19812v-.31425c-.00622-.07522.00831-.15069.04208-.21861.05218-.0584.1168-.10503.18937-.13663.2626-.12306.53761-.21922.82061-.28693.33218-.08331.67398-.12464 1.01699-.12297.61832-.0525 1.23302.134 1.71136.5192.19644.21006.34589.45761.43886.72693.09297.26931.12744.55452.1012.83751L7.70858 10.176Zm-2.6512.9701c.23887.0003.47605-.039.70138-.1162.23999-.0798.45329-.2214.61721-.4099.10821-.114.18537-.2525.22444-.403.04532-.1811.06654-.36707.06312-.5534v-.28693c-.20607-.04171-.41451-.07136-.62422-.08881H5.4221c-.34289-.02679-.68477.06249-.9679.25277-.10942.08972-.19564.20325-.25168.33142-.05605.12815-.08036.26735-.07095.40635-.01155.1238.00371.2486.04479.3663.04108.1177.10706.2256.19367.3169.19501.1477.4422.214.68735.1845Zm5.25332.6831c-.0889.0081-.178-.0136-.2525-.0615-.07121-.069-.12-.1569-.14028-.2527l-1.529-4.91878c-.03108-.08355-.04997-.17094-.05611-.2596 0-.10247.04909-.15713.1543-.15713h.64527c.08889-.00805.17795.01364.25249.06149.06832.07011.11457.15783.13326.25277L10.6193 10.743l1.031-4.24242c.0108-.09596.0554-.1853.1263-.25277.0771-.04787.1684-.06949.2595-.06149h.526c.0933-.008.1868.01357.2665.06149.0658.07094.1096.15858.1263.25277l1.017 4.24242 1.1292-4.26292c.0187-.09493.0649-.18265.1332-.25277.0746-.04785.1636-.06953.2525-.06148h.6102c.0218-.00213.0437.00047.0643.00761.0205.00714.0392.01865.0547.03369.0154.01503.0272.03323.0345.05326.0074.02004.01.04141.0079.06257.0026.03411.0026.06836 0 .10247 0 0 0 .08881-.0421.15713l-1.5851 4.91874c-.0187.0949-.065.1826-.1333.2528-.0754.0459-.1638.0675-.2525.0614h-.5611c-.0922.0096-.1848-.0148-.2595-.0683-.0695-.0684-.1139-.1572-.1263-.2527l-1.0169-4.09899-1.01 4.09899c-.0124.0955-.0568.1843-.1263.2527-.0753.0524-.1674.0766-.2595.0683l-.5751.0137Zm8.4165.164c-.3399.0015-.6788-.0351-1.01-.1093-.2607-.051-.5131-.136-.7505-.2528-.0839-.039-.1545-.1006-.2034-.1776-.0272-.0579-.0415-.1208-.042-.1845v-.3211c0-.1298.0491-.1981.1473-.1981.0418-.0065.0844-.0065.1262 0l.1613.0683c.2248.0979.46.1712.7014.2186.2558.0543.5168.0818.7785.082.3323.0202.6634-.0534.9539-.2118.1055-.0624.1921-.1509.2512-.2565.0592-.1055.0886-.2244.0855-.3446.0033-.0818-.0106-.1633-.0407-.2397-.0302-.07633-.076-.14588-.1347-.20439-.1899-.16027-.4157-.27492-.6593-.33474l-.9468-.29376c-.4097-.1003-.7758-.32526-1.0451-.64217-.2118-.26596-.3277-.59251-.3296-.92909-.0039-.23873.0566-.47428.1753-.68316.1173-.2053.2774-.38447.4699-.52603.2109-.15082.4487-.26203.7014-.32792.2689-.07547.5478-.11229.8276-.1093.1448-.00996.2901-.00996.4349 0l.4278.06831.3717.10247.2736.10931c.0734.04221.1396.09522.1964.15713.0391.06392.0585.13741.0561.21178v.30058c0 .13664-.0491.20495-.1473.20495-.0891-.00994-.1751-.03786-.2525-.08198-.3981-.16851-.8285-.25236-1.2625-.24593-.3007-.01421-.6002.04695-.8697.17762-.1001.05934-.1817.14411-.236.24521-.0544.1011-.0795.21471-.0726.32864-.0003.08419.0169.16757.0507.24507.0337.07751.0833.14753.1457.20581.207.16139.4457.27994.7014.34842l.9258.28692c.3924.10142.7444.31568 1.01.61484.201.25675.3073.57207.3016.89491.0041.2554-.0535.5082-.1684.7378-.1126.22-.2758.4117-.4769.5602-.2081.163-.4461.2859-.7014.3621-.3061.0959-.6253.1465-.9468.1503l.021-.0068ZM1.95721 14.0043c.08851-.1117.25276-.1417.40291-.0501 2.956 1.6699 6.30435 2.5466 9.71118 2.5424 2.547-.0102 5.0667-.5176 7.4139-1.4927.2212-.0923.442-.0252.5504.1273.0544.0765.0784.1732.056.2731-.0223.0994-.088.1913-.1929.2664l-.0025.0018c-2.374 1.591-5.18 2.437-8.0499 2.4273-3.62804.0192-7.13297-1.2975-9.82873-3.6929.00006 0-.00007-.0001 0 0-.06599-.0585-.10575-.1289-.1154-.2033-.00962-.0742.01189-.1449.05504-.1993Z" />
    <path fill="currentColor"
        d="M21.9852 13.2357c-.0506-.0587-.1329-.1058-.2258-.1441-.0959-.0396-.2151-.0746-.3508-.1035-.2719-.0579-.6185-.093-.9967-.0876-.7541.0108-1.6508.183-2.3341.6748-.1118.0805-.1949.1945-.1751.3147.0225.1362.1551.1917.2864.1917l.0241-.003c.375-.0465.9652-.1198 1.5-.134.2706-.0072.5225.0009.7232.0339.1003.0164.1845.0386.2506.0663.0667.028.1084.0591.1318.0896l.001.0013c.0211.0266.0396.072.0489.1434.0092.0704.0085.1579-.0018.2604-.0204.2049-.0773.456-.1527.723-.1173.4156-.2758.8577-.4014 1.2081-.0355.0991-.0684.1909-.097.2727-.0253.0645-.0344.13-.0204.1901.0147.063.0538.1145.1113.143.1108.0549.2469.0095.3548-.0833.6431-.5509 1.0488-1.3947 1.2591-2.1349.1055-.3712.1632-.7208.1764-1.0006.0065-.1398.0021-.2647-.0141-.3675-.0155-.099-.0442-.1922-.0977-.2545Z" />
</svg>' %}

{% set icon_bitcoin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M10.7367 14.5876c.895.2365 2.8528.754 3.1643-.4966.3179-1.2781-1.5795-1.7039-2.5053-1.9117-.1034-.0232-.1947-.0437-.2694-.0623l-.6025 2.4153c.0611.0152.1328.0341.2129.0553Zm.8452-3.5291c.7468.1993 2.3746.6335 2.6581-.5025.2899-1.16213-1.2929-1.5124-2.066-1.68348-.0869-.01923-.1635-.03619-.2262-.0518l-.5462 2.19058c.0517.0129.1123.0291.1803.0472Z" />
    <path fill="currentColor" fill-rule="evenodd"
        d="M9.57909 21.7008c5.35781 1.3356 10.78401-1.9244 12.11971-7.2816 1.3356-5.35745-1.9247-10.78433-7.2822-12.11995C9.06034.963624 3.6344 4.22425 2.2994 9.58206.963461 14.9389 4.22377 20.3652 9.57909 21.7008ZM14.2085 8.0526c1.3853.47719 2.3984 1.1925 2.1997 2.5231-.1441.9741-.6844 1.4456-1.4013 1.6116.9844.5128 1.485 1.2987 1.0078 2.6612-.5915 1.6919-1.9987 1.8347-3.8697 1.4807l-.454 1.8196-1.0972-.2734.4481-1.7953c-.2844-.0706-.575-.1456-.8741-.2269l-.44996 1.8038-1.09594-.2735.45407-1.8234c-.10059-.0258-.20185-.0522-.30385-.0788-.15753-.0411-.3168-.0827-.47803-.1231l-1.42812-.3559.54468-1.2563s.80844.215.7975.1991c.31063.0769.44844-.1256.50282-.2606l.71781-2.8766.11562.0288c-.04375-.0175-.08343-.0288-.11406-.0366l.51188-2.05344c.01375-.23312-.06688-.52719-.51125-.63812.01718-.01157-.79688-.19813-.79688-.19813l.29188-1.17187 1.51313.37781-.0013.00562c.2275.05657.4619.11032.7007.16469l.4497-1.80187 1.0965.27343-.4406 1.76657c.2944.06718.5906.135.8787.20687l.4375-1.755 1.0975.27344-.4493 1.8025Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_css = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m3 2 1.578 17.834L12 22l7.468-2.165L21 2H3Zm13.3 14.722-4.293 1.204H12l-4.297-1.204-.297-3.167h2.108l.15 1.526 2.335.639 2.34-.64.245-3.05h-7.27l-.187-2.006h7.64l.174-2.006H6.924l-.176-2.006h10.506l-.954 10.71Z" />
</svg>' %}

{% set icon_discord = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M18.942 5.556a16.3 16.3 0 0 0-4.126-1.3 12.04 12.04 0 0 0-.529 1.1 15.175 15.175 0 0 0-4.573 0 11.586 11.586 0 0 0-.535-1.1 16.274 16.274 0 0 0-4.129 1.3 17.392 17.392 0 0 0-2.868 11.662 15.785 15.785 0 0 0 4.963 2.521c.41-.564.773-1.16 1.084-1.785a10.638 10.638 0 0 1-1.706-.83c.143-.106.283-.217.418-.331a11.664 11.664 0 0 0 10.118 0c.137.114.277.225.418.331-.544.328-1.116.606-1.71.832a12.58 12.58 0 0 0 1.084 1.785 16.46 16.46 0 0 0 5.064-2.595 17.286 17.286 0 0 0-2.973-11.59ZM8.678 14.813a1.94 1.94 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.918 1.918 0 0 1 1.8 2.047 1.929 1.929 0 0 1-1.8 2.045Zm6.644 0a1.94 1.94 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.919 1.919 0 0 1 1.8 2.047 1.93 1.93 0 0 1-1.8 2.045Z" />
</svg>' %}

{% set icon_dribbble = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 2a10 10 0 1 0 10 10A10.009 10.009 0 0 0 12 2Zm6.613 4.614a8.523 8.523 0 0 1 1.93 5.32 20.093 20.093 0 0 0-5.949-.274c-.059-.149-.122-.292-.184-.441a23.879 23.879 0 0 0-.566-1.239 11.41 11.41 0 0 0 4.769-3.366ZM10 3.707a8.82 8.82 0 0 1 2-.238 8.5 8.5 0 0 1 5.664 2.152 9.608 9.608 0 0 1-4.476 3.087A45.755 45.755 0 0 0 10 3.707Zm-6.358 6.555a8.57 8.57 0 0 1 4.73-5.981 53.99 53.99 0 0 1 3.168 4.941 32.078 32.078 0 0 1-7.9 1.04h.002Zm2.01 7.46a8.51 8.51 0 0 1-2.2-5.707v-.262a31.641 31.641 0 0 0 8.777-1.219c.243.477.477.964.692 1.449-.114.032-.227.067-.336.1a13.569 13.569 0 0 0-6.942 5.636l.009.003ZM12 20.556a8.508 8.508 0 0 1-5.243-1.8 11.717 11.717 0 0 1 6.7-5.332.509.509 0 0 1 .055-.02 35.65 35.65 0 0 1 1.819 6.476 8.476 8.476 0 0 1-3.331.676Zm4.772-1.462A37.232 37.232 0 0 0 15.113 13a12.513 12.513 0 0 1 5.321.364 8.56 8.56 0 0 1-3.66 5.73h-.002Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_dropbox = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12.013 6.175 7.006 9.369l5.007 3.194-5.007 3.193L2 12.545l5.006-3.193L2 6.175l5.006-3.194 5.007 3.194ZM6.981 17.806l5.006-3.193 5.006 3.193L11.987 21l-5.006-3.194Z" />
    <path
        d="m12.013 12.545 5.006-3.194-5.006-3.176 4.98-3.194L22 6.175l-5.007 3.194L22 12.562l-5.007 3.194-4.98-3.211Z" />
</svg>' %}

{% set icon_facebook = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M13.135 6H15V3h-1.865a4.147 4.147 0 0 0-4.142 4.142V9H7v3h2v9.938h3V12h2.021l.592-3H12V6.591A.6.6 0 0 1 12.592 6h.543Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_flowbite = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M15.907 11.998 10.332 9.23a.9.9 0 0 1-.16-.037l-.018-.007v6.554c0 .017.008.034.01.051l2.388-2.974 3.355-.82Z" />
    <path
        d="m11.463 4.054 5.579 3.323A4.02 4.02 0 0 1 18.525 9c.332.668.47 1.414.398 2.155a3.07 3.07 0 0 1-.745 1.65 3.108 3.108 0 0 1-1.55.951c-.022.007-.045.005-.07.01-.062.03-.126.057-.191.08l-2.72.667-1.992 2.48c-.18.227-.41.409-.67.534.047.034.085.077.137.107a2.05 2.05 0 0 0 1.995.035c.592-.33 2.15-1.201 4.636-2.892l.28-.19c1.328-.895 3.616-2.442 3.967-4.215a9.94 9.94 0 0 0-1.713-4.154 10.027 10.027 0 0 0-3.375-2.989 10.107 10.107 0 0 0-8.802-.418c1.162.287 2.287.704 3.354 1.243Z" />
    <path
        d="M5.382 17.082v-6.457a3.7 3.7 0 0 1 .45-1.761 3.733 3.733 0 0 1 1.238-1.34 3.915 3.915 0 0 1 3.433-.245c.176.03.347.084.508.161l5.753 2.856c.082.05.161.105.236.165a2.128 2.128 0 0 0-.953-1.455l-5.51-3.284c-1.74-.857-3.906-1.523-5.244-1.097a9.96 9.96 0 0 0-2.5 3.496 9.895 9.895 0 0 0 .283 8.368 9.973 9.973 0 0 0 2.73 3.322 17.161 17.161 0 0 1-.424-2.729Z" />
    <path
        d="m19.102 16.163-.272.183c-2.557 1.74-4.169 2.64-4.698 2.935a4.083 4.083 0 0 1-2 .53 3.946 3.946 0 0 1-1.983-.535 3.788 3.788 0 0 1-1.36-1.361 3.752 3.752 0 0 1-.51-1.85 1.812 1.812 0 0 1-.043-.26V9.143c0-.024.009-.046.01-.07-.056.02-.11.043-.162.07a1.796 1.796 0 0 0-.787 1.516v6.377a10.67 10.67 0 0 0 1.113 4.27 10.11 10.11 0 0 0 8.505-.53 10.022 10.022 0 0 0 3.282-2.858 9.936 9.936 0 0 0 1.75-3.97 19.615 19.615 0 0 1-2.845 2.216Z" />
</svg>' %}

{% set icon_github = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12.006 2a9.847 9.847 0 0 0-6.484 2.44 10.32 10.32 0 0 0-3.393 6.17 10.48 10.48 0 0 0 1.317 6.955 10.045 10.045 0 0 0 5.4 4.418c.504.095.683-.223.683-.494 0-.245-.01-1.052-.014-1.908-2.78.62-3.366-1.21-3.366-1.21a2.711 2.711 0 0 0-1.11-1.5c-.907-.637.07-.621.07-.621.317.044.62.163.885.346.266.183.487.426.647.71.135.253.318.476.538.655a2.079 2.079 0 0 0 2.37.196c.045-.52.27-1.006.635-1.37-2.219-.259-4.554-1.138-4.554-5.07a4.022 4.022 0 0 1 1.031-2.75 3.77 3.77 0 0 1 .096-2.713s.839-.275 2.749 1.05a9.26 9.26 0 0 1 5.004 0c1.906-1.325 2.74-1.05 2.74-1.05.37.858.406 1.828.101 2.713a4.017 4.017 0 0 1 1.029 2.75c0 3.939-2.339 4.805-4.564 5.058a2.471 2.471 0 0 1 .679 1.897c0 1.372-.012 2.477-.012 2.814 0 .272.18.592.687.492a10.05 10.05 0 0 0 5.388-4.421 10.473 10.473 0 0 0 1.313-6.948 10.32 10.32 0 0 0-3.39-6.165A9.847 9.847 0 0 0 12.007 2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_gitlab = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="m20.7011 10.1255-.0253-.0672-2.4501-6.63953c-.0498-.13013-.1381-.24053-.2521-.31534-.1141-.07354-.2472-.10896-.3812-.10147-.1341.00748-.2628.05751-.3686.14332-.1047.08828-.1806.2079-.2175.34259l-1.6543 5.2556H8.65334l-1.65429-5.2556c-.03588-.13542-.11197-.25564-.21745-.34356-.10584-.08582-.23449-.13584-.36857-.14333-.13409-.00748-.26716.02794-.38125.10148-.11376.07511-.20195.18541-.25213.31534l-2.45472 6.6367-.02437.0671c-.35269.9569-.39623 2.007-.12404 2.9918.27219.9849.84535 1.8511 1.63305 2.4682l.00844.0068.02249.0166 3.73223 2.9022 1.84647 1.4512 1.1247.8817c.1316.1037.2922.1599.4574.1599.1652 0 .3258-.0562.4574-.1599l1.1247-.8817 1.8464-1.4512 3.7548-2.9198.0093-.0077c.786-.6172 1.3578-1.4826 1.6296-2.4661.2717-.9835.2288-2.0321-.1224-2.9881Z" />
</svg>' %}

{% set icon_google = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12.037 21.998a10.313 10.313 0 0 1-7.168-3.049 9.888 9.888 0 0 1-2.868-7.118 9.947 9.947 0 0 1 3.064-6.949A10.37 10.37 0 0 1 12.212 2h.176a9.935 9.935 0 0 1 6.614 2.564L16.457 6.88a6.187 6.187 0 0 0-4.131-1.566 6.9 6.9 0 0 0-4.794 1.913 6.618 6.618 0 0 0-2.045 4.657 6.608 6.608 0 0 0 1.882 4.723 6.891 6.891 0 0 0 4.725 2.07h.143c1.41.072 2.8-.354 3.917-1.2a5.77 5.77 0 0 0 2.172-3.41l.043-.117H12.22v-3.41h9.678c.075.617.109 1.238.1 1.859-.099 5.741-4.017 9.6-9.746 9.6l-.215-.002Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_html = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m3 2 1.578 17.824L12 22l7.467-2.175L21 2H3Zm14.049 6.048H9.075l.172 2.016h7.697l-.626 6.565-4.246 1.381-4.281-1.455-.288-2.932h2.024l.16 1.411 2.4.815 2.346-.763.297-3.005H7.416l-.562-6.05h10.412l-.217 2.017Z" />
</svg>' %}

{% set icon_instagram = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" fill-rule="evenodd"
        d="M3 8a5 5 0 0 1 5-5h8a5 5 0 0 1 5 5v8a5 5 0 0 1-5 5H8a5 5 0 0 1-5-5V8Zm5-3a3 3 0 0 0-3 3v8a3 3 0 0 0 3 3h8a3 3 0 0 0 3-3V8a3 3 0 0 0-3-3H8Zm7.597 2.214a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2h-.01a1 1 0 0 1-1-1ZM12 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6Zm-5 3a5 5 0 1 1 10 0 5 5 0 0 1-10 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_laravel = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round"
        d="m17 13 3.4641-2V7L17 5l-3.4641 2v4M17 13l-3.4641-2M17 13v4l-7.00001 4M17 13V9m0 4-7.00001 4m3.53591-6L10.5 12.7348M9.99999 21l-3.4641-2.1318M9.99999 21v-4m-3.4641 2v-.1318m0 0V15L10.5 12.7348m-3.96411 6.1334L3.5 17V5m0 0L7 3l3.5 2m-7 0 2.99999 2M10.5 5v7.7348M10.5 5 6.49999 7M17 9l3.5-2M17 9l-3.5-2M9.99999 17l-3.5-2m0 .5V7" />
</svg>' %}

{% set icon_linkedin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12.51 8.796v1.697a3.738 3.738 0 0 1 3.288-1.684c3.455 0 4.202 2.16 4.202 4.97V19.5h-3.2v-5.072c0-1.21-.244-2.766-2.128-2.766-1.827 0-2.139 1.317-2.139 2.676V19.5h-3.19V8.796h3.168ZM7.2 6.106a1.61 1.61 0 0 1-.988 1.483 1.595 1.595 0 0 1-1.743-.348A1.607 1.607 0 0 1 5.6 4.5a1.601 1.601 0 0 1 1.6 1.606Z"
        clip-rule="evenodd" />
    <path d="M7.2 8.809H4V19.5h3.2V8.809Z" />
</svg>' %}

{% set icon_mastercard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" fill-rule="evenodd"
        d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm5.178 12.137a4.137 4.137 0 1 1 1.036-8.144A6.113 6.113 0 0 0 8.726 12c0 1.531.56 2.931 1.488 4.006a4.114 4.114 0 0 1-1.036.131ZM10.726 12c0-1.183.496-2.252 1.294-3.006A4.125 4.125 0 0 1 13.315 12a4.126 4.126 0 0 1-1.294 3.006A4.126 4.126 0 0 1 10.726 12Zm4.59 0a6.11 6.11 0 0 1-1.489 4.006 4.137 4.137 0 1 0 0-8.013A6.113 6.113 0 0 1 15.315 12Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_mongo_db = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" fill-rule="evenodd"
        d="M7.29395 11.8039c0-3.96638 2.13959-6.41723 3.53335-8.01378.6733-.7712 1.1725-1.34306 1.1725-1.79012 0 .44706.4993 1.01892 1.1725 1.79013 1.3938 1.59654 3.5334 4.04739 3.5334 8.01377 0 4.3266-2.7501 6.9507-4.0764 7.7654L12.3701 22h-.7071l-.2906-2.4295c-1.3255-.8132-4.07845-3.4378-4.07845-7.7666Zm4.06395 6.7007.6419-9.44578.649 9.44578-.649.7503-.6419-.7503Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_npm = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 3.87H4v16h8v-13h5v13h3v-16h-8Z" />
</svg>' %}

{% set icon_react = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M21.718 12c0-1.429-1.339-2.681-3.467-3.5.029-.18.077-.37.1-.545.217-2.058-.273-3.543-1.379-4.182-1.235-.714-2.983-.186-4.751 1.239C10.45 3.589 8.7 3.061 7.468 3.773c-1.107.639-1.6 2.124-1.379 4.182.018.175.067.365.095.545-2.127.819-3.466 2.071-3.466 3.5 0 1.429 1.339 2.681 3.466 3.5-.028.18-.077.37-.095.545-.218 2.058.272 3.543 1.379 4.182.376.213.803.322 1.235.316a5.987 5.987 0 0 0 3.514-1.56 5.992 5.992 0 0 0 3.515 1.56 2.44 2.44 0 0 0 1.236-.316c1.106-.639 1.6-2.124 1.379-4.182-.019-.175-.067-.365-.1-.545 2.132-.819 3.471-2.071 3.471-3.5Zm-6.01-7.548a1.5 1.5 0 0 1 .76.187c.733.424 1.055 1.593.884 3.212-.012.106-.043.222-.058.33-.841-.243-1.7-.418-2.57-.523a16.165 16.165 0 0 0-1.747-1.972 4.9 4.9 0 0 1 2.731-1.234Zm-7.917 8.781c.172.34.335.68.529 1.017.194.337.395.656.6.969a14.09 14.09 0 0 1-1.607-.376 14.38 14.38 0 0 1 .478-1.61Zm-.479-4.076a14.085 14.085 0 0 1 1.607-.376c-.205.313-.405.634-.6.969-.195.335-.357.677-.529 1.017-.19-.527-.35-1.064-.478-1.61ZM8.3 12a19.32 19.32 0 0 1 .888-1.75c.33-.568.69-1.118 1.076-1.65.619-.061 1.27-.1 1.954-.1.684 0 1.333.035 1.952.1a19.63 19.63 0 0 1 1.079 1.654c.325.567.621 1.15.887 1.746a18.869 18.869 0 0 1-1.953 3.403 19.218 19.218 0 0 1-3.931 0 20.169 20.169 0 0 1-1.066-1.653A19.324 19.324 0 0 1 8.3 12Zm7.816 2.25c.2-.337.358-.677.53-1.017.191.527.35 1.065.478 1.611a14.48 14.48 0 0 1-1.607.376c.202-.314.404-.635.597-.97h.002Zm.53-3.483c-.172-.34-.335-.68-.53-1.017a20.214 20.214 0 0 0-.6-.97c.542.095 1.078.22 1.606.376a14.111 14.111 0 0 1-.478 1.611h.002ZM12.217 6.34c.4.375.777.773 1.13 1.193-.37-.02-.746-.033-1.129-.033s-.76.013-1.131.033c.353-.42.73-.817 1.13-1.193Zm-4.249-1.7a1.5 1.5 0 0 1 .76-.187 4.9 4.9 0 0 1 2.729 1.233A16.253 16.253 0 0 0 9.71 7.658c-.87.105-1.728.28-2.569.524-.015-.109-.047-.225-.058-.331-.171-1.619.151-2.787.885-3.211ZM3.718 12c0-.9.974-1.83 2.645-2.506.218.857.504 1.695.856 2.506-.352.811-.638 1.65-.856 2.506C4.692 13.83 3.718 12.9 3.718 12Zm4.25 7.361c-.734-.423-1.056-1.593-.885-3.212.011-.106.043-.222.058-.331.84.243 1.697.418 2.564.524a16.37 16.37 0 0 0 1.757 1.982c-1.421 1.109-2.714 1.488-3.494 1.037Zm3.11-2.895c.374.021.753.034 1.14.034.387 0 .765-.013 1.139-.034a14.4 14.4 0 0 1-1.14 1.215 14.248 14.248 0 0 1-1.139-1.215Zm5.39 2.895c-.782.451-2.075.072-3.5-1.038a16.248 16.248 0 0 0 1.757-1.981 16.41 16.41 0 0 0 2.565-.523c.015.108.046.224.058.33.175 1.619-.148 2.789-.88 3.212Zm1.6-4.854A16.563 16.563 0 0 0 17.216 12c.352-.812.638-1.65.856-2.507 1.671.677 2.646 1.607 2.646 2.507 0 .9-.975 1.83-2.646 2.507h-.004Z" />
    <path d="M12.215 13.773a1.792 1.792 0 1 0-1.786-1.8v.006a1.787 1.787 0 0 0 1.786 1.794Z" />
</svg>' %}

{% set icon_reddit = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M12.008 16.521a3.84 3.84 0 0 0 2.47-.77v.04a.281.281 0 0 0 .005-.396.281.281 0 0 0-.395-.005 3.291 3.291 0 0 1-2.09.61 3.266 3.266 0 0 1-2.081-.63.27.27 0 0 0-.38.381 3.84 3.84 0 0 0 2.47.77Z" />
    <path fill="currentColor" fill-rule="evenodd"
        d="M22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Zm-4.845-1.407A1.463 1.463 0 0 1 18.67 12a1.46 1.46 0 0 1-.808 1.33c.01.146.01.293 0 .44 0 2.242-2.61 4.061-5.829 4.061s-5.83-1.821-5.83-4.061a3.25 3.25 0 0 1 0-.44 1.458 1.458 0 0 1-.457-2.327 1.458 1.458 0 0 1 2.063-.064 7.163 7.163 0 0 1 3.9-1.23l.738-3.47v-.006a.31.31 0 0 1 .37-.236l2.452.49a1 1 0 1 1-.132.611l-2.14-.45-.649 3.12a7.11 7.11 0 0 1 3.85 1.23c.259-.246.6-.393.957-.405Z"
        clip-rule="evenodd" />
    <path fill="currentColor" d="M15.305 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-4.625 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" />
</svg>' %}

{% set icon_stackoverflow = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M17 20v-5h2v6.988H3V15h1.98v5H17Z" />
    <path
        d="m6.84 14.522 8.73 1.825.369-1.755-8.73-1.825-.369 1.755Zm1.155-4.323 8.083 3.764.739-1.617-8.083-3.787-.739 1.64Zm3.372-5.481L10.235 6.08l6.859 5.704 1.132-1.362-6.859-5.704ZM15.57 17H6.655v2h8.915v-2ZM12.861 3.111l6.193 6.415 1.414-1.415-6.43-6.177-1.177 1.177Z" />
</svg>' %}

{% set icon_tailwind = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M11.782 5.72a4.773 4.773 0 0 0-4.8 4.173 3.43 3.43 0 0 1 2.741-1.687c1.689 0 2.974 1.972 3.758 2.587a5.733 5.733 0 0 0 5.382.935c2-.638 2.934-2.865 3.137-3.921-.969 1.379-2.44 2.207-4.259 1.231-1.253-.673-2.19-3.438-5.959-3.318ZM6.8 11.979A4.772 4.772 0 0 0 2 16.151a3.431 3.431 0 0 1 2.745-1.687c1.689 0 2.974 1.972 3.758 2.587a5.733 5.733 0 0 0 5.382.935c2-.638 2.933-2.865 3.137-3.921-.97 1.379-2.44 2.208-4.259 1.231-1.253-.673-2.19-3.443-5.963-3.317Z" />
</svg>' %}

{% set icon_twitter = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M22 5.892a8.178 8.178 0 0 1-2.355.635 4.074 4.074 0 0 0 1.8-2.235 8.343 8.343 0 0 1-2.605.981A4.13 4.13 0 0 0 15.85 4a4.068 4.068 0 0 0-4.1 4.038c0 .31.035.618.105.919A11.705 11.705 0 0 1 3.4 4.734a4.006 4.006 0 0 0 1.268 5.392 4.165 4.165 0 0 1-1.859-.5v.05A4.057 4.057 0 0 0 6.1 13.635a4.192 4.192 0 0 1-1.856.07 4.108 4.108 0 0 0 3.831 2.807A8.36 8.36 0 0 1 2 18.184 11.732 11.732 0 0 0 8.291 20 11.502 11.502 0 0 0 19.964 8.5c0-.177 0-.349-.012-.523A8.143 8.143 0 0 0 22 5.892Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_visa = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill="none" d="M17.4 12.6h1l-.3-1.4v-.4l-.2.4-.5 1.4Z" />
    <path fill="currentColor" fill-rule="evenodd"
        d="M2 6.3c0-1.1.9-2 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-12Zm12.5 3.2c.4 0 .8 0 1.1.2l-.1 1h-.1a2 2 0 0 0-1-.3c-.5 0-.7.3-.7.5s.2.3.7.5c.7.4 1 .8 1 1.3 0 1-.8 1.7-2.2 1.7-.6 0-1.1-.2-1.4-.3l.2-1h.1c.4.2.7.3 1.2.3.4 0 .8-.2.8-.5 0-.2-.2-.3-.7-.6-.5-.2-1.1-.6-1.1-1.3 0-.9 1-1.5 2.2-1.5Zm3.5 0h1l1 4.8h-1.2l-.2-.7H17l-.3.7h-1.3l1.9-4.4c.1-.3.3-.3.7-.3Zm-6.2 0h-1.3l-.8 4.8H11l.8-4.8Zm-4.5 3.3-.1-.7-.5-2.2c0-.3-.3-.3-.6-.4h-2v.1l1.2.5.1.2 1.1 4H8l2-4.7H8.7l-1.3 3.2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_vue = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M14.5 3 12 7.156 9.857 3H2l10 18L22 3h-7.5ZM4.486 4.5h2.4L12 13.8l5.107-9.3h2.4L12 18.021 4.486 4.5Z" />
</svg>' %}

{% set icon_whatsapp = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" fill-rule="evenodd"
        d="M12 4a8 8 0 0 0-6.895 12.06l.569.718-.697 2.359 2.32-.648.379.243A8 8 0 1 0 12 4ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10a9.96 9.96 0 0 1-5.016-1.347l-4.948 1.382 1.426-4.829-.006-.007-.033-.055A9.958 9.958 0 0 1 2 12Z"
        clip-rule="evenodd" />
    <path fill="currentColor"
        d="M16.735 13.492c-.038-.018-1.497-.736-1.756-.83a1.008 1.008 0 0 0-.34-.075c-.196 0-.362.098-.49.291-.146.217-.587.732-.723.886-.018.02-.042.045-.057.045-.013 0-.239-.093-.307-.123-1.564-.68-2.751-2.313-2.914-2.589-.023-.04-.024-.057-.024-.057.005-.021.058-.074.085-.101.08-.079.166-.182.249-.283l.117-.14c.121-.14.175-.25.237-.375l.033-.066a.68.68 0 0 0-.02-.64c-.034-.069-.65-1.555-.715-1.711-.158-.377-.366-.552-.655-.552-.027 0 0 0-.112.005-.137.005-.883.104-1.213.311-.35.22-.94.924-.94 2.16 0 1.112.705 2.162 1.008 2.561l.041.06c1.161 1.695 2.608 2.951 4.074 3.537 1.412.564 2.081.63 2.461.63.16 0 .288-.013.4-.024l.072-.007c.488-.043 1.56-.599 1.804-1.276.192-.534.243-1.117.115-1.329-.088-.144-.239-.216-.43-.308Z" />
</svg>' %}

{% set icon_windows = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" fill-rule="evenodd"
        d="M3.005 12 3 6.408l6.8-.923v6.517H3.005ZM11 5.32 19.997 4v8H11V5.32ZM20.067 13l-.069 8-9.065-1.275L11 13h9.067ZM9.8 19.58l-6.795-.931V13H9.8v6.58Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_youtube = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M21.7 8.037a4.26 4.26 0 0 0-.789-1.964 2.84 2.84 0 0 0-1.984-.839c-2.767-.2-6.926-.2-6.926-.2s-4.157 0-6.928.2a2.836 2.836 0 0 0-1.983.839 4.225 4.225 0 0 0-.79 1.965 30.146 30.146 0 0 0-.2 3.206v1.5a30.12 30.12 0 0 0 .2 3.206c.094.712.364 1.39.784 1.972.604.536 1.38.837 2.187.848 1.583.151 6.731.2 6.731.2s4.161 0 6.928-.2a2.844 2.844 0 0 0 1.985-.84 4.27 4.27 0 0 0 .787-1.965 30.12 30.12 0 0 0 .2-3.206v-1.516a30.672 30.672 0 0 0-.202-3.206Zm-11.692 6.554v-5.62l5.4 2.819-5.4 2.801Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_cart_plus_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12.268 6A2 2 0 0 0 14 9h1v1a2 2 0 0 0 3.04 1.708l-.311 1.496a1 1 0 0 1-.979.796H8.605l.208 1H16a3 3 0 1 1-2.83 2h-2.34a3 3 0 1 1-4.009-1.76L4.686 5H4a1 1 0 0 1 0-2h1.5a1 1 0 0 1 .979.796L6.939 6h5.329Z" />
    <path d="M18 4a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0V8h2a1 1 0 1 0 0-2h-2V4Z" />
</svg>' %}

{% set icon_cart_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 3a1 1 0 0 0 0 2h.687L7.82 15.24A3 3 0 1 0 11.83 17h2.34A3 3 0 1 0 17 15H9.813l-.208-1h8.145a1 1 0 0 0 .979-.796l1.25-6A1 1 0 0 0 19 6h-2.268A2 2 0 0 1 15 9a2 2 0 1 1-4 0 2 2 0 0 1-1.732-3h-1.33L7.48 3.796A1 1 0 0 0 6.5 3H5Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd" d="M14 5a1 1 0 1 0-2 0v1h-1a1 1 0 1 0 0 2h1v1a1 1 0 1 0 2 0V8h1a1 1 0 1 0 0-2h-1V5Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_cart = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a1 1 0 0 1 1-1h1.5a1 1 0 0 1 .979.796L7.939 6H19a1 1 0 0 1 .979 1.204l-1.25 6a1 1 0 0 1-.979.796H9.605l.208 1H17a3 3 0 1 1-2.83 2h-2.34a3 3 0 1 1-4.009-1.76L5.686 5H5a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_cash_register = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" d="M4 19v2c0 .5523.44772 1 1 1h14c.5523 0 1-.4477 1-1v-2H4Z" />
    <path fill="currentColor" fill-rule="evenodd"
        d="M9 3c0-.55228.44772-1 1-1h8c.5523 0 1 .44772 1 1v3c0 .55228-.4477 1-1 1h-2v1h2c.5096 0 .9376.38314.9939.88957L19.8951 17H4.10498l.90116-8.11043C5.06241 8.38314 5.49047 8 6.00002 8H12V7h-2c-.55228 0-1-.44772-1-1V3Zm1.01 8H8.00002v2.01H10.01V11Zm.99 0h2.01v2.01H11V11Zm5.01 0H14v2.01h2.01V11Zm-8.00998 3H10.01v2.01H8.00002V14ZM13.01 14H11v2.01h2.01V14Zm.99 0h2.01v2.01H14V14ZM11 4h6v1h-6V4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_cash = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd" d="M7 6a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2h-2v-4a3 3 0 0 0-3-3H7V6Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M2 11a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7Zm7.5 1a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Z"
        clip-rule="evenodd" />
    <path d="M10.5 14.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" />
</svg>' %}

{% set icon_credit_card_plus_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M2 7c0-1.10457.89543-2 2-2h16c1.1046 0 2 .89543 2 2v4c0 .5523-.4477 1-1 1s-1-.4477-1-1v-1H4v7h10c.5523 0 1 .4477 1 1s-.4477 1-1 1H4c-1.10457 0-2-.8954-2-2V7Z" />
    <path fill="currentColor"
        d="M5 14c0-.5523.44772-1 1-1h2c.55228 0 1 .4477 1 1s-.44772 1-1 1H6c-.55228 0-1-.4477-1-1Zm5 0c0-.5523.4477-1 1-1h4c.5523 0 1 .4477 1 1s-.4477 1-1 1h-4c-.5523 0-1-.4477-1-1Zm9-1c.5523 0 1 .4477 1 1v1h1c.5523 0 1 .4477 1 1s-.4477 1-1 1h-1v1c0 .5523-.4477 1-1 1s-1-.4477-1-1v-1h-1c-.5523 0-1-.4477-1-1s.4477-1 1-1h1v-1c0-.5523.4477-1 1-1Z" />
</svg>' %}

{% set icon_credit_card_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11 16.5a5.5 5.5 0 1 1 11 0 5.5 5.5 0 0 1-11 0Zm4.5 2.5v-1.5H14v-2h1.5V14h2v1.5H19v2h-1.5V19h-2Z"
        clip-rule="evenodd" />
    <path d="M3.987 4A2 2 0 0 0 2 6v9a2 2 0 0 0 2 2h5v-2H4v-5h16V6a2 2 0 0 0-2-2H3.987Z" />
    <path fill-rule="evenodd" d="M5 12a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Z" clip-rule="evenodd" />
</svg>' %}

{% set icon_credit_card = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd" d="M4 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4Zm0 6h16v6H4v-6Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M5 14a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm5 0a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_filter_dollar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M3.69869 6.31701C2.56717 5.02384 3.48553 3 5.20384 3H18.7547c1.7316 0 2.6449 2.05088 1.4866 3.33793L17.47 9.34198s-.4632-.20588-.6184-.24042c-.1551-.03453-.488-.10604-.9206-.10604-.9034 0-2.138.66073-2.5716 1.73108-1.3256.8485-1.6921 1.8133-1.7929 2.0078-.1009.1944-.2618.5312-.3399 1.2148-.0781.6836 0 1.6055.5235 2.4688-.0721.0626-.2383.289-.3321.4375-.0937.1484-.5898.875-.3515 2.1445-.1993 0-.6387-.158-.92-.4393l-.70708-.7071c-.28131-.2814-.43934-.6629-.43934-1.0607v-4.4172L3.69869 6.31701Z" />
    <path fill="currentColor" fill-rule="evenodd"
        d="M16.0604 11c.5523 0 1 .4477 1 1v.1013c.6366.1591 1.2184.4937 1.668.9715.3784.4022.3592 1.0351-.0431 1.4135-.4022.3785-1.0351.3592-1.4135-.043-.1902-.2021-.4506-.3504-.7488-.4139-.0363-.0077-.0722-.0174-.1074-.0292-.0543-.018-.1098-.0317-.1658-.041-.0614.0117-.1247.0179-.1894.0179-.063 0-.1245-.0058-.1843-.017-.0784.0136-.1554.0355-.2292.0658-.1976.0812-.3513.2132-.4504.3673.0006.002.0013.0042.002.0064.0138.0431.0516.1195.1396.2154.1806.1971.4983.3934.8907.4835.746.1712 1.4369.5572 1.9192 1.0838.476.5197.8461 1.3054.5891 2.1704-.0136.0459-.0305.0907-.0506.1342-.3123.6768-.8768 1.2008-1.5636 1.483-.0208.0085-.0416.0168-.0625.0248V20c0 .5523-.4477 1-1 1-.5271 0-.9589-.4077-.9973-.9249-.0154-.0046-.0308-.0093-.0462-.0141-.6707-.1541-1.2837-.502-1.7506-1.0062-.3752-.4053-.3509-1.038.0544-1.4132.4052-.3752 1.0379-.3508 1.4131.0544.1903.2055.4527.3566.754.4209.0359.0077.0713.0173.1061.0289.0754.025.1531.0416.2315.0499.0753-.0181.154-.0277.235-.0277.0421 0 .0836.0026.1244.0076.0608-.0134.1204-.032.1781-.0557.1979-.0813.3518-.2135.451-.368l-.001-.0032c-.0136-.0424-.0513-.1189-.1398-.2156-.1817-.1984-.5007-.3955-.8919-.4854-.7448-.171-1.4351-.5549-1.9176-1.0814-.4776-.5211-.8432-1.304-.5924-2.167.0138-.0477.0312-.0943.052-.1394.312-.6773.8766-1.2017 1.5637-1.4839.0573-.0236.1151-.0453.1735-.0653V12c0-.5523.4477-1 1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_receipt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.617 2.076a1 1 0 0 1 1.09.217L8 3.586l1.293-1.293a1 1 0 0 1 1.414 0L12 3.586l1.293-1.293a1 1 0 0 1 1.414 0L16 3.586l1.293-1.293A1 1 0 0 1 19 3v18a1 1 0 0 1-1.707.707L16 20.414l-1.293 1.293a1 1 0 0 1-1.414 0L12 20.414l-1.293 1.293a1 1 0 0 1-1.414 0L8 20.414l-1.293 1.293A1 1 0 0 1 5 21V3a1 1 0 0 1 .617-.924ZM9 7a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2H9Zm0 4a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Zm0 4a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_sale_percent = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M20.29 8.567c.133.323.334.613.59.85v.002a3.536 3.536 0 0 1 0 5.166 2.442 2.442 0 0 0-.776 1.868 3.534 3.534 0 0 1-3.651 3.653 2.483 2.483 0 0 0-1.87.776 3.537 3.537 0 0 1-5.164 0 2.44 2.44 0 0 0-1.87-.776 3.533 3.533 0 0 1-3.653-3.654 2.44 2.44 0 0 0-.775-1.868 3.537 3.537 0 0 1 0-5.166 2.44 2.44 0 0 0 .775-1.87 3.55 3.55 0 0 1 1.033-2.62 3.594 3.594 0 0 1 2.62-1.032 2.401 2.401 0 0 0 1.87-.775 3.535 3.535 0 0 1 5.165 0 2.444 2.444 0 0 0 1.869.775 3.532 3.532 0 0 1 3.652 3.652c-.012.35.051.697.184 1.02ZM9.927 7.371a1 1 0 1 0 0 2h.01a1 1 0 0 0 0-2h-.01Zm5.889 2.226a1 1 0 0 0-1.414-1.415L8.184 14.4a1 1 0 0 0 1.414 1.414l6.218-6.217Zm-2.79 5.028a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_scale_balanced = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 4a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm-2.952.462c-.483.19-.868.432-1.19.71-.363.315-.638.677-.831.93l-.106.14c-.21.268-.36.418-.574.527C6.125 6.883 5.74 7 5 7a1 1 0 0 0 0 2c.364 0 .696-.022 1-.067v.41l-1.864 4.2a1.774 1.774 0 0 0 .821 2.255c.255.133.538.202.825.202h2.436a1.786 1.786 0 0 0 1.768-1.558 1.774 1.774 0 0 0-.122-.899L8 9.343V8.028c.2-.188.36-.38.495-.553.062-.079.118-.15.168-.217.185-.24.311-.406.503-.571a1.89 1.89 0 0 1 .24-.177A3.01 3.01 0 0 0 11 7.829V20H5.5a1 1 0 1 0 0 2h13a1 1 0 1 0 0-2H13V7.83a3.01 3.01 0 0 0 1.63-1.387c.206.091.373.19.514.29.31.219.532.465.811.78l.025.027.02.023v1.78l-1.864 4.2a1.774 1.774 0 0 0 .821 2.255c.255.133.538.202.825.202h2.436a1.785 1.785 0 0 0 1.768-1.558 1.773 1.773 0 0 0-.122-.899L18 9.343v-.452c.302.072.633.109 1 .109a1 1 0 1 0 0-2c-.48 0-.731-.098-.899-.2-.2-.12-.363-.293-.651-.617l-.024-.026c-.267-.3-.622-.7-1.127-1.057a5.152 5.152 0 0 0-1.355-.678 3.001 3.001 0 0 0-5.896.04Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_shopping_bag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M14 7h-4v3a1 1 0 0 1-2 0V7H6a1 1 0 0 0-.997.923l-.917 11.924A2 2 0 0 0 6.08 22h11.84a2 2 0 0 0 1.994-2.153l-.917-11.924A1 1 0 0 0 18 7h-2v3a1 1 0 1 1-2 0V7Zm-2-3a2 2 0 0 0-2 2v1H8V6a4 4 0 0 1 8 0v1h-2V6a2 2 0 0 0-2-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_store = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.535 7.677c.313-.98.687-2.023.926-2.677H17.46c.253.63.646 1.64.977 2.61.166.487.312.953.416 1.347.11.42.148.675.148.779 0 .18-.032.355-.09.515-.06.161-.144.3-.243.412-.1.111-.21.192-.324.245a.809.809 0 0 1-.686 0 1.004 1.004 0 0 1-.324-.245c-.1-.112-.183-.25-.242-.412a1.473 1.473 0 0 1-.091-.515 1 1 0 1 0-2 0 1.4 1.4 0 0 1-.333.927.896.896 0 0 1-.667.323.896.896 0 0 1-.667-.323A1.401 1.401 0 0 1 13 9.736a1 1 0 1 0-2 0 1.4 1.4 0 0 1-.333.927.896.896 0 0 1-.667.323.896.896 0 0 1-.667-.323A1.4 1.4 0 0 1 9 9.74v-.008a1 1 0 0 0-2 .003v.008a1.504 1.504 0 0 1-.18.712 1.22 1.22 0 0 1-.146.209l-.007.007a1.01 1.01 0 0 1-.325.248.82.82 0 0 1-.316.08.973.973 0 0 1-.563-.256 1.224 1.224 0 0 1-.102-.103A1.518 1.518 0 0 1 5 9.724v-.006a2.543 2.543 0 0 1 .029-.207c.024-.132.06-.296.11-.49.098-.385.237-.85.395-1.344ZM4 12.112a3.521 3.521 0 0 1-1-2.376c0-.349.098-.8.202-1.208.112-.441.264-.95.428-1.46.327-1.024.715-2.104.958-2.767A1.985 1.985 0 0 1 6.456 3h11.01c.803 0 1.539.481 1.844 1.243.258.641.67 1.697 1.019 2.72a22.3 22.3 0 0 1 .457 1.487c.114.433.214.903.214 1.286 0 .412-.072.821-.214 1.207A3.288 3.288 0 0 1 20 12.16V19a2 2 0 0 1-2 2h-6a1 1 0 0 1-1-1v-4H8v4a1 1 0 0 1-1 1H6a2 2 0 0 1-2-2v-6.888ZM13 15a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_tag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M18.045 3.007 12.31 3a1.965 1.965 0 0 0-1.4.585l-7.33 7.394a2 2 0 0 0 0 2.805l6.573 6.631a1.957 1.957 0 0 0 1.4.585 1.965 1.965 0 0 0 1.4-.585l7.409-7.477A2 2 0 0 0 21 11.479v-5.5a2.972 2.972 0 0 0-2.955-2.972Zm-2.452 6.438a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z" />
</svg>' %}

{% set icon_user_headset = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 2a7 7 0 0 0-7 7 3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1a1 1 0 0 0 1-1V9a5 5 0 1 1 10 0v7.083A2.919 2.919 0 0 1 14.083 19H14a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h1a2 2 0 0 0 1.732-1h.351a4.917 4.917 0 0 0 4.83-4H19a3 3 0 0 0 3-3v-2a3 3 0 0 0-3-3 7 7 0 0 0-7-7Zm1.45 3.275a4 4 0 0 0-4.352.976 1 1 0 0 0 1.452 1.376 2.001 2.001 0 0 1 2.836-.067 1 1 0 1 0 1.386-1.442 4 4 0 0 0-1.321-.843Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_wallet = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 14a3 3 0 0 1 3-3h4a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-4a3 3 0 0 1-3-3Zm3-1a1 1 0 1 0 0 2h4v-2h-4Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M12.293 3.293a1 1 0 0 1 1.414 0L16.414 6h-2.828l-1.293-1.293a1 1 0 0 1 0-1.414ZM12.414 6 9.707 3.293a1 1 0 0 0-1.414 0L5.586 6h6.828ZM4.586 7l-.056.055A2 2 0 0 0 3 9v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2h-4a5 5 0 0 1 0-10h4a2 2 0 0 0-1.53-1.945L17.414 7H4.586Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_book_open_reader = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M9 6c0-1.65685 1.3431-3 3-3s3 1.34315 3 3-1.3431 3-3 3-3-1.34315-3-3Zm2 3.62992c-.1263-.04413-.25-.08799-.3721-.13131-1.33928-.47482-2.49256-.88372-4.77995-.8482C4.84875 8.66593 4 9.46413 4 10.5v7.2884c0 1.0878.91948 1.8747 1.92888 1.8616 1.283-.0168 2.04625.1322 2.79671.3587.29285.0883.57733.1863.90372.2987l.00249.0008c.11983.0413.24534.0845.379.1299.2989.1015.6242.2088.9892.3185V9.62992Zm2-.00374V20.7551c.5531-.1678 1.0379-.3374 1.4545-.4832.2956-.1034.5575-.1951.7846-.2653.7257-.2245 1.4655-.3734 2.7479-.3566.5019.0065.9806-.1791 1.3407-.4788.3618-.3011.6723-.781.6723-1.3828V10.5c0-.58114-.2923-1.05022-.6377-1.3503-.3441-.29904-.8047-.49168-1.2944-.49929-2.2667-.0352-3.386.36906-4.6847.83812-.1256.04539-.253.09138-.3832.13765Z" />
</svg>' %}

{% set icon_chalkboard_user = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M6 2c-1.10457 0-2 .89543-2 2v4c0 .55228.44772 1 1 1s1-.44772 1-1V4h12v7h-2c-.5523 0-1 .4477-1 1v2h-1c-.5523 0-1 .4477-1 1s.4477 1 1 1h5c.5523 0 1-.4477 1-1V3.85714C20 2.98529 19.3667 2 18.268 2H6Z" />
    <path
        d="M6 11.5C6 9.567 7.567 8 9.5 8S13 9.567 13 11.5 11.433 15 9.5 15 6 13.433 6 11.5ZM4 20c0-2.2091 1.79086-4 4-4h3c2.2091 0 4 1.7909 4 4 0 1.1046-.8954 2-2 2H6c-1.10457 0-2-.8954-2-2Z" />
</svg>' %}

{% set icon_chalkboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M3 4.92857C3 3.90506 3.80497 3 4.88889 3H19.1111C20.195 3 21 3.90506 21 4.92857V13h-3v-2c0-.5523-.4477-1-1-1h-4c-.5523 0-1 .4477-1 1v2H3V4.92857ZM3 15v1.0714C3 17.0949 3.80497 18 4.88889 18h3.47608L7.2318 19.3598c-.35356.4243-.29624 1.0548.12804 1.4084.42428.3536 1.05484.2962 1.40841-.128L10.9684 18h2.0632l2.2002 2.6402c.3535.4242.9841.4816 1.4084.128.4242-.3536.4816-.9841.128-1.4084L15.635 18h3.4761C20.195 18 21 17.0949 21 16.0714V15H3Z" />
    <path d="M16 12v1h-2v-1h2Z" />
</svg>' %}

{% set icon_graduation_cap = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12.4472 4.10557c-.2815-.14076-.6129-.14076-.8944 0L2.76981 8.49706l9.21949 4.39024L21 8.38195l-8.5528-4.27638Z" />
    <path
        d="M5 17.2222v-5.448l6.5701 3.1286c.278.1325.6016.1293.8771-.0084L19 11.618v5.6042c0 .2857-.1229.5583-.3364.7481l-.0025.0022-.0041.0036-.0103.009-.0119.0101-.0181.0152c-.024.02-.0562.0462-.0965.0776-.0807.0627-.1942.1465-.3405.2441-.2926.195-.7171.4455-1.2736.6928C15.7905 19.5208 14.1527 20 12 20c-2.15265 0-3.79045-.4792-4.90614-.9751-.5565-.2473-.98098-.4978-1.27356-.6928-.14631-.0976-.2598-.1814-.34049-.2441-.04036-.0314-.07254-.0576-.09656-.0776-.01201-.01-.02198-.0185-.02991-.0253l-.01038-.009-.00404-.0036-.00174-.0015-.0008-.0007s-.00004 0 .00978-.0112l-.00009-.0012-.01043.0117C5.12215 17.7799 5 17.5079 5 17.2222Zm-3-6.8765 2 .9523V17c0 .5523-.44772 1-1 1s-1-.4477-1-1v-6.6543Z" />
</svg>' %}

{% set icon_laptop_code = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 5.78571C4 4.80909 4.78639 4 5.77778 4H18.2222C19.2136 4 20 4.80909 20 5.78571V15H4V5.78571ZM12 12c0-.5523.4477-1 1-1h2c.5523 0 1 .4477 1 1s-.4477 1-1 1h-2c-.5523 0-1-.4477-1-1ZM8.27586 6.31035c.38089-.39993 1.01387-.41537 1.4138-.03449l2.62504 2.5c.1981.18875.3103.45047.3103.72414 0 .27368-.1122.5354-.3103.7241l-2.62504 2.5c-.39993.3809-1.03291.3655-1.4138-.0344-.38088-.4-.36544-1.033.03449-1.4138L10.175 9.5 8.31035 7.72414c-.39993-.38089-.41537-1.01386-.03449-1.41379Z"
        clip-rule="evenodd" />
    <path d="M2 17v1c0 1.1046.89543 2 2 2h16c1.1046 0 2-.8954 2-2v-1H2Z" />
</svg>' %}

{% set icon_laptop_file = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M4 5.78571C4 4.80909 4.78639 4 5.77778 4H18.2222C19.2136 4 20 4.80909 20 5.78571v1.34031C19.6804 7.04375 19.3453 7 19 7h-3.566c-1.1074 0-2.1653.45912-2.9217 1.26802l-2.434 2.60308C9.38544 11.612 9 12.5886 9 13.603V19c0 .3453.04375.6804.12602 1H4c-1.10457 0-2-.8954-2-2v-1c0-1.1046.89543-2 2-2V5.78571Z" />
    <path
        d="M15 9.04765V13h-3.9069c.0892-.282.2406-.5432.4461-.763l2.434-2.60299c.2776-.29692.6365-.49959 1.0268-.58636Z" />
    <path
        d="M17 9v4c0 1.1046-.8954 2-2 2h-4v4c0 1.1046.8954 2 2 2h6c1.1046 0 2-.8954 2-2v-8c0-1.10457-.8954-2-2-2h-2Z" />
</svg>' %}

{% set icon_microscope = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m17.9646 5.49185.3705.37054c.3906.39052 1.0237.39052 1.4142 0 .3906-.39053.3906-1.02369 0-1.41422L17.594 2.29283c-.3905-.39052-1.0237-.39052-1.4142 0-.3905.39053-.3905 1.02369 0 1.41422l.3706.37059-.7412.74118-.3706-.37059c-.3905-.39053-1.0237-.39053-1.4142 0L9.71372 8.75891c-.39053.39053-.39053 1.02369 0 1.41419l.34948.3495-.77031.7703c-.39053.3905-.39053 1.0237 0 1.4142.39052.3905 1.02371.3905 1.41421 0l.7703-.7703.3917.3917c.3905.3905 1.0236.3905 1.4142 0l2.0628-2.0629c.4145.6745.6539 1.4706.6539 2.3256 0 2.4448-1.9584 4.4087-4.3521 4.4087-1.0458 0-2.00787-.3737-2.76051-.9999H11c.5523 0 1-.4477 1-1s-.4477-1-1-1H5c-.55228 0-1 .4477-1 1s.44772 1 1 1h1.26803C6.92225 17.0489 7.8715 17.8952 9 18.4182V20H5c-.55228 0-1 .4477-1 1s.44772 1 1 1h14c.5523 0 1-.4477 1-1s-.4477-1-1-1h-4v-1.9637c1.8034-1.1328 3-3.1517 3-5.4451 0-1.4061-.4498-2.70897-1.2126-3.76687l.8066-.80655c.3905-.39052.3905-1.02369 0-1.41421l-.3706-.37054.7412-.74118Z" />
</svg>' %}

{% set icon_person_chalkboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M16 10c0-.55228-.4477-1-1-1h-3v2h3c.5523 0 1-.4477 1-1Z" />
    <path
        d="M13 15v-2h2c1.6569 0 3-1.3431 3-3 0-1.65685-1.3431-3-3-3h-2.256c.1658-.46917.256-.97405.256-1.5 0-.51464-.0864-1.0091-.2454-1.46967C12.8331 4.01052 12.9153 4 13 4h7c.5523 0 1 .44772 1 1v9c0 .5523-.4477 1-1 1h-2.5l1.9231 4.6154c.2124.5098-.0287 1.0953-.5385 1.3077-.5098.2124-1.0953-.0287-1.3077-.5385L15.75 16l-1.827 4.3846c-.1825.438-.6403.6776-1.0889.6018.1075-.3089.1659-.6408.1659-.9864v-2.6002L14 15h-1ZM6 5.5C6 4.11929 7.11929 3 8.5 3S11 4.11929 11 5.5 9.88071 8 8.5 8 6 6.88071 6 5.5Z" />
    <path
        d="M15 11h-4v9c0 .5523-.4477 1-1 1-.55228 0-1-.4477-1-1v-4H8v4c0 .5523-.44772 1-1 1s-1-.4477-1-1v-6.6973l-1.16797 1.752c-.30635.4595-.92722.5837-1.38675.2773-.45952-.3063-.5837-.9272-.27735-1.3867l2.99228-4.48843c.09402-.14507.2246-.26423.37869-.34445.11427-.05949.24148-.09755.3763-.10887.03364-.00289.06747-.00408.10134-.00355H15c.5523 0 1 .44772 1 1 0 .5523-.4477 1-1 1Z" />
</svg>' %}

{% set icon_school_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M12 12c-.5523 0-1 .4477-1 1s.4477 1 1 1 1-.4477 1-1-.4477-1-1-1Z" />
    <path fill-rule="evenodd"
        d="M6.65111 11.6306 12 5.04736l5.3489 6.58324c.1899.2337.475.3694.7761.3694H21v7c0 .5523-.4477 1-1 1H4c-.55228 0-1-.4477-1-1v-7h2.87499c.30113 0 .58623-.1357.77612-.3694ZM8.99999 13c0-1.6568 1.34311-3 3.00001-3 1.6568 0 3 1.3432 3 3 0 1.6569-1.3432 3-3 3-1.6569 0-3.00001-1.3431-3.00001-3Z"
        clip-rule="evenodd" />
    <path
        d="m2.5 10 2.7-3.59999c.18885-.2518.48524-.4.8-.4h2.64902L5.39902 10H2.5Zm12.851-3.99999L18.601 10H21.5l-2.7-3.59999c-.1888-.2518-.4852-.4-.8-.4h-2.649Z" />
</svg>' %}

{% set icon_school_check_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M21.7071 14.2929c.3905.3905.3905 1.0237 0 1.4142l-4 4c-.3905.3905-1.0237.3905-1.4142 0l-2-2c-.3905-.3905-.3905-1.0237 0-1.4142.3905-.3905 1.0237-.3905 1.4142 0L17 17.5858l3.2929-3.2929c.3905-.3905 1.0237-.3905 1.4142 0Z"
        clip-rule="evenodd" />
    <path
        d="M6.65111 11.6306 12 5.04736l5.3489 6.58324c.1899.2337.475.3694.7761.3694h2.8655c-.7646.0024-1.5284.2953-2.1118.8787l-1.8821 1.8821c-.6135-.548-1.3982-.8-2.1691-.7559C14.9392 13.6908 15 13.3525 15 13c0-1.6568-1.3432-3-3-3-1.6569 0-3.00001 1.3432-3.00001 3 0 1.6569 1.34311 3 3.00001 3 .0579 0 .1154-.0016.1726-.0049-.3747 1.0565-.1393 2.2808.7061 3.1262l.8787.8787H4c-.55228 0-1-.4477-1-1v-7h2.87499c.30113 0 .58623-.1357.77612-.3694Z" />
    <path
        d="M12 12c-.5523 0-1 .4477-1 1s.4477 1 1 1 1-.4477 1-1-.4477-1-1-1Zm-9.5-2 2.7-3.59999c.18885-.2518.48524-.4.8-.4h2.64902L5.39902 10H2.5Zm12.851-3.99999L18.601 10H21.5l-2.7-3.59999c-.1888-.2518-.4852-.4-.8-.4h-2.649Z" />
</svg>' %}

{% set icon_school_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.4453 3.16795c.3359-.22393.7735-.22393 1.1094 0l6 4c.4595.30635.5837.92722.2773 1.38675-.1925.28877-.5092.44511-.832.44541-.1748.00016-.3515-.04546-.5112-.1406-.0146-.00873-.0292-.01789-.0435-.02746L16 7.86853v8.59597l-.2322-.2323c-.9763-.9763-2.5593-.9763-3.5356 0-.9763.9763-.9763 2.5593 0 3.5356L13.4645 21H8V7.86853l-1.44532.96352c-.45952.30635-1.08039.18218-1.38675-.27735-.30635-.45953-.18217-1.0804.27735-1.38675l6.00002-4ZM11 11c-.5523 0-1 .4477-1 1s.4477 1 1 1h2c.5523 0 1-.4477 1-1s-.4477-1-1-1h-2Zm-1-2c0-.55228.4477-1 1-1h2c.5523 0 1 .44772 1 1s-.4477 1-1 1h-2c-.5523 0-1-.44772-1-1Z"
        clip-rule="evenodd" />
    <path
        d="M21 13.708v-1.583c0-.448-.298-.8414-.7293-.9627L18 10.5237v3.9408l.2322-.2323c.7484-.7483 1.853-.923 2.7678-.5242ZM6 10.5237l-2.27075.6386C3.29797 11.2836 3 11.677 3 12.125V20c0 .5523.44772 1 1 1h2V10.5237Z" />
    <path fill-rule="evenodd"
        d="M20.7071 15.2929c.3905.3905.3905 1.0237 0 1.4142l-4 4c-.3905.3905-1.0237.3905-1.4142 0l-2-2c-.3905-.3905-.3905-1.0237 0-1.4142.3905-.3905 1.0237-.3905 1.4142 0L16 18.5858l3.2929-3.2929c.3905-.3905 1.0237-.3905 1.4142 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_school_exclamation_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M19 19c0-.5523.4477-1 1-1h.01c.5523 0 1 .4477 1 1s-.4477 1-1 1H20c-.5523 0-1-.4477-1-1Zm1-7c.5523 0 1 .4477 1 1v3c0 .5523-.4477 1-1 1s-1-.4477-1-1v-3c0-.5523.4477-1 1-1Z"
        clip-rule="evenodd" />
    <path d="M11 13c0-.5523.4477-1 1-1s1 .4477 1 1-.4477 1-1 1-1-.4477-1-1Z" />
    <path fill-rule="evenodd"
        d="M12 5.04736 6.65111 11.6306c-.18989.2337-.47499.3694-.77612.3694H3v7c0 .5523.44772 1 1 1h13.1707c-.1105-.3128-.1707-.6494-.1707-1 0-.5464.1461-1.0587.4013-1.5C17.1461 17.0587 17 16.5464 17 16v-3c0-.499.1218-.9696.3374-1.3835L12 5.04736ZM12 10c-1.6569 0-3.00001 1.3432-3.00001 3 0 1.6569 1.34311 3 3.00001 3 1.6568 0 3-1.3431 3-3 0-1.6568-1.3432-3-3-3Z"
        clip-rule="evenodd" />
    <path
        d="M20.0095 10H18.601l-3.25-3.99999H18c.3148 0 .6112.1482.8.4L21.5 10h-1.4905Zm-.015 2c-.5498.003-.9945.4495-.9945 1v3c0 .0565.0047.1119.0137.1659.079.4733.4905.8341.9863.8341h.01c.4924-.0049.8997-.3656.9768-.8374.0087-.0529.0132-.1072.0132-.1626v-3c0-.5505-.4447-.997-.9945-1h-.011ZM21 18.8581c-.0013-.0092-.0027-.0183-.0043-.0273-.0803-.4717-.4911-.8308-.9857-.8308H20c-.4958 0-.9073.3608-.9863.8341-.009.054-.0137.1094-.0137.1659 0 .5523.4477 1 1 1h.0056c.5497-.003.9944-.4496.9944-1v-.1419ZM2.5 10l2.7-3.59999c.18885-.2518.48524-.4.8-.4h2.64902L5.39902 10H2.5Z" />
</svg>' %}

{% set icon_school_exclamation = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="m6 10.5237-2.27075.6386C3.29797 11.2836 3 11.677 3 12.125V20c0 .5523.44772 1 1 1h2V10.5237Z" />
    <path fill-rule="evenodd"
        d="M12.5547 3.16795c-.3359-.22393-.7735-.22393-1.1094 0l-6.00002 4c-.45952.30635-.5837.92722-.27735 1.38675.30636.45953.92723.5837 1.38675.27735L8 7.86853V21h8V7.86853l1.4453.96352c.0143.00957.0289.01873.0435.02746.1597.09514.3364.14076.5112.1406.3228-.0003.6395-.15664.832-.44541.3064-.45953.1822-1.0804-.2773-1.38675l-6-4ZM10 12c0-.5523.4477-1 1-1h2c.5523 0 1 .4477 1 1s-.4477 1-1 1h-2c-.5523 0-1-.4477-1-1Zm1-4c-.5523 0-1 .44772-1 1s.4477 1 1 1h2c.5523 0 1-.44772 1-1s-.4477-1-1-1h-2Zm8 12c0-.5523.4477-1 1-1h.01c.5523 0 1 .4477 1 1s-.4477 1-1 1H20c-.5523 0-1-.4477-1-1Zm1-8c.5523 0 1 .4477 1 1v4c0 .5523-.4477 1-1 1s-1-.4477-1-1v-4c0-.5523.4477-1 1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_school_flag_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M12 12c-.5523 0-1 .4477-1 1s.4477 1 1 1 1-.4477 1-1-.4477-1-1-1Z" />
    <path fill-rule="evenodd"
        d="M17 4c-.5523 0-1 .44772-1 1v4.97045l-4-4.92309-5.34889 6.58324c-.18989.2337-.47499.3694-.77612.3694H3v7c0 .5523.44772 1 1 1h16c.5523 0 1-.4477 1-1v-7h-2.875c-.0421 0-.0838-.0026-.125-.0078V9h3c.5523 0 1-.44772 1-1V5c0-.55228-.4477-1-1-1h-4Zm-8.00001 9c0-1.6568 1.34311-3 3.00001-3 1.6568 0 3 1.3432 3 3 0 1.6569-1.3432 3-3 3-1.6569 0-3.00001-1.3431-3.00001-3Z"
        clip-rule="evenodd" />
    <path d="M5.2 6.40001 2.5 10h2.89902l3.25-3.99999H6c-.31476 0-.61115.1482-.8.4Z" />
</svg>' %}

{% set icon_school_flag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M15 4c0-.55228.4477-1 1-1h4c.5523 0 1 .44772 1 1v3c0 .55228-.4477 1-1 1h-4v13H8V7.86853l-1.44532.96352c-.45952.30635-1.08039.18218-1.38675-.27735-.30635-.45953-.18217-1.0804.27735-1.38675l6.00002-4c.3359-.22393.7735-.22393 1.1094 0L15 4.79816V4Zm-5 8c0-.5523.4477-1 1-1h2c.5523 0 1 .4477 1 1s-.4477 1-1 1h-2c-.5523 0-1-.4477-1-1Zm1-4c-.5523 0-1 .44772-1 1s.4477 1 1 1h2c.5523 0 1-.44772 1-1s-.4477-1-1-1h-2Z"
        clip-rule="evenodd" />
    <path
        d="M18 9.00011 17.9843 9h.0296L18 9.00011ZM6 10.5237l-2.27075.6386C3.29797 11.2836 3 11.677 3 12.125V20c0 .5523.44772 1 1 1h2V10.5237Zm14.2707.6386L18 10.5237V21h2c.5523 0 1-.4477 1-1v-7.875c0-.448-.298-.8414-.7293-.9627Z" />
</svg>' %}

{% set icon_school_lock_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M6.65111 11.6306 12 5.04736l3.0095 3.70405c-.627.41739-1.1433.9879-1.4955 1.65809C13.0696 10.1492 12.5522 10 12 10c-1.6569 0-3.00001 1.3432-3.00001 3 0 1.3076.8365 2.4197 2.00351 2.8306-.0023.0561-.0035.1126-.0035.1694v2c0 .7286.1948 1.4117.5351 2H4c-.55228 0-1-.4477-1-1v-7h2.87499c.30113 0 .58623-.1357.77612-.3694Z" />
    <path fill-rule="evenodd"
        d="M16.1022 10.427C15.4372 10.8762 15 11.6371 15 12.5V14c-.0584 0-.1162.0025-.1733.0074-.9663.083-1.7363.853-1.8193 1.8193l-.0006.0067c-.0045.055-.0068.1105-.0068.1666v2c0 1.1046.8954 2 2 2h5.0079C21.1088 19.9957 22 19.1019 22 18v-2c0-.7403-.4022-1.3866-1-1.7324-.0154-.009-.031-.0177-.0467-.0262C20.6699 14.0874 20.3452 14 20 14v-1.5c0-.1712-.0172-.3384-.05-.5-.2316-1.1411-1.2405-2-2.45-2-.4425 0-.8581.115-1.2187.3167-.0613.0343-.1211.0711-.1791.1103ZM17.5 12c-.2761 0-.5.2239-.5.5V14h1v-1.5c0-.2761-.2239-.5-.5-.5Z"
        clip-rule="evenodd" />
    <path
        d="M21.2422 10c-.8072-1.20598-2.182-2-3.7422-2-.1695 0-.3369.00938-.5016.02764L15.351 6.00001H18c.3148 0 .6112.1482.8.4L21.5 10h-.2578Zm-8.3308 2.5879C12.7544 12.2412 12.4054 12 12 12c-.5523 0-1 .4477-1 1 0 .4054.2412.7544.5879.9114.3304-.5386.7848-.9931 1.3235-1.3235ZM5.2 6.40001 2.5 10h2.89902l3.25-3.99999H6c-.31476 0-.61115.1482-.8.4Z" />
</svg>' %}

{% set icon_school_lock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.4453 3.16795c.3359-.22393.7735-.22393 1.1094 0l6 4c.4595.30635.5837.92722.2773 1.38675-.1925.28877-.5092.44511-.832.44541-.1748.00016-.3515-.04546-.5112-.1406-.0146-.00873-.0292-.01789-.0435-.02746L16 7.86853v1.66242c-1.0832.13507-2.0319.70325-2.6673 1.52575C13.2286 11.02 13.1166 11 13 11h-2c-.5523 0-1 .4477-1 1s.4477 1 1 1h1.5309c-.0204.1638-.0309.3307-.0309.5v.3368c-1.1825.5617-2 1.767-2 3.1632v2c0 .7436.2319 1.4331.6273 2H8V7.86853l-1.44532.96352c-.45952.30635-1.08039.18218-1.38675-.27735-.30635-.45953-.18217-1.0804.27735-1.38675l6.00002-4ZM10 9c0-.55228.4477-1 1-1h2c.5523 0 1 .44772 1 1s-.4477 1-1 1h-2c-.5523 0-1-.44772-1-1Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M16.5 11c.5628 0 1.0822.186 1.5.4998.0306.023.0607.0467.0902.0711.5557.4585.9098 1.1524.9098 1.9291V15c1.1046 0 2 .8954 2 2v2c0 1.1016-.8907 1.9952-1.9912 2H14c-1.1046 0-2-.8954-2-2v-2c0-1.1046.8954-2 2-2v-1.5c0-1.2081.857-2.2161 1.9962-2.4492L16 11.05c.1616-.0328.3288-.05.5-.05Zm0 2c-.2761 0-.5.2239-.5.5V15h1v-1.5c0-.2761-.2239-.5-.5-.5Z"
        clip-rule="evenodd" />
    <path d="M3.72925 11.1623 6 10.5237V21H4c-.55228 0-1-.4477-1-1v-7.875c0-.448.29797-.8414.72925-.9627Z" />
</svg>' %}

{% set icon_school_xmark_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M6.65111 11.6306 12 5.04736l5.3489 6.58324c.1899.2337.475.3694.7761.3694H21v1.0646c-.8482-.2477-1.8019-.0371-2.4708.6319-.9763-.9764-2.5592-.9763-3.5355 0-.0357.0356-.0701.0721-.1032.1094.0714-.2564.1095-.5267.1095-.8059 0-1.6568-1.3432-3-3-3-1.6569 0-3.00001 1.3432-3.00001 3 0 1.6569 1.34311 3 3.00001 3 .9389 0 1.777-.4313 2.3271-1.1066-.19.8138.0322 1.7042.6666 2.3386-.7484.7484-.9231 1.8532-.5242 2.768H4c-.55228 0-1-.4477-1-1v-7h2.87499c.30113 0 .58623-.1357.77612-.3694Z" />
    <path
        d="M17.4685 14.7571c-.3905-.3905-1.0237-.3905-1.4142 0-.3905.3905-.3905 1.0237 0 1.4142l1.0607 1.0607-1.0607 1.0607c-.3905.3905-.3905 1.0236 0 1.4142.3905.3905 1.0237.3905 1.4142 0l1.0607-1.0607 1.0606 1.0607c.1465.1464.327.2379.5161.2746.0145.0028.0291.0052.0437.0074.3025.0448.6216-.0492.8544-.282.3906-.3906.3906-1.0237 0-1.4142l-1.0606-1.0607L21 16.1754l.004-.0041c.3906-.3905.3906-1.0237 0-1.4142l-.004-.004c-.0403-.0398-.0831-.0756-.128-.1072-.3902-.2749-.9331-.2378-1.2822.1112l-1.0606 1.0607-1.0607-1.0607ZM12 12c-.5523 0-1 .4477-1 1s.4477 1 1 1 1-.4477 1-1-.4477-1-1-1Zm-9.5-2 2.7-3.59999c.18885-.2518.48524-.4.8-.4h2.64902L5.39902 10H2.5Zm12.851-3.99999L18.601 10H21.5l-2.7-3.59999c-.1888-.2518-.4852-.4-.8-.4h-2.649Z" />
</svg>' %}

{% set icon_school_xmark = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M15.3077 15.7016c.3906-.3905 1.0237-.3905 1.4142 0l1.0607 1.0607 1.0607-1.0607c.3905-.3905 1.0237-.3905 1.4142 0 .3905.3905.3905 1.0237 0 1.4142l-1.0607 1.0607 1.0607 1.0606c.3905.3906.3905 1.0237 0 1.4143-.3905.3905-1.0237.3905-1.4142 0l-1.0607-1.0607-1.0607 1.0607c-.3905.3905-1.0236.3905-1.4142 0-.3905-.3906-.3905-1.0237 0-1.4143l1.0607-1.0606-1.0607-1.0607c-.3905-.3905-.3905-1.0237 0-1.4142Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M11.4453 3.16795c.3359-.22393.7735-.22393 1.1094 0l6 4c.4595.30635.5837.92722.2773 1.38675-.1925.28877-.5092.44511-.832.44541-.1748.00016-.3515-.04546-.5112-.1406-.0146-.00873-.0292-.01789-.0435-.02746L16 7.86853v6.04017c-.6348.0038-1.2685.2478-1.7529.7322-.9763.9763-.9763 2.5592 0 3.5356-.7636.7635-.93 1.8982-.4991 2.8235H8V7.86853l-1.44532.96352c-.45952.30635-1.08039.18218-1.38675-.27735-.30635-.45953-.18217-1.0804.27735-1.38675l6.00002-4ZM11 11c-.5523 0-1 .4477-1 1s.4477 1 1 1h2c.5523 0 1-.4477 1-1s-.4477-1-1-1h-2Zm-1-2c0-.55228.4477-1 1-1h2c.5523 0 1 .44772 1 1s-.4477 1-1 1h-2c-.5523 0-1-.44772-1-1Z"
        clip-rule="evenodd" />
    <path
        d="M21 14.3714V12.125c0-.448-.298-.8414-.7293-.9627L18 10.5237v3.9235c.873-.6918 2.1011-.7171 3-.0758Zm-3 2.1735.8433-.8433c.3905-.3905 1.0237-.3905 1.4142 0 .3905.3905.3905 1.0237 0 1.4142l-1.0607 1.0607 1.0607 1.0606c.3905.3906.3905 1.0237 0 1.4143-.3905.3905-1.0237.3905-1.4142 0L18 19.8081v-3.2632Zm-2-1.1361c-.251.0037-.5008.1013-.6923.2928-.3905.3905-.3905 1.0237 0 1.4142l.6923.6923v-2.3993Zm0 3.1361v2.3992c-.251-.0037-.5008-.1013-.6923-.2927-.3905-.3906-.3905-1.0237 0-1.4143L16 18.5449ZM6 10.5237l-2.27075.6386C3.29797 11.2836 3 11.677 3 12.125V20c0 .5523.44772 1 1 1h2V10.5237Z" />
</svg>' %}

{% set icon_school = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m6 10.5237-2.27075.6386C3.29797 11.2836 3 11.677 3 12.125V20c0 .5523.44772 1 1 1h2V10.5237Zm12 0 2.2707.6386c.4313.1213.7293.5147.7293.9627V20c0 .5523-.4477 1-1 1h-2V10.5237Z" />
    <path fill-rule="evenodd"
        d="M12.5547 3.16795c-.3359-.22393-.7735-.22393-1.1094 0l-6.00002 4c-.45952.30635-.5837.92722-.27735 1.38675.30636.45953.92723.5837 1.38675.27735L8 7.86853V21h8V7.86853l1.4453.96352c.0143.00957.0289.01873.0435.02746.1597.09514.3364.14076.5112.1406.3228-.0003.6395-.15664.832-.44541.3064-.45953.1822-1.0804-.2773-1.38675l-6-4ZM10 12c0-.5523.4477-1 1-1h2c.5523 0 1 .4477 1 1s-.4477 1-1 1h-2c-.5523 0-1-.4477-1-1Zm1-4c-.5523 0-1 .44772-1 1s.4477 1 1 1h2c.5523 0 1-.44772 1-1s-.4477-1-1-1h-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_shapes = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12.8638 3.49613C12.6846 3.18891 12.3557 3 12 3s-.6846.18891-.8638.49613l-3.49998 6c-.18042.30929-.1817.69147-.00336 1.00197S8.14193 11 8.5 11h7c.3581 0 .6888-.1914.8671-.5019.1784-.3105.1771-.69268-.0033-1.00197l-3.5-6ZM4 13c-.55228 0-1 .4477-1 1v6c0 .5523.44772 1 1 1h6c.5523 0 1-.4477 1-1v-6c0-.5523-.4477-1-1-1H4Zm12.5-1c-2.4853 0-4.5 2.0147-4.5 4.5s2.0147 4.5 4.5 4.5 4.5-2.0147 4.5-4.5-2.0147-4.5-4.5-4.5Z" />
</svg>' %}

{% set icon_theatre = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M7.50001 6.49476c-.00222.00067-.00443.00134-.00665.00202-1.36964.41615-2.57189 1.22541-3.40555 1.89335-.42318.33907-.76614.65372-1.00483.88517-.11959.11596-.21369.21169-.2793.27999-.03283.03417-.05857.06153-.07687.08118l-.02184.02361-.00665.00728-.00225.00247-.00152.00167c-.23565.26049-.31736.6255-.21524.9616l1.88966 6.2193c.28122.9255.90731 1.6328 1.59535 2.159.68925.5272 1.4966.9166 2.25327 1.198.76111.2832 1.50814.4708 2.10341.5791.2973.054.5684.0904.7934.1077.1117.0085.2238.0133.3286.0113.0814-.0016.2434-.0076.4111-.0586.1678-.051.3057-.1361.3743-.18.0882-.0566.1786-.123.2667-.1923.1774-.1395.3824-.3205.5994-.5309-.076-.0369-.1525-.0755-.2297-.1152-.6068-.312-1.3433-.7546-2.0675-1.3064-.4898-.3733-1.01068-.8242-1.48988-1.3492-.28662.4467-.87678.5935-1.34124.3253-.47829-.2761-.64217-.8877-.36603-1.366.01906-.033.03873-.0675.05915-.1034.10835-.1902.23774-.4173.40797-.6498C7.73454 14.6941 7.5 13.8935 7.5 13V6.5l.00001-.00524ZM5.72195 11.0461c-.52844.1606-.82665.7191-.6661 1.2476.16056.5284.7191.8266 1.24753.6661l.00957-.003c.52843-.1605.82665-.7191.66609-1.2475-.16056-.5284-.7191-.8266-1.24753-.6661l-.00956.0029Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M15 4c-1.4315 0-2.8171.42479-3.8089.82152-.5035.2014-.9231.40276-1.21876.55482-.14814.07618-.26601.14043-.34864.1867-.04134.02315-.07393.04184-.09715.05533l-.02775.01624-.00849.00502-.00286.00171-.00195.00117C9.1843 5.82323 9 6.14874 9 6.5V13c0 .9673.39342 1.8261.89875 2.5296.50625.7048 1.16555 1.312 1.80765 1.8013.646.4922 1.3062.8889 1.8442 1.1655.2688.1382.5176.2518.7279.3338.1044.0407.2102.0778.3111.1063.0784.0222.2351.0635.4104.0635.1753 0 .332-.0413.4104-.0635.1009-.0285.2067-.0656.3111-.1063.2103-.082.4591-.1956.7279-.3338.538-.2766 1.1982-.6733 1.8442-1.1655.6421-.4893 1.3014-1.0965 1.8076-1.8013C20.6066 14.8261 21 13.9673 21 13V6.5c0-.35126-.1852-.67728-.4864-.85801l-.001-.00065-.0029-.00171-.0085-.00502-.0278-.01624c-.0232-.01349-.0558-.03218-.0971-.05533-.0826-.04627-.2005-.11052-.3486-.1867-.2957-.15206-.7153-.35342-1.2188-.55482C17.8171 4.42479 16.4315 4 15 4Zm5 2.5.5136-.85801S20.5145 5.64251 20 6.5ZM13 7c-.5523 0-1 .44772-1 1s.4477 1 1 1h.01c.5523 0 1-.44772 1-1s-.4477-1-1-1H13Zm4 0c-.5523 0-1 .44772-1 1s.4477 1 1 1h.01c.5523 0 1-.44772 1-1s-.4477-1-1-1H17Zm-4.7071 4.2929c-.3905.3905-.3905 1.0237 0 1.4142.0269.027.0549.0552.0838.0845.4776.4831 1.243 1.2574 2.6233 1.2574 1.3803 0 2.1457-.7743 2.6232-1.2573.029-.0294.057-.0576.0839-.0846.3905-.3905.3905-1.0237 0-1.4142-.3905-.3905-1.0237-.3905-1.4142 0-.5293.5293-.757.7561-1.2929.7561-.5359 0-.7636-.2268-1.2929-.7561-.3905-.3905-1.0237-.3905-1.4142 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_user_graduate = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12.4472 2.10557c-.2815-.14076-.6129-.14076-.8944 0L5.90482 4.92956l.37762.11119c.01131.00333.02257.00687.03376.0106L12 6.94594l5.6808-1.89361.3927-.13363-5.6263-2.81313ZM5 10V6.74803l.70053.20628L7 7.38747V10c0 .5523-.44772 1-1 1s-1-.4477-1-1Zm3-1c0-.42413.06601-.83285.18832-1.21643l3.49538 1.16514c.2053.06842.4272.06842.6325 0l3.4955-1.16514C15.934 8.16715 16 8.57587 16 9c0 2.2091-1.7909 4-4 4-2.20914 0-4-1.7909-4-4Z" />
    <path
        d="M14.2996 13.2767c.2332-.2289.5636-.3294.8847-.2692C17.379 13.4191 19 15.4884 19 17.6488v2.1525c0 1.2289-1.0315 2.1428-2.2 2.1428H7.2c-1.16849 0-2.2-.9139-2.2-2.1428v-2.1525c0-2.1409 1.59079-4.1893 3.75163-4.6288.32214-.0655.65589.0315.89274.2595l2.34883 2.2606 2.3064-2.2634Z" />
</svg>' %}

{% set icon_face_explode = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M21.972 11.517a.527.527 0 0 0-1.034-.105 1.377 1.377 0 0 1-1.324 1.01 1.467 1.467 0 0 1-1.4-1.009.526.526 0 0 0-1.015 0 1.467 1.467 0 0 1-2.737.143l-.049-.204.021-.146V9.369h2.304a2.632 2.632 0 0 0 2.631-2.632 2.678 2.678 0 0 0-2.654-2.632l-.526.022-.13-.369A2.632 2.632 0 0 0 13.579 2c-.461 0-.915.124-1.313.358L12 2.513l-.266-.155A2.603 2.603 0 0 0 10.422 2a2.632 2.632 0 0 0-2.483 1.759l-.13.37-.518-.024a2.681 2.681 0 0 0-2.66 2.632A2.632 2.632 0 0 0 7.264 9.37H9.61v1.887l-.007.09-.028.08a1.328 1.328 0 0 1-1.301.996 1.632 1.632 0 0 1-1.502-1.024.526.526 0 0 0-1.01.013 1.474 1.474 0 0 1-1.404 1.01 1.381 1.381 0 0 1-1.325-1.01.547.547 0 0 0-.569-.382h-.008a.526.526 0 0 0-.456.526v.446a10.012 10.012 0 0 0 10 10 9.904 9.904 0 0 0 7.067-2.94A10.019 10.019 0 0 0 22 11.966l-.028-.449ZM8.316 15.685a1.053 1.053 0 1 1 2.105 0 1.053 1.053 0 0 1-2.105 0Zm1.58 3.684a2.105 2.105 0 0 1 4.21 0h-4.21Zm4.736-2.631a1.052 1.052 0 1 1 0-2.105 1.052 1.052 0 0 1 0 2.105Z" />
</svg>' %}

{% set icon_face_grin_stars = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM7 12.5a.5.5 0 0 1 .495.43.762.762 0 0 0 .157.096c.213.106.553.208 1.005.295.896.173 2.111.262 3.343.262 1.232 0 2.447-.09 3.343-.262.452-.087.792-.19 1.006-.295a.764.764 0 0 0 .156-.096.5.5 0 0 1 .995.07c0 1.19-.644 2.438-1.618 3.375C14.9 17.319 13.531 18 12 18c-1.531 0-2.9-.681-3.882-1.625C7.144 15.438 6.5 14.19 6.5 13a.5.5 0 0 1 .5-.5Zm9.519.417.003-.004-.003.004Zm-9.038 0a.017.017 0 0 1-.003-.004l.003.004Zm.901-4.853L9 6.81l.619 1.253 1.381.2-1 .976.236 1.376-1.237-.65-1.235.65L8 9.239l-1-.975 1.382-.2Zm6 0L15 6.81l.619 1.253 1.381.2-1 .976.236 1.376-1.237-.65-1.235.65L14 9.239l-1-.975 1.382-.2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_face_grin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm5.495.93A.5.5 0 0 0 6.5 13c0 1.19.644 2.438 1.618 3.375C9.099 17.319 10.469 18 12 18c1.531 0 2.9-.681 3.882-1.625.974-.937 1.618-2.184 1.618-3.375a.5.5 0 0 0-.995-.07.764.764 0 0 1-.156.096c-.214.106-.554.208-1.006.295-.896.173-2.111.262-3.343.262-1.232 0-2.447-.09-3.343-.262-.452-.087-.792-.19-1.005-.295a.762.762 0 0 1-.157-.096ZM8.99 8a1 1 0 0 0 0 2H9a1 1 0 1 0 0-2h-.01Zm6 0a1 1 0 1 0 0 2H15a1 1 0 1 0 0-2h-.01Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_face_laugh = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM7.99 9a1 1 0 0 1 1-1H9a1 1 0 0 1 0 2h-.01a1 1 0 0 1-1-1ZM14 9a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H15a1 1 0 0 1-1-1Zm-5.506 7.216A5.5 5.5 0 0 1 6.6 13h10.81a5.5 5.5 0 0 1-8.916 3.216Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_thumbs_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8.97 14.316H5.004c-.322 0-.64-.08-.925-.232a2.022 2.022 0 0 1-.717-.645 2.108 2.108 0 0 1-.242-1.883l2.36-7.201C5.769 3.54 5.96 3 7.365 3c2.072 0 4.276.678 6.156 1.256.473.145.925.284 1.35.404h.114v9.862a25.485 25.485 0 0 0-4.238 5.514c-.197.376-.516.67-.901.83a1.74 1.74 0 0 1-1.21.048 1.79 1.79 0 0 1-.96-.757 1.867 1.867 0 0 1-.269-1.211l1.562-4.63ZM19.822 14H17V6a2 2 0 1 1 4 0v6.823c0 .65-.527 1.177-1.177 1.177Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_thumbs_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M15.03 9.684h3.965c.322 0 .64.08.925.232.286.153.532.374.717.645a2.109 2.109 0 0 1 .242 1.883l-2.36 7.201c-.288.814-.48 1.355-1.884 1.355-2.072 0-4.276-.677-6.157-1.256-.472-.145-.924-.284-1.348-.404h-.115V9.478a25.485 25.485 0 0 0 4.238-5.514 1.8 1.8 0 0 1 .901-.83 1.74 1.74 0 0 1 1.21-.048c.396.13.736.397.96.757.225.36.32.788.269 1.211l-1.562 4.63ZM4.177 10H7v8a2 2 0 1 1-4 0v-6.823C3 10.527 3.527 10 4.176 10Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_archive_arrow_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a2 2 0 1 0 0 4h16a2 2 0 1 0 0-4H4Zm0 6h16v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8Zm10.707 5.707a1 1 0 0 0-1.414-1.414l-.293.293V12a1 1 0 1 0-2 0v2.586l-.293-.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l2-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_clipboard_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2a1 1 0 0 0-1 1H6a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-2a1 1 0 0 0-1-1H9Zm1 2h4v2h1a1 1 0 1 1 0 2H9a1 1 0 0 1 0-2h1V4Zm5.707 8.707a1 1 0 0 0-1.414-1.414L11 14.586l-1.293-1.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_clipboard_clean = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_clipboard_list = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-3 8a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-2-1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H9Zm2 5a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-2-1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H9Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_clipboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-6 8a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_chart_bar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-1 9a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2Zm2-5a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1Zm4 4a1 1 0 1 0-2 0v3a1 1 0 1 0 2 0v-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Z" />
    <path fill-rule="evenodd"
        d="M11 7V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm4.707 5.707a1 1 0 0 0-1.414-1.414L11 14.586l-1.293-1.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_circle_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v6.41A7.5 7.5 0 1 0 10.5 22H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M9 16a6 6 0 1 1 12 0 6 6 0 0 1-12 0Zm6-3a1 1 0 0 1 1 1v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 1 1 0-2h1v-1a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_clone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 12.732A1.99 1.99 0 0 1 7 13H3v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2h-2a4 4 0 0 1-4-4v-2.268ZM7 11V7.054a2 2 0 0 0-1.059.644l-2.46 2.87A2 2 0 0 0 3.2 11H7Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M14 3.054V7h-3.8c.074-.154.168-.3.282-.432l2.46-2.87A2 2 0 0 1 14 3.054ZM16 3v4a2 2 0 0 1-2 2h-4v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_code = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm-.293 9.293a1 1 0 0 1 0 1.414L9.414 14l1.293 1.293a1 1 0 0 1-1.414 1.414l-2-2a1 1 0 0 1 0-1.414l2-2a1 1 0 0 1 1.414 0Zm2.586 1.414a1 1 0 0 1 1.414-1.414l2 2a1 1 0 0 1 0 1.414l-2 2a1 1 0 0 1-1.414-1.414L14.586 14l-1.293-1.293Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_copy_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd" d="M7 9v6a4 4 0 0 0 4 4h4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h1v2Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M13 3.054V7H9.2a2 2 0 0 1 .281-.432l2.46-2.87A2 2 0 0 1 13 3.054ZM15 3v4a2 2 0 0 1-2 2H9v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_copy = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M18 3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1V9a4 4 0 0 0-4-4h-3a1.99 1.99 0 0 0-1 .267V5a2 2 0 0 1 2-2h7Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M8 7.054V11H4.2a2 2 0 0 1 .281-.432l2.46-2.87A2 2 0 0 1 8 7.054ZM10 7v4a2 2 0 0 1-2 2H4v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_csv = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm1.018 8.828a2.34 2.34 0 0 0-2.373 2.13v.008a2.32 2.32 0 0 0 2.06 2.497l.535.059a.993.993 0 0 0 .136.006.272.272 0 0 1 .263.367l-.008.02a.377.377 0 0 1-.018.044.49.49 0 0 1-.078.02 1.689 1.689 0 0 1-.297.021h-1.13a1 1 0 1 0 0 2h1.13c.417 0 .892-.05 1.324-.279.47-.248.78-.648.953-1.134a2.272 2.272 0 0 0-2.115-3.06l-.478-.052a.32.32 0 0 1-.285-.341.34.34 0 0 1 .344-.306l.94.02a1 1 0 1 0 .043-2l-.943-.02h-.003Zm7.933 1.482a1 1 0 1 0-1.902-.62l-.57 1.747-.522-1.726a1 1 0 0 0-1.914.578l1.443 4.773a1 1 0 0 0 1.908.021l1.557-4.773Zm-13.762.88a.647.647 0 0 1 .458-.19h1.018a1 1 0 1 0 0-2H6.647A2.647 2.647 0 0 0 4 13.647v1.706A2.647 2.647 0 0 0 6.647 18h1.018a1 1 0 1 0 0-2H6.647A.647.647 0 0 1 6 15.353v-1.706c0-.172.068-.336.19-.457Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_doc = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M6 16v-3h.375a.626.626 0 0 1 .625.626v1.749a.626.626 0 0 1-.626.625H6Zm6-2.5a.5.5 0 1 1 1 0v2a.5.5 0 0 1-1 0v-2Z" />
    <path fill-rule="evenodd"
        d="M11 7V2h7a2 2 0 0 1 2 2v5h1a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-1a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2H3a1 1 0 0 1-1-1v-9a1 1 0 0 1 1-1h6a2 2 0 0 0 2-2Zm7.683 6.006 1.335-.024-.037-2-1.327.024a2.647 2.647 0 0 0-2.636 2.647v1.706a2.647 2.647 0 0 0 2.647 2.647H20v-2h-1.335a.647.647 0 0 1-.647-.647v-1.706a.647.647 0 0 1 .647-.647h.018ZM5 11a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h1.376A2.626 2.626 0 0 0 9 15.375v-1.75A2.626 2.626 0 0 0 6.375 11H5Zm7.5 0a2.5 2.5 0 0 0-2.5 2.5v2a2.5 2.5 0 0 0 5 0v-2a2.5 2.5 0 0 0-2.5-2.5Z"
        clip-rule="evenodd" />
    <path d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Z" />
</svg>' %}

{% set icon_file_export = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v9.293l-2-2a1 1 0 0 0-1.414 1.414l.293.293h-6.586a1 1 0 1 0 0 2h6.586l-.293.293A1 1 0 0 0 18 16.707l2-2V20a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_image = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm.394 9.553a1 1 0 0 0-1.817.062l-2.5 6A1 1 0 0 0 8 19h8a1 1 0 0 0 .894-1.447l-2-4A1 1 0 0 0 13.2 13.4l-.53.706-1.276-2.553ZM13 9.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_import = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-5h7.586l-.293.293a1 1 0 0 0 1.414 1.414l2-2a1 1 0 0 0 0-1.414l-2-2a1 1 0 0 0-1.414 1.414l.293.293H4V9h5a2 2 0 0 0 2-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_invoice = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm2-2a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Zm0 3a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Zm-6 4a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-6Zm8 1v1h-2v-1h2Zm0 3h-2v1h2v-1Zm-4-3v1H9v-1h2Zm0 3H9v1h2v-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_lines = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7ZM8 16a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1-5a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_music = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm2.318.052h-.002A1 1 0 0 0 12 8v5.293A4.033 4.033 0 0 0 10.5 13C8.787 13 7 14.146 7 16s1.787 3 3.5 3 3.5-1.146 3.5-3c0-.107-.006-.211-.017-.313A1.04 1.04 0 0 0 14 15.5V9.766c.538.493 1 1.204 1 2.234a1 1 0 1 0 2 0c0-1.881-.956-3.14-1.86-3.893a6.4 6.4 0 0 0-1.636-.985 4.009 4.009 0 0 0-.165-.063l-.014-.005-.005-.001-.002-.001ZM9 16c0-.356.452-1 1.5-1s1.5.644 1.5 1-.452 1-1.5 1S9 16.356 9 16Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_paste = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M6.5 3.85c0-.47.392-.85.875-.85h5.25c.483 0 .875.38.875.85h1.75c.966 0 1.75.761 1.75 1.7V6h-1c-.728 0-1.732-.06-2.434.095a4.01 4.01 0 0 0-.88.307.91.91 0 0 0-.061-.002h-.875V4.7h-3.5v1.7h-.875a.863.863 0 0 0-.875.85c0 .47.392.85.875.85h3.36L9.077 9.871a4 4 0 0 0-.892 1.526C7.97 12.083 8 13.268 8 14v5c0 .729.195 1.412.535 2H4.75C3.784 21 3 20.239 3 19.3V5.55c0-.939.784-1.7 1.75-1.7H6.5Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M14 8.048V12h-3.907a2 2 0 0 1 .446-.763l2.434-2.603A2 2 0 0 1 14 8.048ZM16 8v4a2 2 0 0 1-2 2h-4v5a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2v-9a2 2 0 0 0-2-2h-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_pdf = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm-6 9a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H5Zm1.5 3H6v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h1.376A2.626 2.626 0 0 0 15 15.375v-1.75A2.626 2.626 0 0 0 12.375 11H11Zm1 5v-3h.375a.626.626 0 0 1 .625.626v1.748a.625.625 0 0 1-.626.626H12Zm5-5a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h1a1 1 0 1 0 0-2h-1v-1h1a1 1 0 1 0 0-2h-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_pen = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 7V2.221a2 2 0 0 0-.5.365L3.586 6.5a2 2 0 0 0-.365.5H8Zm2 0V2h7a2 2 0 0 1 2 2v.126a5.087 5.087 0 0 0-4.74 1.368v.001l-6.642 6.642a3 3 0 0 0-.82 1.532l-.74 3.692a3 3 0 0 0 3.53 3.53l3.694-.738a3 3 0 0 0 1.532-.82L19 15.149V20a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M17.447 8.08a1.087 1.087 0 0 1 1.187.238l.002.001a1.088 1.088 0 0 1 0 1.539l-.377.377-1.54-1.542.373-.374.002-.001c.1-.102.22-.182.353-.237Zm-2.143 2.027-4.644 4.644-.385 1.924 1.925-.385 4.644-4.642-1.54-1.54Zm2.56-4.11a3.087 3.087 0 0 0-2.187.909l-6.645 6.645a1 1 0 0 0-.274.51l-.739 3.693a1 1 0 0 0 1.177 1.176l3.693-.738a1 1 0 0 0 .51-.274l6.65-6.646a3.088 3.088 0 0 0-2.185-5.275Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_ppt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm-6 9a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H5Zm1.5 3H6v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H11Zm1.5 3H12v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 1 0 0 2v4a1 1 0 1 0 2 0v-4a1 1 0 1 0 0-2h-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_search = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm.5 5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3Zm0 5c.47 0 .917-.092 1.326-.26l1.967 1.967a1 1 0 0 0 1.414-1.414l-1.817-1.818A3.5 3.5 0 1 0 11.5 17Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_shield = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v5.703l-4.311-1.58a2 2 0 0 0-1.377 0l-5 1.832A2 2 0 0 0 8 11.861c.03 2.134.582 4.228 1.607 6.106.848 1.555 2 2.924 3.382 4.033H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M15.345 9.061a1 1 0 0 0-.689 0l-5 1.833a1 1 0 0 0-.656.953c.028 1.97.538 3.905 1.485 5.641a12.425 12.425 0 0 0 3.956 4.34 1 1 0 0 0 1.12 0 12.426 12.426 0 0 0 3.954-4.34A12.14 12.14 0 0 0 21 11.848a1 1 0 0 0-.656-.954l-5-1.833ZM15 19.765a10.401 10.401 0 0 0 2.76-3.235 10.15 10.15 0 0 0 1.206-4.011L15 11.065v8.7Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_video = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-2 4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H9Zm0 2h2v2H9v-2Zm7.965-.557a1 1 0 0 0-1.692-.72l-1.268 1.218a1 1 0 0 0-.308.721v.733a1 1 0 0 0 .37.776l1.267 1.032a1 1 0 0 0 1.631-.776v-2.984Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_word = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-1.02 4.804a1 1 0 1 0-1.96.392l1 5a1 1 0 0 0 1.838.319L12 15.61l1.143 1.905a1 1 0 0 0 1.838-.319l1-5a1 1 0 0 0-1.962-.392l-.492 2.463-.67-1.115a1 1 0 0 0-1.714 0l-.67 1.116-.492-2.464Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file_zip = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm3 2h2.01v2.01h-2V8h2v2.01h-2V12h2v2.01h-2V16h2v2.01h-2v2H12V18h2v-1.99h-2V14h2v-1.99h-2V10h2V8.01h-2V6h2V4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_file = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_folder_arrow_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 4a2 2 0 0 0-2 2v1h10.968l-1.9-2.28A2 2 0 0 0 10.532 4H5ZM3 19V9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm11.707-7.707a1 1 0 0 0-1.414 1.414l.293.293H8a1 1 0 1 0 0 2h5.586l-.293.293a1 1 0 0 0 1.414 1.414l2-2a1 1 0 0 0 0-1.414l-2-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_folder_duplicate = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M6 5a2 2 0 0 1 2-2h4.157a2 2 0 0 1 1.656.879L15.249 6H19a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2v-5a3 3 0 0 0-3-3h-3.22l-1.14-1.682A3 3 0 0 0 9.157 6H6V5Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M3 9a2 2 0 0 1 2-2h4.157a2 2 0 0 1 1.656.879L12.249 10H3V9Zm0 3v7a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2v-7H3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_folder_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 .087.586l2.977-7.937A1 1 0 0 1 6 10h12V9a2 2 0 0 0-2-2h-4.532l-1.9-2.28A2 2 0 0 0 8.032 4H4Zm2.693 8H6.5l-3 8H18l3-8H6.693Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_folder_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 4a2 2 0 0 0-2 2v1h10.968l-1.9-2.28A2 2 0 0 0 10.532 4H5ZM3 19V9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm9-8.5a1 1 0 0 1 1 1V13h1.5a1 1 0 1 1 0 2H13v1.5a1 1 0 1 1-2 0V15H9.5a1 1 0 1 1 0-2H11v-1.5a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_folder = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M3 6a2 2 0 0 1 2-2h5.532a2 2 0 0 1 1.536.72l1.9 2.28H3V6Zm0 3v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9H3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_adjustments_horizontal = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M10.83 5a3.001 3.001 0 0 0-5.66 0H4a1 1 0 1 0 0 2h1.17a3.001 3.001 0 0 0 5.66 0H20a1 1 0 1 0 0-2h-9.17ZM4 11h9.17a3.001 3.001 0 0 1 5.66 0H20a1 1 0 1 1 0 2h-1.17a3.001 3.001 0 0 1-5.66 0H4a1 1 0 1 1 0-2Zm1.17 6H4a1 1 0 1 0 0 2h1.17a3.001 3.001 0 0 0 5.66 0H20a1 1 0 1 0 0-2h-9.17a3.001 3.001 0 0 0-5.66 0Z" />
</svg>' %}

{% set icon_adjustments_vertical = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M5 13.17a3.001 3.001 0 0 0 0 5.66V20a1 1 0 1 0 2 0v-1.17a3.001 3.001 0 0 0 0-5.66V4a1 1 0 0 0-2 0v9.17ZM11 20v-9.17a3.001 3.001 0 0 1 0-5.66V4a1 1 0 1 1 2 0v1.17a3.001 3.001 0 0 1 0 5.66V20a1 1 0 1 1-2 0Zm6-1.17V20a1 1 0 1 0 2 0v-1.17a3.001 3.001 0 0 0 0-5.66V4a1 1 0 1 0-2 0v9.17a3.001 3.001 0 0 0 0 5.66Z" />
</svg>' %}

{% set icon_annotation = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M3.559 4.544c.355-.35.834-.544 1.33-.544H19.11c.496 0 .975.194 1.33.544.356.35.559.829.559 1.331v9.25c0 .502-.203.981-.559 1.331-.355.35-.834.544-1.33.544H15.5l-2.7 3.6a1 1 0 0 1-1.6 0L8.5 17H4.889c-.496 0-.975-.194-1.33-.544A1.868 1.868 0 0 1 3 15.125v-9.25c0-.502.203-.981.559-1.331ZM7.556 7.5a1 1 0 1 0 0 2h8a1 1 0 0 0 0-2h-8Zm0 3.5a1 1 0 1 0 0 2H12a1 1 0 1 0 0-2H7.556Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_archive = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M20 10H4v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8ZM9 13v-1h6v1a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
    <path d="M2 6a2 2 0 0 1 2-2h16a2 2 0 1 1 0 4H4a2 2 0 0 1-2-2Z" />
</svg>' %}

{% set icon_arrow_up_right_from_square = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.403 5H5a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6.403a3.01 3.01 0 0 1-1.743-1.612l-3.025 3.025A3 3 0 1 1 9.99 9.768l3.025-3.025A3.01 3.01 0 0 1 11.403 5Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M13.232 4a1 1 0 0 1 1-1H20a1 1 0 0 1 1 1v5.768a1 1 0 1 1-2 0V6.414l-6.182 6.182a1 1 0 0 1-1.414-1.414L17.586 5h-3.354a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_award = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M11 9a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z" />
    <path fill-rule="evenodd"
        d="M9.896 3.051a2.681 2.681 0 0 1 4.208 0c.147.186.38.282.615.255a2.681 2.681 0 0 1 2.976 2.975.681.681 0 0 0 .254.615 2.681 2.681 0 0 1 0 4.208.682.682 0 0 0-.254.615 2.681 2.681 0 0 1-2.976 2.976.681.681 0 0 0-.615.254 2.682 2.682 0 0 1-4.208 0 .681.681 0 0 0-.614-.255 2.681 2.681 0 0 1-2.976-2.975.681.681 0 0 0-.255-.615 2.681 2.681 0 0 1 0-4.208.681.681 0 0 0 .255-.615 2.681 2.681 0 0 1 2.976-2.975.681.681 0 0 0 .614-.255ZM12 6a3 3 0 1 0 0 6 3 3 0 0 0 0-6Z"
        clip-rule="evenodd" />
    <path
        d="M5.395 15.055 4.07 19a1 1 0 0 0 1.264 1.267l1.95-.65 1.144 1.707A1 1 0 0 0 10.2 21.1l1.12-3.18a4.641 4.641 0 0 1-2.515-1.208 4.667 4.667 0 0 1-3.411-1.656Zm7.269 2.867 1.12 3.177a1 1 0 0 0 1.773.224l1.144-1.707 1.95.65A1 1 0 0 0 19.915 19l-1.32-3.93a4.667 4.667 0 0 1-3.4 1.642 4.643 4.643 0 0 1-2.53 1.21Z" />
</svg>' %}

{% set icon_badge_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 2c-.791 0-1.55.314-2.11.874l-.893.893a.985.985 0 0 1-.696.288H7.04A2.984 2.984 0 0 0 4.055 7.04v1.262a.986.986 0 0 1-.288.696l-.893.893a2.984 2.984 0 0 0 0 4.22l.893.893a.985.985 0 0 1 .288.696v1.262a2.984 2.984 0 0 0 2.984 2.984h1.262c.261 0 .512.104.696.288l.893.893a2.984 2.984 0 0 0 4.22 0l.893-.893a.985.985 0 0 1 .696-.288h1.262a2.984 2.984 0 0 0 2.984-2.984V15.7c0-.261.104-.512.288-.696l.893-.893a2.984 2.984 0 0 0 0-4.22l-.893-.893a.985.985 0 0 1-.288-.696V7.04a2.984 2.984 0 0 0-2.984-2.984h-1.262a.985.985 0 0 1-.696-.288l-.893-.893A2.984 2.984 0 0 0 12 2Zm3.683 7.73a1 1 0 1 0-1.414-1.413l-4.253 4.253-1.277-1.277a1 1 0 0 0-1.415 1.414l1.985 1.984a1 1 0 0 0 1.414 0l4.96-4.96Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_battery = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M7 13v-2h7v2H7Z" />
    <path fill-rule="evenodd"
        d="M2 8a2 2 0 0 1 2-2h13a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8Zm4 1a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1H6Z"
        clip-rule="evenodd" />
    <path d="M22 14v-4a1 1 0 0 0-1-1h-1v6h1a1 1 0 0 0 1-1Z" />
</svg>' %}

{% set icon_bed = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M2.535 11A3.981 3.981 0 0 0 2 13v4a1 1 0 0 0 1 1h2v1a1 1 0 1 0 2 0v-1h10v1a1 1 0 1 0 2 0v-1h2a1 1 0 0 0 1-1v-4c0-.729-.195-1.412-.535-2H2.535ZM20 9V8a4 4 0 0 0-4-4h-3v5h7Zm-9-5H8a4 4 0 0 0-4 4v1h7V4Z" />
</svg>' %}

{% set icon_bell_active_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M17.133 12.632v-1.8a5.407 5.407 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.933.933 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175Zm-13.267-.8a1 1 0 0 1-1-1 9.424 9.424 0 0 1 2.517-6.391A1.001 1.001 0 1 1 6.854 5.8a7.43 7.43 0 0 0-1.988 5.037 1 1 0 0 1-1 .995Zm16.268 0a1 1 0 0 1-1-1A7.431 7.431 0 0 0 17.146 5.8a1 1 0 0 1 1.471-1.354 9.424 9.424 0 0 1 2.517 6.391 1 1 0 0 1-1 .995ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z" />
</svg>' %}

{% set icon_bell_active = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M11.209 3.816a1 1 0 0 0-1.966.368l.325 1.74a5.338 5.338 0 0 0-2.8 5.762l.276 1.473.055.296c.258 1.374-.228 2.262-.63 2.998-.285.52-.527.964-.437 1.449.11.586.22 1.173.75 1.074l12.7-2.377c.528-.1.418-.685.308-1.27-.103-.564-.636-1.123-1.195-1.711-.606-.636-1.243-1.306-1.404-2.051-.233-1.085-.275-1.387-.303-1.587-.009-.063-.016-.117-.028-.182a5.338 5.338 0 0 0-5.353-4.39l-.298-1.592Z" />
    <path fill-rule="evenodd"
        d="M6.539 4.278a1 1 0 0 1 .07 1.412c-1.115 1.23-1.705 2.605-1.83 4.26a1 1 0 0 1-1.995-.15c.16-2.099.929-3.893 2.342-5.453a1 1 0 0 1 1.413-.069Z"
        clip-rule="evenodd" />
    <path d="M8.95 19.7c.7.8 1.7 1.3 2.8 1.3 1.6 0 2.9-1.1 3.3-2.5l-6.1 1.2Z" />
</svg>' %}

{% set icon_bell_ring = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M17.133 12.632v-1.8a5.406 5.406 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.955.955 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175ZM6 6a1 1 0 0 1-.707-.293l-1-1a1 1 0 0 1 1.414-1.414l1 1A1 1 0 0 1 6 6Zm-2 4H3a1 1 0 0 1 0-2h1a1 1 0 1 1 0 2Zm14-4a1 1 0 0 1-.707-1.707l1-1a1 1 0 1 1 1.414 1.414l-1 1A1 1 0 0 1 18 6Zm3 4h-1a1 1 0 1 1 0-2h1a1 1 0 1 1 0 2ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z" />
</svg>' %}

{% set icon_bell = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M17.133 12.632v-1.8a5.406 5.406 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.955.955 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z" />
</svg>' %}

{% set icon_blender_phone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11 4a1 1 0 0 0-1 1v10h10.459l.522-3H16a1 1 0 1 1 0-2h5.33l.174-1H16a1 1 0 1 1 0-2h5.852l.117-.67v-.003A1.983 1.983 0 0 0 20.06 4H11ZM9 18c0-.35.06-.687.17-1h11.66c.11.313.17.65.17 1v1a1 1 0 0 1-1 1H10a1 1 0 0 1-1-1v-1Zm-6.991-7a17.8 17.8 0 0 0 .953 6.1c.198.54 1.61.9 2.237.9h1.34c.17 0 .339-.032.495-.095a1.24 1.24 0 0 0 .41-.27c.114-.114.2-.25.254-.396a1.01 1.01 0 0 0 .055-.456l-.242-2.185a1.073 1.073 0 0 0-.395-.71 1.292 1.292 0 0 0-.819-.286H5.291c-.12-.863-.17-1.732-.145-2.602-.024-.87.024-1.74.145-2.602H6.54c.302 0 .594-.102.818-.286a1.07 1.07 0 0 0 .396-.71l.24-2.185a1.01 1.01 0 0 0-.054-.456 1.088 1.088 0 0 0-.254-.397 1.223 1.223 0 0 0-.41-.269A1.328 1.328 0 0 0 6.78 4H4.307c-.3-.001-.592.082-.838.238a1.335 1.335 0 0 0-.531.634A17.127 17.127 0 0 0 2.008 11Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_book_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11 4.717c-2.286-.58-4.16-.756-7.045-.71A1.99 1.99 0 0 0 2 6v11c0 1.133.934 2.022 2.044 2.007 2.759-.038 4.5.16 6.956.791V4.717Zm2 15.081c2.456-.631 4.198-.829 6.956-.791A2.013 2.013 0 0 0 22 16.999V6a1.99 1.99 0 0 0-1.955-1.993c-2.885-.046-4.76.13-7.045.71v15.081Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_book = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M6 2a2 2 0 0 0-2 2v15a3 3 0 0 0 3 3h12a1 1 0 1 0 0-2h-2v-2h2a1 1 0 0 0 1-1V4a2 2 0 0 0-2-2h-8v16h5v2H7a1 1 0 1 1 0-2h1V2H6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_bookmark = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M7.833 2c-.507 0-.98.216-1.318.576A1.92 1.92 0 0 0 6 3.89V21a1 1 0 0 0 1.625.78L12 18.28l4.375 3.5A1 1 0 0 0 18 21V3.889c0-.481-.178-.954-.515-1.313A1.808 1.808 0 0 0 16.167 2H7.833Z" />
</svg>' %}

{% set icon_booth_curtain = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M4 5v2H3a1 1 0 0 0 0 2h1v10a1 1 0 1 0 2 0V9h2v5.586c0 1.782 2.154 2.674 3.414 1.414l.586-.586.586.586a2 2 0 0 0 2.828 0l.586-.586.586.586c.411.411.918.593 1.414.59V19a1 1 0 1 0 2 0V9h1a1 1 0 1 0 0-2h-1V6a2 2 0 0 0-2-2h-8a2 2 0 0 0-2 2v1H6V5a1 1 0 0 0-2 0Z" />
</svg>' %}

{% set icon_brain = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M11 21V2.352A3.451 3.451 0 0 0 9.5 2a3.5 3.5 0 0 0-3.261 2.238A3.5 3.5 0 0 0 4.04 8.015a3.518 3.518 0 0 0-.766 1.128c-.042.1-.064.209-.1.313a3.34 3.34 0 0 0-.106.344 3.463 3.463 0 0 0 .02 1.468A4.017 4.017 0 0 0 2.3 12.5l-.015.036a3.861 3.861 0 0 0-.216.779A3.968 3.968 0 0 0 2 14c.003.24.027.48.072.716a4 4 0 0 0 .235.832c.006.014.015.027.021.041a3.85 3.85 0 0 0 .417.727c.105.146.219.285.342.415.072.076.148.146.225.216.1.091.205.179.315.26.11.081.2.14.308.2.02.013.039.028.059.04v.053a3.506 3.506 0 0 0 3.03 3.469 3.426 3.426 0 0 0 4.154.577A.972.972 0 0 1 11 21Zm10.934-7.68a3.956 3.956 0 0 0-.215-.779l-.017-.038a4.016 4.016 0 0 0-.79-1.235 3.417 3.417 0 0 0 .017-1.468 3.387 3.387 0 0 0-.1-.333c-.034-.108-.057-.22-.1-.324a3.517 3.517 0 0 0-.766-1.128 3.5 3.5 0 0 0-2.202-3.777A3.5 3.5 0 0 0 14.5 2a3.451 3.451 0 0 0-1.5.352V21a.972.972 0 0 1-.184.546 3.426 3.426 0 0 0 4.154-.577A3.506 3.506 0 0 0 20 17.5v-.049c.02-.012.039-.027.059-.04.106-.064.208-.13.308-.2s.214-.169.315-.26c.077-.07.153-.14.225-.216a4.007 4.007 0 0 0 .459-.588c.115-.176.215-.361.3-.554.006-.014.015-.027.021-.041.087-.213.156-.434.205-.659.013-.057.024-.115.035-.173.046-.237.07-.478.073-.72a3.948 3.948 0 0 0-.066-.68Z" />
</svg>' %}

{% set icon_briefcase = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M10 2a3 3 0 0 0-3 3v1H5a3 3 0 0 0-3 3v2.382l1.447.723.005.003.027.013.12.056c.108.05.272.123.486.212.429.177 1.056.416 1.834.655C7.481 13.524 9.63 14 12 14c2.372 0 4.52-.475 6.08-.956.78-.24 1.406-.478 1.835-.655a14.028 14.028 0 0 0 .606-.268l.027-.013.005-.002L22 11.381V9a3 3 0 0 0-3-3h-2V5a3 3 0 0 0-3-3h-4Zm5 4V5a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v1h6Zm6.447 7.894.553-.276V19a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-5.382l.553.276.002.002.004.002.013.006.041.02.151.07c.13.06.318.144.557.242.478.198 1.163.46 2.01.72C7.019 15.476 9.37 16 12 16c2.628 0 4.98-.525 6.67-1.044a22.95 22.95 0 0 0 2.01-.72 15.994 15.994 0 0 0 .707-.312l.041-.02.013-.006.004-.002.001-.001-.431-.866.432.865ZM12 10a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_bug = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M18 17h-.09c.058-.33.088-.665.09-1v-1h1a1 1 0 0 0 0-2h-1.09a5.97 5.97 0 0 0-.26-1H17a2 2 0 0 0 2-2V8a1 1 0 1 0-2 0v2h-.54a6.239 6.239 0 0 0-.46-.46V8a3.963 3.963 0 0 0-.986-2.6l.693-.693A1 1 0 0 0 16 4V3a1 1 0 1 0-2 0v.586l-.661.661a3.753 3.753 0 0 0-2.678 0L10 3.586V3a1 1 0 1 0-2 0v1a1 1 0 0 0 .293.707l.693.693A3.963 3.963 0 0 0 8 8v1.54a6.239 6.239 0 0 0-.46.46H7V8a1 1 0 0 0-2 0v2a2 2 0 0 0 2 2h-.65a5.97 5.97 0 0 0-.26 1H5a1 1 0 0 0 0 2h1v1a6 6 0 0 0 .09 1H6a2 2 0 0 0-2 2v2a1 1 0 1 0 2 0v-2h.812A6.012 6.012 0 0 0 11 21.907V12a1 1 0 0 1 2 0v9.907A6.011 6.011 0 0 0 17.188 19H18v2a1 1 0 0 0 2 0v-2a2 2 0 0 0-2-2Zm-4-8.65a5.922 5.922 0 0 0-.941-.251l-.111-.017a5.52 5.52 0 0 0-1.9 0l-.111.017A5.925 5.925 0 0 0 10 8.35V8a2 2 0 1 1 4 0v.35Z" />
</svg>' %}

{% set icon_building = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2v14a1 1 0 1 1 0 2H5a1 1 0 1 1 0-2V5a1 1 0 0 1-1-1Zm5 2a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H9Zm5 0a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1h-1Zm-5 4a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1H9Zm5 0a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1h-1Zm-3 4a2 2 0 0 0-2 2v3h2v-3h2v3h2v-3a2 2 0 0 0-2-2h-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_bullhorn = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M18.458 3.11A1 1 0 0 1 19 4v16a1 1 0 0 1-1.581.814L12 16.944V7.056l5.419-3.87a1 1 0 0 1 1.039-.076ZM22 12c0 1.48-.804 2.773-2 3.465v-6.93c1.196.692 2 1.984 2 3.465ZM10 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6V8Zm0 9H5v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_calendar_edit = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12.512 8.72a2.46 2.46 0 0 1 3.479 0 2.461 2.461 0 0 1 0 3.479l-.004.005-1.094 1.08a.998.998 0 0 0-.194-.272l-3-3a1 1 0 0 0-.272-.193l1.085-1.1Zm-2.415 2.445L7.28 14.017a1 1 0 0 0-.289.702v2a1 1 0 0 0 1 1h2a1 1 0 0 0 .703-.288l2.851-2.816a.995.995 0 0 1-.26-.189l-3-3a.998.998 0 0 1-.19-.26Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M7 3a1 1 0 0 1 1 1v1h3V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h1a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1V4a1 1 0 0 1 1-1Zm10.67 8H19v8H5v-8h3.855l.53-.537a1 1 0 0 1 .87-.285c.097.015.233.13.277.087.045-.043-.073-.18-.09-.276a1 1 0 0 1 .274-.873l1.09-1.104a3.46 3.46 0 0 1 4.892 0l.001.002A3.461 3.461 0 0 1 17.67 11Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_calendar_month = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 5a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1h1a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1h1a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1 2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a2 2 0 0 1 2-2ZM3 19v-7a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm6.01-6a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm2 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm6 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-10 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm6 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm2 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_calendar_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M18 5.05h1a2 2 0 0 1 2 2v2H3v-2a2 2 0 0 1 2-2h1v-1a1 1 0 1 1 2 0v1h3v-1a1 1 0 1 1 2 0v1h3v-1a1 1 0 1 1 2 0v1Zm-15 6v8a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-8H3ZM11 18a1 1 0 1 0 2 0v-1h1a1 1 0 1 0 0-2h-1v-1a1 1 0 1 0-2 0v1h-1a1 1 0 1 0 0 2h1v1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_calendar_week = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M6 5V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h1a2 2 0 0 1 2 2v2H3V7a2 2 0 0 1 2-2h1ZM3 19v-8h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm5-6a1 1 0 1 0 0 2h8a1 1 0 1 0 0-2H8Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_chart_mixed_dollar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 15a6 6 0 1 1 12 0 6 6 0 0 1-12 0Zm3.845-1.855a2.4 2.4 0 0 1 1.2-1.226 1 1 0 0 1 1.992-.026c.426.15.809.408 1.111.749a1 1 0 1 1-1.496 1.327.682.682 0 0 0-.36-.213.997.997 0 0 1-.113-.032.4.4 0 0 0-.394.074.93.93 0 0 0 .455.254 2.914 2.914 0 0 1 1.504.9c.373.433.669 1.092.464 1.823a.996.996 0 0 1-.046.129c-.226.519-.627.94-1.132 1.192a1 1 0 0 1-1.956.093 2.68 2.68 0 0 1-1.227-.798 1 1 0 1 1 1.506-1.315.682.682 0 0 0 .363.216c.038.009.075.02.111.032a.4.4 0 0 0 .395-.074.93.93 0 0 0-.455-.254 2.91 2.91 0 0 1-1.503-.9c-.375-.433-.666-1.089-.466-1.817a.994.994 0 0 1 .047-.134Zm1.884.573.003.008c-.003-.005-.003-.008-.003-.008Zm.55 2.613s-.002-.002-.003-.007a.032.032 0 0 1 .003.007ZM4 14a1 1 0 0 1 1 1v4a1 1 0 1 1-2 0v-4a1 1 0 0 1 1-1Zm3-2a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1Zm6.5-8a1 1 0 0 1 1-1H18a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-.796l-2.341 2.049a1 1 0 0 1-1.24.06l-2.894-2.066L6.614 9.29a1 1 0 1 1-1.228-1.578l4.5-3.5a1 1 0 0 1 1.195-.025l2.856 2.04L15.34 5h-.84a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_chart_pie = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M13.5 2c-.178 0-.356.013-.492.022l-.074.005a1 1 0 0 0-.934.998V11a1 1 0 0 0 1 1h7.975a1 1 0 0 0 .998-.934l.005-.074A7.04 7.04 0 0 0 22 10.5 8.5 8.5 0 0 0 13.5 2Z" />
    <path d="M11 6.025a1 1 0 0 0-1.065-.998 8.5 8.5 0 1 0 9.038 9.039A1 1 0 0 0 17.975 13H11V6.025Z" />
</svg>' %}

{% set icon_check_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm13.707-1.293a1 1 0 0 0-1.414-1.414L11 12.586l-1.793-1.793a1 1 0 0 0-1.414 1.414l2.5 2.5a1 1 0 0 0 1.414 0l4-4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_check_plus_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd" d="M18 14a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2v-2Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M15.026 21.534A9.994 9.994 0 0 1 12 22C6.477 22 2 17.523 2 12S6.477 2 12 2c2.51 0 4.802.924 6.558 2.45l-7.635 7.636L7.707 8.87a1 1 0 0 0-1.414 1.414l3.923 3.923a1 1 0 0 0 1.414 0l8.3-8.3A9.956 9.956 0 0 1 22 12a9.994 9.994 0 0 1-.466 3.026A2.49 2.49 0 0 0 20 14.5h-.5V14a2.5 2.5 0 0 0-5 0v.5H14a2.5 2.5 0 0 0 0 5h.5v.5c0 .578.196 1.11.526 1.534Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_circle_minus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm5.757-1a1 1 0 1 0 0 2h8.486a1 1 0 1 0 0-2H7.757Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_circle_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4.243a1 1 0 1 0-2 0V11H7.757a1 1 0 1 0 0 2H11v3.243a1 1 0 1 0 2 0V13h3.243a1 1 0 1 0 0-2H13V7.757Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_clock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4a1 1 0 1 0-2 0v4a1 1 0 0 0 .293.707l3 3a1 1 0 0 0 1.414-1.414L13 11.586V8Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_close_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm7.707-3.707a1 1 0 0 0-1.414 1.414L10.586 12l-2.293 2.293a1 1 0 1 0 1.414 1.414L12 13.414l2.293 2.293a1 1 0 0 0 1.414-1.414L13.414 12l2.293-2.293a1 1 0 0 0-1.414-1.414L12 10.586 9.707 8.293Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_close_sidebar_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M13 21h6c1.1046 0 2-.8954 2-2V5c0-1.10457-.8954-2-2-2h-6v18Z" />
    <path fill-rule="evenodd"
        d="M11 3H5c-1.10457 0-2 .89543-2 2v14c0 1.1046.89543 2 2 2h6V3Zm-2.29295 7.7071c.39052-.3905.39052-1.02368 0-1.41421-.39053-.39052-1.02369-.39052-1.41421 0L5.29289 11.2928c-.39052.3906-.39052 1.0237 0 1.4142l1.99995 2c.39052.3905 1.02368.3905 1.41421 0 .39052-.3905.39052-1.0237 0-1.4142l-1.29284-1.2929 1.29284-1.2928Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_close_sidebar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M10 4H4c-1.10457 0-2 .89543-2 2v12c0 1.1046.89543 2 2 2h6V4ZM7.79283 9.29289c.39053.39053.39053 1.02371 0 1.41421L6.5 11.9999l1.29283 1.2929c.39053.3905.39053 1.0237 0 1.4142-.39052.3905-1.02368.3905-1.41421 0l-1.99994-2c-.39052-.3905-.39052-1.0236 0-1.4142l1.99994-1.99991c.39053-.39052 1.02369-.39052 1.41421 0Z"
        clip-rule="evenodd" />
    <path d="M12 20h8c1.1046 0 2-.8954 2-2V6c0-1.10457-.8954-2-2-2h-8v16Z" />
</svg>' %}

{% set icon_cloud_arrow_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M13.383 4.076a6.5 6.5 0 0 0-6.887 3.95A5 5 0 0 0 7 18h3v-4a2 2 0 0 1-1.414-3.414l2-2a2 2 0 0 1 2.828 0l2 2A2 2 0 0 1 14 14v4h4a4 4 0 0 0 .988-7.876 6.5 6.5 0 0 0-5.605-6.048Z" />
    <path
        d="M12.707 9.293a1 1 0 0 0-1.414 0l-2 2a1 1 0 1 0 1.414 1.414l.293-.293V19a1 1 0 1 0 2 0v-6.586l.293.293a1 1 0 0 0 1.414-1.414l-2-2Z" />
</svg>' %}

{% set icon_code_branch = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M8 3a3 3 0 0 0-1 5.83v6.34a3.001 3.001 0 1 0 2 0V15a2 2 0 0 1 2-2h1a5.002 5.002 0 0 0 4.927-4.146A3.001 3.001 0 0 0 16 3a3 3 0 0 0-1.105 5.79A3.001 3.001 0 0 1 12 11h-1c-.729 0-1.412.195-2 .535V8.83A3.001 3.001 0 0 0 8 3Z" />
</svg>' %}

{% set icon_code_fork = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 6a3 3 0 1 1 4 2.83V10a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V8.83a3.001 3.001 0 1 1 2 0V10a3 3 0 0 1-3 3h-1v2.17a3.001 3.001 0 1 1-2 0V13h-1a3 3 0 0 1-3-3V8.83A3.001 3.001 0 0 1 5 6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_code_merge = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 6a3 3 0 1 1 4 2.83V9a4 4 0 0 0 4 4h.17a3.001 3.001 0 1 1 0 2H13a5.978 5.978 0 0 1-4-1.528v1.699a3.001 3.001 0 1 1-2 0V8.829A3.001 3.001 0 0 1 5 6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_code_pull_request = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M3 6a3 3 0 1 1 4 2.83v6.34a3.001 3.001 0 1 1-2 0V8.83A3.001 3.001 0 0 1 3 6Zm11.207-2.707a1 1 0 0 1 0 1.414L13.914 5H15a4 4 0 0 1 4 4v6.17a3.001 3.001 0 1 1-2 0V9a2 2 0 0 0-2-2h-1.086l.293.293a1 1 0 0 1-1.414 1.414l-2-2a1 1 0 0 1 0-1.414l2-2a1 1 0 0 1 1.414 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_cog = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9.586 2.586A2 2 0 0 1 11 2h2a2 2 0 0 1 2 2v.089l.473.196.063-.063a2.002 2.002 0 0 1 2.828 0l1.414 1.414a2 2 0 0 1 0 2.827l-.063.064.196.473H20a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-.089l-.196.473.063.063a2.002 2.002 0 0 1 0 2.828l-1.414 1.414a2 2 0 0 1-2.828 0l-.063-.063-.473.196V20a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-.089l-.473-.196-.063.063a2.002 2.002 0 0 1-2.828 0l-1.414-1.414a2 2 0 0 1 0-2.827l.063-.064L4.089 15H4a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h.09l.195-.473-.063-.063a2 2 0 0 1 0-2.828l1.414-1.414a2 2 0 0 1 2.827 0l.064.063L9 4.089V4a2 2 0 0 1 .586-1.414ZM8 12a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M15 4H9v16h6V4Zm2 16h3a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-3v16ZM4 4h3v16H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_database = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12 7.205c4.418 0 8-1.165 8-2.602C20 3.165 16.418 2 12 2S4 3.165 4 4.603c0 1.437 3.582 2.602 8 2.602ZM12 22c4.963 0 8-1.686 8-2.603v-4.404c-.052.032-.112.06-.165.09a7.75 7.75 0 0 1-.745.387c-.193.088-.394.173-.6.253-.063.024-.124.05-.189.073a18.934 18.934 0 0 1-6.3.998c-2.135.027-4.26-.31-6.3-.998-.065-.024-.126-.05-.189-.073a10.143 10.143 0 0 1-.852-.373 7.75 7.75 0 0 1-.493-.267c-.053-.03-.113-.058-.165-.09v4.404C4 20.315 7.037 22 12 22Zm7.09-13.928a9.91 9.91 0 0 1-.6.253c-.063.025-.124.05-.189.074a18.935 18.935 0 0 1-6.3.998c-2.135.027-4.26-.31-6.3-.998-.065-.024-.126-.05-.189-.074a10.163 10.163 0 0 1-.852-.372 7.816 7.816 0 0 1-.493-.268c-.055-.03-.115-.058-.167-.09V12c0 .917 3.037 2.603 8 2.603s8-1.686 8-2.603V7.596c-.052.031-.112.059-.165.09a7.816 7.816 0 0 1-.745.386Z" />
</svg>' %}

{% set icon_desktop_pc = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 3a2 2 0 0 0-2 2v5h18V5a2 2 0 0 0-2-2H5ZM3 14v-2h18v2a2 2 0 0 1-2 2h-6v3h2a1 1 0 1 1 0 2H9a1 1 0 1 1 0-2h2v-3H5a2 2 0 0 1-2-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_download = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M13 11.15V4a1 1 0 1 0-2 0v7.15L8.78 8.374a1 1 0 1 0-1.56 1.25l4 5a1 1 0 0 0 1.56 0l4-5a1 1 0 1 0-1.56-1.25L13 11.15Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M9.657 15.874 7.358 13H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2.358l-2.3 2.874a3 3 0 0 1-4.685 0ZM17 16a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_draw_square = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M5 3a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm0 12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H5Zm12 0a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-2Zm0-12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-2Z" />
    <path fill-rule="evenodd"
        d="M10 6.5a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1ZM10 18a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1Zm-4-4a1 1 0 0 1-1-1v-2a1 1 0 1 1 2 0v2a1 1 0 0 1-1 1Zm12 0a1 1 0 0 1-1-1v-2a1 1 0 1 1 2 0v2a1 1 0 0 1-1 1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_edit = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.32 6.176H5c-1.105 0-2 .949-2 2.118v10.588C3 20.052 3.895 21 5 21h11c1.105 0 2-.948 2-2.118v-7.75l-3.914 4.144A2.46 2.46 0 0 1 12.81 16l-2.681.568c-1.75.37-3.292-1.263-2.942-3.115l.536-2.839c.097-.512.335-.983.684-1.352l2.914-3.086Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M19.846 4.318a2.148 2.148 0 0 0-.437-.692 2.014 2.014 0 0 0-.654-.463 1.92 1.92 0 0 0-1.544 0 2.014 2.014 0 0 0-.654.463l-.546.578 2.852 3.02.546-.579a2.14 2.14 0 0 0 .437-.692 2.244 2.244 0 0 0 0-1.635ZM17.45 8.721 14.597 5.7 9.82 10.76a.54.54 0 0 0-.137.27l-.536 2.84c-.07.37.239.696.588.622l2.682-.567a.492.492 0 0 0 .255-.145l4.778-5.06Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_envelope_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="m3.62 6.389 8.396 6.724 8.638-6.572-7.69-4.29a1.975 1.975 0 0 0-1.928 0L3.62 6.39Z" />
    <path
        d="m22 8.053-8.784 6.683a1.978 1.978 0 0 1-2.44-.031L2.02 7.693a1.091 1.091 0 0 0-.019.199v11.065C2 20.637 3.343 22 5 22h14c1.657 0 3-1.362 3-3.043V8.053Z" />
</svg>' %}

{% set icon_envelope = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M2.038 5.61A2.01 2.01 0 0 0 2 6v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6c0-.12-.01-.238-.03-.352l-.866.65-7.89 6.032a2 2 0 0 1-2.429 0L2.884 6.288l-.846-.677Z" />
    <path d="M20.677 4.117A1.996 1.996 0 0 0 20 4H4c-.225 0-.44.037-.642.105l.758.607L12 10.742 19.9 4.7l.777-.583Z" />
</svg>' %}

{% set icon_exclamation_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4a1 1 0 1 0-2 0v5a1 1 0 1 0 2 0V8Zm-1 7a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_eye_slash = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m4 15.6 3.055-3.056A4.913 4.913 0 0 1 7 12.012a5.006 5.006 0 0 1 5-5c.178.009.356.027.532.054l1.744-1.744A8.973 8.973 0 0 0 12 5.012c-5.388 0-10 5.336-10 7A6.49 6.49 0 0 0 4 15.6Z" />
    <path
        d="m14.7 10.726 4.995-5.007A.998.998 0 0 0 18.99 4a1 1 0 0 0-.71.305l-4.995 5.007a2.98 2.98 0 0 0-.588-.21l-.035-.01a2.981 2.981 0 0 0-3.584 3.583c0 .012.008.022.01.033.05.204.12.402.211.59l-4.995 4.983a1 1 0 1 0 1.414 1.414l4.995-4.983c.189.091.386.162.59.211.011 0 .021.007.033.01a2.982 2.982 0 0 0 3.584-3.584c0-.012-.008-.023-.011-.035a3.05 3.05 0 0 0-.21-.588Z" />
    <path
        d="m19.821 8.605-2.857 2.857a4.952 4.952 0 0 1-5.514 5.514l-1.785 1.785c.767.166 1.55.25 2.335.251 6.453 0 10-5.258 10-7 0-1.166-1.637-2.874-2.179-3.407Z" />
</svg>' %}

{% set icon_eye = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4.998 7.78C6.729 6.345 9.198 5 12 5c2.802 0 5.27 1.345 7.002 2.78a12.713 12.713 0 0 1 2.096 2.183c.253.344.465.682.618.997.14.286.284.658.284 1.04s-.145.754-.284 1.04a6.6 6.6 0 0 1-.618.997 12.712 12.712 0 0 1-2.096 2.183C17.271 17.655 14.802 19 12 19c-2.802 0-5.27-1.345-7.002-2.78a12.712 12.712 0 0 1-2.096-2.183 6.6 6.6 0 0 1-.618-.997C2.144 12.754 2 12.382 2 12s.145-.754.284-1.04c.153-.315.365-.653.618-.997A12.714 12.714 0 0 1 4.998 7.78ZM12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_filter = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M5.05 3C3.291 3 2.352 5.024 3.51 6.317l5.422 6.059v4.874c0 .472.227.917.613 1.2l3.069 2.25c1.01.742 2.454.036 2.454-1.2v-7.124l5.422-6.059C21.647 5.024 20.708 3 18.95 3H5.05Z" />
</svg>' %}

{% set icon_fire = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M8.597 3.2A1 1 0 0 0 7.04 4.289a3.49 3.49 0 0 1 .057 1.795 3.448 3.448 0 0 1-.84 1.575.999.999 0 0 0-.077.094c-.596.817-3.96 5.6-.941 10.762l.03.049a7.73 7.73 0 0 0 2.917 2.602 7.617 7.617 0 0 0 3.772.829 8.06 8.06 0 0 0 3.986-.975 8.185 8.185 0 0 0 3.04-2.864c1.301-2.2 1.184-4.556.588-6.441-.583-1.848-1.68-3.414-2.607-4.102a1 1 0 0 0-1.594.757c-.067 1.431-.363 2.551-.794 3.431-.222-2.407-1.127-4.196-2.224-5.524-1.147-1.39-2.564-2.3-3.323-2.788a8.487 8.487 0 0 1-.432-.287Z" />
</svg>' %}

{% set icon_flag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M13.09 3.294c1.924.95 3.422 1.69 5.472.692a1 1 0 0 1 1.438.9v9.54a1 1 0 0 1-.562.9c-2.981 1.45-5.382.24-7.25-.701a38.739 38.739 0 0 0-.622-.31c-1.033-.497-1.887-.812-2.756-.77-.76.036-1.672.357-2.81 1.396V21a1 1 0 1 1-2 0V4.971a1 1 0 0 1 .297-.71c1.522-1.506 2.967-2.185 4.417-2.255 1.407-.068 2.653.453 3.72.967.225.108.443.216.655.32Z" />
</svg>' %}

{% set icon_floppy_disk_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7.414A2 2 0 0 0 20.414 6L18 3.586A2 2 0 0 0 16.586 3H5Zm3 11a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v6H8v-6Zm1-7V5h6v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd" d="M14 17h-4v-2h4v2Z" clip-rule="evenodd" />
</svg>' %}

{% set icon_floppy_disk = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7.414A2 2 0 0 0 20.414 6L18 3.586A2 2 0 0 0 16.586 3H5Zm10 11a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7V5h8v2a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_gift_box = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M20 7h-.7c.229-.467.349-.98.351-1.5a3.5 3.5 0 0 0-3.5-3.5c-1.717 0-3.215 1.2-4.331 2.481C10.4 2.842 8.949 2 7.5 2A3.5 3.5 0 0 0 4 5.5c.003.52.123 1.033.351 1.5H4a2 2 0 0 0-2 2v2a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V9a2 2 0 0 0-2-2Zm-9.942 0H7.5a1.5 1.5 0 0 1 0-3c.9 0 2 .754 3.092 2.122-.219.337-.392.635-.534.878Zm6.1 0h-3.742c.933-1.368 2.371-3 3.739-3a1.5 1.5 0 0 1 0 3h.003ZM13 14h-2v8h2v-8Zm-4 0H4v6a2 2 0 0 0 2 2h3v-8Zm6 0v8h3a2 2 0 0 0 2-2v-6h-5Z" />
</svg>' %}

{% set icon_globe = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8.64 4.737A7.97 7.97 0 0 1 12 4a7.997 7.997 0 0 1 6.933 4.006h-.738c-.65 0-1.177.25-1.177.9 0 .33 0 2.04-2.026 2.008-1.972 0-1.972-1.732-1.972-2.008 0-1.429-.787-1.65-1.752-1.923-.374-.105-.774-.218-1.166-.411-1.004-.497-1.347-1.183-1.461-1.835ZM6 4a10.06 10.06 0 0 0-2.812 3.27A9.956 9.956 0 0 0 2 12c0 5.289 4.106 9.619 9.304 9.976l.054.004a10.12 10.12 0 0 0 1.155.007h.002a10.024 10.024 0 0 0 1.5-.19 9.925 9.925 0 0 0 2.259-.754 10.041 10.041 0 0 0 4.987-5.263A9.917 9.917 0 0 0 22 12a10.025 10.025 0 0 0-.315-2.5A10.001 10.001 0 0 0 12 2a9.964 9.964 0 0 0-6 2Zm13.372 11.113a2.575 2.575 0 0 0-.75-.112h-.217A3.405 3.405 0 0 0 15 18.405v1.014a8.027 8.027 0 0 0 4.372-4.307ZM12.114 20H12A8 8 0 0 1 5.1 7.95c.95.541 1.421 1.537 1.835 2.415.209.441.403.853.637 1.162.54.712 1.063 1.019 1.591 1.328.52.305 1.047.613 1.6 1.316 1.44 1.825 1.419 4.366 1.35 5.828Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_grid_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4.857 3A1.857 1.857 0 0 0 3 4.857v4.286C3 10.169 3.831 11 4.857 11h4.286A1.857 1.857 0 0 0 11 9.143V4.857A1.857 1.857 0 0 0 9.143 3H4.857Zm10 0A1.857 1.857 0 0 0 13 4.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 9.143V4.857A1.857 1.857 0 0 0 19.143 3h-4.286Zm-10 10A1.857 1.857 0 0 0 3 14.857v4.286C3 20.169 3.831 21 4.857 21h4.286A1.857 1.857 0 0 0 11 19.143v-4.286A1.857 1.857 0 0 0 9.143 13H4.857ZM18 14a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2v-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_grid = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4.857 3A1.857 1.857 0 0 0 3 4.857v4.286C3 10.169 3.831 11 4.857 11h4.286A1.857 1.857 0 0 0 11 9.143V4.857A1.857 1.857 0 0 0 9.143 3H4.857Zm10 0A1.857 1.857 0 0 0 13 4.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 9.143V4.857A1.857 1.857 0 0 0 19.143 3h-4.286Zm-10 10A1.857 1.857 0 0 0 3 14.857v4.286C3 20.169 3.831 21 4.857 21h4.286A1.857 1.857 0 0 0 11 19.143v-4.286A1.857 1.857 0 0 0 9.143 13H4.857Zm10 0A1.857 1.857 0 0 0 13 14.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 19.143v-4.286A1.857 1.857 0 0 0 19.143 13h-4.286Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_hammer = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M8.4 6.763c-.251.1-.383.196-.422.235L6.564 5.584l2.737-2.737c1.113-1.113 3.053-1.097 4.337.187l1.159 1.159a1 1 0 0 1 1.39.022l4.105 4.105a1 1 0 0 1 .023 1.39l1.345 1.346a1 1 0 0 1 0 1.415l-2.052 2.052a1 1 0 0 1-1.414 0l-1.346-1.346a1 1 0 0 1-1.323.039L11.29 8.983a1 1 0 0 1 .04-1.324l-.849-.848c-.18-.18-.606-.322-1.258-.25a3.271 3.271 0 0 0-.824.202Zm1.519 3.675L3.828 16.53a1 1 0 0 0 0 1.414l2.736 2.737a1 1 0 0 0 1.414 0l6.091-6.091-4.15-4.15Z" />
</svg>' %}

{% set icon_heart = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m12.75 20.66 6.184-7.098c2.677-2.884 2.559-6.506.754-8.705-.898-1.095-2.206-1.816-3.72-1.855-1.293-.034-2.652.43-3.963 1.442-1.315-1.012-2.678-1.476-3.973-1.442-1.515.04-2.825.76-3.724 1.855-1.806 2.201-1.915 5.823.772 8.706l6.183 7.097c.19.216.46.34.743.34a.985.985 0 0 0 .743-.34Z" />
</svg>' %}

{% set icon_home = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.293 3.293a1 1 0 0 1 1.414 0l6 6 2 2a1 1 0 0 1-1.414 1.414L19 12.414V19a2 2 0 0 1-2 2h-3a1 1 0 0 1-1-1v-3h-2v3a1 1 0 0 1-1 1H7a2 2 0 0 1-2-2v-6.586l-.293.293a1 1 0 0 1-1.414-1.414l2-2 6-6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_hourglass = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.5 3a1 1 0 0 0 0 2H7v2.333a3 3 0 0 0 .556 1.74l1.57 2.814A1.1 1.1 0 0 0 9.2 12a.998.998 0 0 0-.073.113l-1.57 2.814A3 3 0 0 0 7 16.667V19H5.5a1 1 0 1 0 0 2h13a1 1 0 1 0 0-2H17v-2.333a3 3 0 0 0-.56-1.745l-1.616-2.82a1 1 0 0 0-.067-.102 1 1 0 0 0 .067-.103l1.616-2.819A3 3 0 0 0 17 7.333V5h1.5a1 1 0 1 0 0-2h-13Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_image = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd" d="M13 10a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H14a1 1 0 0 1-1-1Z" clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12c0 .556-.227 1.06-.593 1.422A.999.999 0 0 1 20.5 20H4a2.002 2.002 0 0 1-2-2V6Zm6.892 12 3.833-5.356-3.99-4.322a1 1 0 0 0-1.549.097L4 12.879V6h16v9.95l-3.257-3.619a1 1 0 0 0-1.557.088L11.2 18H8.892Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_inbox_full = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.024 3.783A1 1 0 0 1 6 3h12a1 1 0 0 1 .976.783L20.802 12h-4.244a1.99 1.99 0 0 0-1.824 1.205 2.978 2.978 0 0 1-5.468 0A1.991 1.991 0 0 0 7.442 12H3.198l1.826-8.217ZM3 14v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5h-4.43a4.978 4.978 0 0 1-9.14 0H3Zm5-7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm0 2a1 1 0 0 0 0 2h8a1 1 0 1 0 0-2H8Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_inbox = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.024 3.783A1 1 0 0 1 6 3h12a1 1 0 0 1 .976.783L20.802 12h-4.244a1.99 1.99 0 0 0-1.824 1.205 2.978 2.978 0 0 1-5.468 0A1.991 1.991 0 0 0 7.442 12H3.198l1.826-8.217ZM3 14v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5h-4.43a4.978 4.978 0 0 1-9.14 0H3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_info_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.408-5.5a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM10 10a1 1 0 1 0 0 2h1v3h-1a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-1v-4a1 1 0 0 0-1-1h-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_keyboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V7Zm5.01 1H5v2.01h2.01V8Zm3 0H8v2.01h2.01V8Zm3 0H11v2.01h2.01V8Zm3 0H14v2.01h2.01V8Zm3 0H17v2.01h2.01V8Zm-12 3H5v2.01h2.01V11Zm3 0H8v2.01h2.01V11Zm3 0H11v2.01h2.01V11Zm3 0H14v2.01h2.01V11Zm3 0H17v2.01h2.01V11Zm-12 3H5v2.01h2.01V14ZM8 14l-.001 2 8.011.01V14H8Zm11.01 0H17v2.01h2.01V14Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_label = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M4 6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11.613a2 2 0 0 0 1.346-.52l4.4-4a2 2 0 0 0 0-2.96l-4.4-4A2 2 0 0 0 15.613 6H4Z" />
</svg>' %}

{% set icon_landmark = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M10.915 2.345a2 2 0 0 1 2.17 0l7 4.52A2 2 0 0 1 21 8.544V9.5a1.5 1.5 0 0 1-1.5 1.5H19v6h1a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2h1v-6h-.5A1.5 1.5 0 0 1 3 9.5v-.955a2 2 0 0 1 .915-1.68l7-4.52ZM17 17v-6h-2v6h2Zm-6-6h2v6h-2v-6Zm-2 6v-6H7v6h2Z"
        clip-rule="evenodd" />
    <path d="M2 21a1 1 0 0 1 1-1h18a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1Z" />
</svg>' %}

{% set icon_layers = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.005 10.19a1 1 0 0 1 1 1v.233l5.998 3.464L18 11.423v-.232a1 1 0 1 1 2 0V12a1 1 0 0 1-.5.866l-6.997 4.042a1 1 0 0 1-1 0l-6.998-4.042a1 1 0 0 1-.5-.866v-.81a1 1 0 0 1 1-1ZM5 15.15a1 1 0 0 1 1 1v.232l5.997 3.464 5.998-3.464v-.232a1 1 0 1 1 2 0v.81a1 1 0 0 1-.5.865l-6.998 4.042a1 1 0 0 1-1 0L4.5 17.824a1 1 0 0 1-.5-.866v-.81a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
    <path
        d="M12.503 2.134a1 1 0 0 0-1 0L4.501 6.17A1 1 0 0 0 4.5 7.902l7.002 4.047a1 1 0 0 0 1 0l6.998-4.04a1 1 0 0 0 0-1.732l-6.997-4.042Z" />
</svg>' %}

{% set icon_life_saver = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m7.4 3.736 3.43 3.429A5.046 5.046 0 0 1 12.133 7c.356.01.71.06 1.056.147l3.41-3.412a2.32 2.32 0 0 1 .451-.344A9.89 9.89 0 0 0 12.268 2a10.022 10.022 0 0 0-5.322 1.392c.165.095.318.211.454.344Zm11.451 1.54-.127-.127a.5.5 0 0 0-.706 0l-2.932 2.932c.03.023.05.054.078.077.237.194.454.41.651.645.033.038.077.067.11.107l2.926-2.927a.5.5 0 0 0 0-.707Zm-2.931 9.81c-.025.03-.058.052-.082.082a4.97 4.97 0 0 1-.633.639c-.04.036-.072.083-.115.117l2.927 2.927a.5.5 0 0 0 .707 0l.127-.127a.5.5 0 0 0 0-.707l-2.932-2.931Zm-1.443-4.763a3.037 3.037 0 0 0-1.383-1.1l-.012-.007a2.956 2.956 0 0 0-1-.213H12a2.964 2.964 0 0 0-2.122.893c-.285.29-.509.634-.657 1.013l-.009.016a2.96 2.96 0 0 0-.21 1 2.99 2.99 0 0 0 .488 1.716l.032.04a3.04 3.04 0 0 0 1.384 1.1l.012.007c.319.129.657.2 1 .213.393.015.784-.05 1.15-.192.012-.005.021-.013.033-.018a3.01 3.01 0 0 0 1.676-1.7v-.007a2.89 2.89 0 0 0 0-2.207 2.868 2.868 0 0 0-.27-.515c-.007-.012-.02-.025-.03-.039Zm6.137-3.373a2.53 2.53 0 0 1-.349.447l-3.426 3.426c.112.428.166.869.161 1.311a4.954 4.954 0 0 1-.148 1.054l3.413 3.412c.133.134.249.283.347.444A9.88 9.88 0 0 0 22 12.269a9.913 9.913 0 0 0-1.386-5.319ZM16.6 20.264l-3.42-3.421c-.386.1-.782.152-1.18.157h-.135c-.356-.01-.71-.06-1.056-.147L7.4 20.265a2.503 2.503 0 0 1-.444.347A9.884 9.884 0 0 0 11.732 22H12a9.9 9.9 0 0 0 5.044-1.388 2.515 2.515 0 0 1-.444-.348ZM3.735 16.6l3.426-3.426a4.608 4.608 0 0 1-.013-2.367L3.735 7.4a2.508 2.508 0 0 1-.349-.447 9.889 9.889 0 0 0 0 10.1 2.48 2.48 0 0 1 .35-.453Zm5.101-.758a4.959 4.959 0 0 1-.65-.645c-.034-.038-.078-.067-.11-.107L5.15 18.017a.5.5 0 0 0 0 .707l.127.127a.5.5 0 0 0 .706 0l2.932-2.933c-.029-.018-.049-.053-.078-.076Zm-.755-6.928c.03-.037.07-.063.1-.1.183-.22.383-.423.6-.609.046-.04.081-.092.128-.13L5.983 5.149a.5.5 0 0 0-.707 0l-.127.127a.5.5 0 0 0 0 .707l2.932 2.931Z" />
</svg>' %}

{% set icon_lightbulb = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M7.05 4.05A7 7 0 0 1 19 9c0 2.407-1.197 3.874-2.186 5.084l-.04.048C15.77 15.362 15 16.34 15 18a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1c0-1.612-.77-2.613-1.78-3.875l-.045-.056C6.193 12.842 5 11.352 5 9a7 7 0 0 1 2.05-4.95ZM9 21a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2h-4a1 1 0 0 1-1-1Zm1.586-13.414A2 2 0 0 1 12 7a1 1 0 1 0 0-2 4 4 0 0 0-4 4 1 1 0 0 0 2 0 2 2 0 0 1 .586-1.414Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_lock_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M15 7a2 2 0 1 1 4 0v4a1 1 0 1 0 2 0V7a4 4 0 0 0-8 0v3H5a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V7Zm-5 6a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-3a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_lock_time = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M10 5a2 2 0 0 0-2 2v3h2.4A7.48 7.48 0 0 0 8 15.5a7.48 7.48 0 0 0 2.4 5.5H5a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h1V7a4 4 0 1 1 8 0v1.15a7.446 7.446 0 0 0-1.943.685A.999.999 0 0 1 12 8.5V7a2 2 0 0 0-2-2Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M10 15.5a5.5 5.5 0 1 1 11 0 5.5 5.5 0 0 1-11 0Zm6.5-1.5a1 1 0 1 0-2 0v1.5a1 1 0 0 0 .293.707l1 1a1 1 0 0 0 1.414-1.414l-.707-.707V14Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_lock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 10V7a4 4 0 1 1 8 0v3h1a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h1Zm2-3a2 2 0 1 1 4 0v3h-4V7Zm2 6a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-3a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_mail_box = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M17 6h-2V5h1a1 1 0 1 0 0-2h-2a1 1 0 0 0-1 1v2h-.541A5.965 5.965 0 0 1 14 10v4a1 1 0 1 1-2 0v-4c0-2.206-1.794-4-4-4-.075 0-.148.012-.22.028C7.686 6.022 7.596 6 7.5 6A4.505 4.505 0 0 0 3 10.5V16a1 1 0 0 0 1 1h7v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3h5a1 1 0 0 0 1-1v-6c0-2.206-1.794-4-4-4Zm-9 8.5H7a1 1 0 1 1 0-2h1a1 1 0 1 1 0 2Z" />
</svg>' %}

{% set icon_map_pin_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.906 1.994a8.002 8.002 0 0 1 8.09 8.421 7.996 7.996 0 0 1-1.297 3.957.996.996 0 0 1-.133.204l-.108.129c-.178.243-.37.477-.573.699l-5.112 6.224a1 1 0 0 1-1.545 0L5.982 15.26l-.002-.002a18.146 18.146 0 0 1-.309-.38l-.133-.163a.999.999 0 0 1-.13-.202 7.995 7.995 0 0 1 6.498-12.518ZM15 9.997a3 3 0 1 1-5.999 0 3 3 0 0 1 5.999 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_map_pin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 9a7 7 0 1 1 8 6.93V21a1 1 0 1 1-2 0v-5.07A7.001 7.001 0 0 1 5 9Zm5.94-1.06A1.5 1.5 0 0 1 12 7.5a1 1 0 1 0 0-2A3.5 3.5 0 0 0 8.5 9a1 1 0 0 0 2 0c0-.398.158-.78.44-1.06Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_message_caption = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M3 6a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-6.616l-2.88 2.592C8.537 20.461 7 19.776 7 18.477V17H5a2 2 0 0 1-2-2V6Zm4 2a1 1 0 0 0 0 2h5a1 1 0 1 0 0-2H7Zm8 0a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2Zm-8 3a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H7Zm5 0a1 1 0 1 0 0 2h5a1 1 0 1 0 0-2h-5Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_message_dots = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M3 5.983C3 4.888 3.895 4 5 4h14c1.105 0 2 .888 2 1.983v8.923a1.992 1.992 0 0 1-2 1.983h-6.6l-2.867 2.7c-.955.899-2.533.228-2.533-1.08v-1.62H5c-1.105 0-2-.888-2-1.983V5.983Zm5.706 3.809a1 1 0 1 0-1.412 1.417 1 1 0 1 0 1.412-1.417Zm2.585.002a1 1 0 1 1 .003 1.414 1 1 0 0 1-.003-1.414Zm5.415-.002a1 1 0 1 0-1.412 1.417 1 1 0 1 0 1.412-1.417Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_messages = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h1v2a1 1 0 0 0 1.707.707L9.414 13H15a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H4Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M8.023 17.215c.033-.03.066-.062.098-.094L10.243 15H15a3 3 0 0 0 3-3V8h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-1v2a1 1 0 0 1-1.707.707L14.586 18H9a1 1 0 0 1-.977-.785Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_mobile_phone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V4Zm12 12V5H7v11h10Zm-5 1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_newspaper = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11.5c.07 0 .14-.007.207-.021.095.014.193.021.293.021h2a2 2 0 0 0 2-2V7a1 1 0 0 0-1-1h-1a1 1 0 1 0 0 2v11h-2V5a2 2 0 0 0-2-2H5Zm7 4a1 1 0 0 1 1-1h.5a1 1 0 1 1 0 2H13a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h.5a1 1 0 1 1 0 2H13a1 1 0 0 1-1-1Zm-6 4a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1ZM7 6a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H7Zm1 3V8h1v1H8Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_objects_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M5 3a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm14 18a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4ZM5 11a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H5Zm14 2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4Z" />
</svg>' %}

{% set icon_open_door = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M14 19V5h4a1 1 0 0 1 1 1v11h1a1 1 0 0 1 0 2h-6Z" />
    <path fill-rule="evenodd"
        d="M12 4.571a1 1 0 0 0-1.275-.961l-5 1.428A1 1 0 0 0 5 6v11H4a1 1 0 0 0 0 2h1.86l4.865 1.39A1 1 0 0 0 12 19.43V4.57ZM10 11a1 1 0 0 1 1 1v.5a1 1 0 0 1-2 0V12a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_open_sidebar_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M13 21h6c1.1046 0 2-.8954 2-2V5c0-1.10457-.8954-2-2-2h-6v18Z" />
    <path fill-rule="evenodd"
        d="M11 3H5c-1.10457 0-2 .89543-2 2v14c0 1.1046.89543 2 2 2h6V3Zm-5.70711 7.7071c-.39052-.3905-.39052-1.02368 0-1.41421.39053-.39052 1.02369-.39052 1.41422 0l1.99994 1.99991c.39052.3906.39052 1.0237 0 1.4142l-1.99994 2c-.39053.3905-1.02369.3905-1.41422 0-.39052-.3905-.39052-1.0237 0-1.4142l1.29284-1.2929-1.29284-1.2928Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_open_sidebar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M10 4H4c-1.10457 0-2 .89543-2 2v12c0 1.1046.89543 2 2 2h6V4ZM4.37868 9.29289c-.39052.39053-.39052 1.02371 0 1.41421l1.29283 1.2928-1.29283 1.2929c-.39052.3905-.39052 1.0237 0 1.4142.39052.3905 1.02369.3905 1.41421 0l1.99994-2c.39053-.3905.39053-1.0236 0-1.4142L5.79289 9.29289c-.39052-.39052-1.02369-.39052-1.41421 0Z"
        clip-rule="evenodd" />
    <path d="M12 20h8c1.1046 0 2-.8954 2-2V6c0-1.10457-.8954-2-2-2h-8v16Z" />
</svg>' %}

{% set icon_palette = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8.649 2.577A10.004 10.004 0 0 1 20.344 6.49a9.995 9.995 0 0 1 1.2 8.486l-.004.01-.005.015a2.958 2.958 0 0 1-2.836 2.001h-2.69a1.037 1.037 0 0 0-.95.68c-.047.13-.068.27-.06.409v.916A3.01 3.01 0 0 1 11.96 22a9.626 9.626 0 0 1-4.195-1l.009.005-.018-.009.01.004a10.1 10.1 0 0 1-5.716-7.996l-.001-.012a9.992 9.992 0 0 1 6.6-10.415Zm3.35 3.429a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12ZM8.53 7.518a1 1 0 0 0 0 2h.01a1 1 0 1 0 0-2h-.01Zm6.968 0a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM6.99 11.004a1 1 0 1 0 0 2H7a1 1 0 1 0 0-2h-.01Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_paper_plane = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 2a1 1 0 0 1 .932.638l7 18a1 1 0 0 1-1.326 1.281L13 19.517V13a1 1 0 1 0-2 0v6.517l-5.606 2.402a1 1 0 0 1-1.326-1.281l7-18A1 1 0 0 1 12 2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_pen_nib = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M15.514 3.293a1 1 0 0 0-1.415 0L12.151 5.24a.93.93 0 0 1 .056.052l6.5 6.5a.97.97 0 0 1 .052.056L20.707 9.9a1 1 0 0 0 0-1.415l-5.193-5.193ZM7.004 8.27l3.892-1.46 6.293 6.293-1.46 3.893a1 1 0 0 1-.603.591l-9.494 3.355a1 1 0 0 1-.98-.18l6.452-6.453a1 1 0 0 0-1.414-1.414l-6.453 6.452a1 1 0 0 1-.18-.98l3.355-9.494a1 1 0 0 1 .591-.603Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_pen = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M14 4.182A4.136 4.136 0 0 1 16.9 3c1.087 0 2.13.425 2.899 1.182A4.01 4.01 0 0 1 21 7.037c0 1.068-.43 2.092-1.194 2.849L18.5 11.214l-5.8-5.71 1.287-1.31.012-.012Zm-2.717 2.763L6.186 12.13l2.175 2.141 5.063-5.218-2.141-2.108Zm-6.25 6.886-1.98 5.849a.992.992 0 0 0 .245 1.026 1.03 1.03 0 0 0 1.043.242L10.282 19l-5.25-5.168Zm6.954 4.01 5.096-5.186-2.218-2.183-5.063 5.218 2.185 2.15Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_phone_hangup = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12.017 6.995c-2.306 0-4.534.408-6.215 1.507-1.737 1.135-2.788 2.944-2.797 5.451a4.8 4.8 0 0 0 .01.62c.015.193.047.512.138.763a2.557 2.557 0 0 0 2.579 1.677H7.31a2.685 2.685 0 0 0 2.685-2.684v-.645a.684.684 0 0 1 .684-.684h2.647a.686.686 0 0 1 .686.687v.645c0 .712.284 1.395.787 1.898.478.478 1.101.787 1.847.787h1.647a2.555 2.555 0 0 0 2.575-1.674c.09-.25.123-.57.137-.763.015-.2.022-.433.01-.617-.002-2.508-1.049-4.32-2.785-5.458-1.68-1.1-3.907-1.51-6.213-1.51Z" />
</svg>' %}

{% set icon_phone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M7.978 4a2.553 2.553 0 0 0-1.926.877C4.233 6.7 3.699 8.751 4.153 10.814c.44 1.995 1.778 3.893 3.456 5.572 1.68 1.679 3.577 3.018 5.57 3.459 2.062.456 4.115-.073 5.94-1.885a2.556 2.556 0 0 0 .001-3.861l-1.21-1.21a2.689 2.689 0 0 0-3.802 0l-.617.618a.806.806 0 0 1-1.14 0l-1.854-1.855a.807.807 0 0 1 0-1.14l.618-.62a2.692 2.692 0 0 0 0-3.803l-1.21-1.211A2.555 2.555 0 0 0 7.978 4Z" />
</svg>' %}

{% set icon_printer = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 3a2 2 0 0 0-2 2v3h12V5a2 2 0 0 0-2-2H8Zm-3 7a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h1v-4a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v4h1a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2H5Zm4 11a1 1 0 0 1-1-1v-4h8v4a1 1 0 0 1-1 1H9Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_question_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.008-3.018a1.502 1.502 0 0 1 2.522 1.159v.024a1.44 1.44 0 0 1-1.493 1.418 1 1 0 0 0-1.037.999V14a1 1 0 1 0 2 0v-.539a3.44 3.44 0 0 0 2.529-3.256 3.502 3.502 0 0 0-7-.255 1 1 0 0 0 2 .076c.014-.398.187-.774.48-1.044Zm.982 7.026a1 1 0 1 0 0 2H12a1 1 0 1 0 0-2h-.01Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_rocket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M20.337 3.664c.213.212.354.486.404.782.294 1.711.657 5.195-.906 6.76-1.77 1.768-8.485 5.517-10.611 6.683a.987.987 0 0 1-1.176-.173l-.882-.88-.877-.884a.988.988 0 0 1-.173-1.177c1.165-2.126 4.913-8.841 6.682-10.611 1.562-1.563 5.046-1.198 6.757-.904.296.05.57.191.782.404ZM5.407 7.576l4-.341-2.69 4.48-2.857-.334a.996.996 0 0 1-.565-1.694l2.112-2.111Zm11.357 7.02-.34 4-2.111 2.113a.996.996 0 0 1-1.69-.565l-.422-2.807 4.563-2.74Zm.84-6.21a1.99 1.99 0 1 1-3.98 0 1.99 1.99 0 0 1 3.98 0Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_ruler_combined = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1v3a1 1 0 1 1-2 0v-3h-1v3a1 1 0 1 1-2 0v-3h-1v3a1 1 0 1 1-2 0v-3H7a1 1 0 1 1 0-2h3v-1H7a1 1 0 1 1 0-2h3V8H7a1 1 0 0 1 0-2h3V5a2 2 0 0 0-2-2H5Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_search = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z" />
    <path fill-rule="evenodd"
        d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_server = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 5a2 2 0 0 0-2 2v3a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a2 2 0 0 0-2-2H5Zm9 2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H14Zm3 0a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17ZM3 17v-3a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm11-2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H14Zm3 0a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_share_nodes = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M17.5 3a3.5 3.5 0 0 0-3.456 4.06L8.143 9.704a3.5 3.5 0 1 0-.01 4.6l5.91 2.65a3.5 3.5 0 1 0 .863-1.805l-5.94-2.662a3.53 3.53 0 0 0 .002-.961l5.948-2.667A3.5 3.5 0 1 0 17.5 3Z" />
</svg>' %}

{% set icon_shield_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.644 3.066a1 1 0 0 1 .712 0l7 2.666A1 1 0 0 1 20 6.68a17.694 17.694 0 0 1-2.023 7.98 17.406 17.406 0 0 1-5.402 6.158 1 1 0 0 1-1.15 0 17.405 17.405 0 0 1-5.403-6.157A17.695 17.695 0 0 1 4 6.68a1 1 0 0 1 .644-.949l7-2.666Zm4.014 7.187a1 1 0 0 0-1.316-1.506l-3.296 2.884-.839-.838a1 1 0 0 0-1.414 1.414l1.5 1.5a1 1 0 0 0 1.366.046l4-3.5Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_shield = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M12.356 3.066a1 1 0 0 0-.712 0l-7 2.666A1 1 0 0 0 4 6.68a17.695 17.695 0 0 0 2.022 7.98 17.405 17.405 0 0 0 5.403 6.158 1 1 0 0 0 1.15 0 17.406 17.406 0 0 0 5.402-6.157A17.694 17.694 0 0 0 20 6.68a1 1 0 0 0-.644-.949l-7-2.666Z" />
</svg>' %}

{% set icon_star_half_stroke = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m13.001 19.927 2.896 1.773c1.52.93 3.405-.442 2.992-2.179l-1.06-4.452 3.468-2.978c1.353-1.162.633-3.382-1.142-3.525L15.603 8.2l-1.754-4.226A1.973 1.973 0 0 0 13 3v16.927ZM10.999 3c-.36.205-.663.53-.848.974L8.397 8.2l-4.552.366c-1.775.143-2.495 2.363-1.142 3.525l3.468 2.978-1.06 4.452c-.413 1.737 1.472 3.11 2.992 2.178l2.896-1.773V3Z" />
</svg>' %}

{% set icon_star_half = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M13 4.024v-.005c0-.053.002-.353-.217-.632a1.013 1.013 0 0 0-1.176-.315c-.192.076-.315.193-.35.225-.052.05-.094.1-.122.134a4.358 4.358 0 0 0-.31.457c-.207.343-.484.84-.773 1.375a168.719 168.719 0 0 0-1.606 3.074h-.002l-4.599.367c-1.775.14-2.495 2.339-1.143 3.488L6.17 15.14l-1.06 4.406c-.412 1.72 1.472 3.078 2.992 2.157l3.94-2.388c.592-.359.958-.996.958-1.692v-13.6Zm-2.002 0v.025-.025Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_star = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M13.849 4.22c-.684-1.626-3.014-1.626-3.698 0L8.397 8.387l-4.552.361c-1.775.14-2.495 2.331-1.142 3.477l3.468 2.937-1.06 4.392c-.413 1.713 1.472 3.067 2.992 2.149L12 19.35l3.897 2.354c1.52.918 3.405-.436 2.992-2.15l-1.06-4.39 3.468-2.938c1.353-1.146.633-3.336-1.142-3.477l-4.552-.36-1.754-4.17Z" />
</svg>' %}

{% set icon_swatchbook = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M20 14h-2.722L11 20.278a5.511 5.511 0 0 1-.9.722H20a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1ZM9 3H4a1 1 0 0 0-1 1v13.5a3.5 3.5 0 1 0 7 0V4a1 1 0 0 0-1-1ZM6.5 18.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2ZM19.132 7.9 15.6 4.368a1 1 0 0 0-1.414 0L12 6.55v9.9l7.132-7.132a1 1 0 0 0 0-1.418Z" />
</svg>' %}

{% set icon_t_shirt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5.833 5a5 5 0 0 1 3-1h6.334a5 5 0 0 1 3 1L21.1 7.2a1 1 0 0 1 .268 1.296l-2 3.5a1 1 0 0 1-1.382.361l-.986-.59V19a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-7.234l-.985.591a1 1 0 0 1-1.383-.36l-2-3.5A1 1 0 0 1 2.9 7.2L5.833 5ZM14 5h-4c0 .425.223.933.645 1.355.422.423.93.645 1.355.645.425 0 .933-.222 1.355-.645.423-.422.645-.93.645-1.355Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_table_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm0 8v6h7v-6H4Zm16 6h-7v-6h7v6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_table_row = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm2 8v-2h7v2H4Zm0 2v2h7v-2H4Zm9 2h7v-2h-7v2Zm7-4v-2h-7v2h7Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_tablet = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4c0-.975.718-2 1.875-2h12.25C19.282 2 20 3.025 20 4v16c0 .975-.718 2-1.875 2H5.875C4.718 22 4 20.975 4 20V4Zm7 13a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_teddy_bear = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M10.451 3.244C9.911 2.514 9.052 2 8.038 2 6.378 2 5 3.326 5 5c0 1.315.88 2.36 2.004 2.787a5.082 5.082 0 0 0 .177 1.55L6.08 9.65a2.868 2.868 0 0 0-.802 5.145A3.5 3.5 0 1 0 10.663 19h2.674a3.5 3.5 0 1 0 5.11-4.409 2.865 2.865 0 0 0-.954-4.953l-.696-.223a5.002 5.002 0 0 0 .2-1.588l-.001-.031C18.128 7.367 19 6.311 19 5c0-1.684-1.397-3-3.059-3-1.005 0-1.841.554-2.384 1.247A4.996 4.996 0 0 0 12 3c-.54 0-1.061.086-1.549.244ZM8.685 4.257c-.49.435-.895.964-1.184 1.56C7.193 5.624 7 5.304 7 5c0-.535.447-1 1.038-1a.99.99 0 0 1 .647.257ZM17 5c0 .31-.19.63-.497.824a5.017 5.017 0 0 0-1.174-1.555c.197-.169.423-.269.612-.269C16.553 4 17 4.475 17 5Zm-2 12.5a1.5 1.5 0 1 0 3 0 1.5 1.5 0 0 0-3 0Zm-9 0a1.5 1.5 0 1 0 3 0 1.5 1.5 0 0 0-3 0Zm5.043-10.012a.5.5 0 0 0-1 0v.01a.5.5 0 0 0 1 0v-.01Zm3.023.01a.5.5 0 0 0-1 0v.01a.5.5 0 1 0 1 0v-.01ZM13 9.052a1 1 0 1 0-2 0v.01a1 1 0 1 0 2 0v-.01Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_terminal = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M3 4a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H3Zm4.293 5.707a1 1 0 0 1 1.414-1.414l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L9.586 12 7.293 9.707ZM13 14a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_thumbtack = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M8 5v4.997a.31.31 0 0 1-.068.113c-.08.098-.213.207-.378.301-.947.543-1.713 1.54-2.191 2.488A6.237 6.237 0 0 0 4.82 14.4c-.1.48-.138 1.031.018 1.539C5.12 16.846 6.02 17 6.414 17H11v3a1 1 0 1 0 2 0v-3h4.586c.395 0 1.295-.154 1.575-1.061.156-.508.118-1.059.017-1.539a6.241 6.241 0 0 0-.541-1.5c-.479-.95-1.244-1.946-2.191-2.489a1.393 1.393 0 0 1-.378-.301.309.309 0 0 1-.068-.113V5h1a1 1 0 1 0 0-2H7a1 1 0 1 0 0 2h1Z" />
</svg>' %}

{% set icon_ticket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M4 5a2 2 0 0 0-2 2v2.5a1 1 0 0 0 1 1 1.5 1.5 0 1 1 0 3 1 1 0 0 0-1 1V17a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2.5a1 1 0 0 0-1-1 1.5 1.5 0 1 1 0-3 1 1 0 0 0 1-1V7a2 2 0 0 0-2-2H4Z" />
</svg>' %}

{% set icon_tracking = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9.166 19.986A.915.915 0 0 1 9 20H5a1 1 0 1 1 0-2h4c.057 0 .112.005.166.014a3.001 3.001 0 0 1 5.668 0A.915.915 0 0 1 15 18h4a1 1 0 1 1 0 2h-4c-.056 0-.112-.005-.166-.014a3.001 3.001 0 0 1-5.668 0ZM11 19a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z"
        clip-rule="evenodd" />
    <path
        d="M11.5 2.131a1 1 0 0 1 1 0l4.601 2.657c-.06.018-.12.044-.179.075L12.08 7.475 6.946 4.76 11.5 2.131ZM5.967 6.505v5.21a1 1 0 0 0 .5.866l4.57 2.638V9.186l-5.07-2.681Zm7.07 8.671 4.496-2.595a1 1 0 0 0 .5-.866v-5.2a1 1 0 0 1-.161.108l-4.835 2.608v5.945Z" />
</svg>' %}

{% set icon_trash_bin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8.586 2.586A2 2 0 0 1 10 2h4a2 2 0 0 1 2 2v2h3a1 1 0 1 1 0 2v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8a1 1 0 0 1 0-2h3V4a2 2 0 0 1 .586-1.414ZM10 6h4V4h-4v2Zm1 4a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Zm4 0a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_truck_clock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2.586 4.586A2 2 0 0 1 4 4h8a2 2 0 0 1 2 2h5a1 1 0 0 1 .894.553l2 4c.07.139.106.292.106.447v4a1 1 0 0 1-1 1h-.535a3.5 3.5 0 1 1-6.93 0h-3.07a3.5 3.5 0 1 1-6.93 0H3a1 1 0 0 1-1-1V6a2 2 0 0 1 .586-1.414ZM18.208 15.61a1.497 1.497 0 0 0-2.416 0 1.5 1.5 0 1 0 2.416 0Zm-10 0a1.498 1.498 0 0 0-2.416 0 1.5 1.5 0 1 0 2.416 0Zm5.79-7.612v2.02h5.396l-1-2.02h-4.396ZM9 8.667a1 1 0 1 0-2 0V10a1 1 0 0 0 .293.707l1.5 1.5a1 1 0 0 0 1.414-1.414L9 9.586v-.92Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_truck = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a2 2 0 0 0-2 2v9a1 1 0 0 0 1 1h.535a3.5 3.5 0 1 0 6.93 0h3.07a3.5 3.5 0 1 0 6.93 0H21a1 1 0 0 0 1-1v-4a.999.999 0 0 0-.106-.447l-2-4A1 1 0 0 0 19 6h-5a2 2 0 0 0-2-2H4Zm14.192 11.59.016.02a1.5 1.5 0 1 1-.016-.021Zm-10 0 .016.02a1.5 1.5 0 1 1-.016-.021Zm5.806-5.572v-2.02h4.396l1 2.02h-5.396Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_upload = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 3a1 1 0 0 1 .78.375l4 5a1 1 0 1 1-1.56 1.25L13 6.85V14a1 1 0 1 1-2 0V6.85L8.78 9.626a1 1 0 1 1-1.56-1.25l4-5A1 1 0 0 1 12 3ZM9 14v-1H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-4v1a3 3 0 1 1-6 0Zm8 2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_volume_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M15 6.037c0-1.724-1.978-2.665-3.28-1.562L7.638 7.933H6c-1.105 0-2 .91-2 2.034v4.066c0 1.123.895 2.034 2 2.034h1.638l4.082 3.458c1.302 1.104 3.28.162 3.28-1.562V6.037Z" />
    <path fill-rule="evenodd"
        d="M16.786 7.658a.988.988 0 0 1 1.414-.014A6.135 6.135 0 0 1 20 12c0 1.662-.655 3.17-1.715 4.27a.989.989 0 0 1-1.414.014 1.029 1.029 0 0 1-.014-1.437A4.085 4.085 0 0 0 18 12a4.085 4.085 0 0 0-1.2-2.904 1.029 1.029 0 0 1-.014-1.438Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_volume_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M13 6.037c0-1.724-1.978-2.665-3.28-1.562L5.638 7.933H4c-1.105 0-2 .91-2 2.034v4.066c0 1.123.895 2.034 2 2.034h1.638l4.082 3.458c1.302 1.104 3.28.162 3.28-1.562V6.037Z" />
    <path fill-rule="evenodd"
        d="M14.786 7.658a.988.988 0 0 1 1.414-.014A6.135 6.135 0 0 1 18 12c0 1.662-.655 3.17-1.715 4.27a.989.989 0 0 1-1.414.014 1.029 1.029 0 0 1-.014-1.437A4.085 4.085 0 0 0 16 12a4.085 4.085 0 0 0-1.2-2.904 1.029 1.029 0 0 1-.014-1.438Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M17.657 4.811a.988.988 0 0 1 1.414 0A10.224 10.224 0 0 1 22 12c0 2.807-1.12 5.35-2.929 7.189a.988.988 0 0 1-1.414 0 1.029 1.029 0 0 1 0-1.438A8.173 8.173 0 0 0 20 12a8.173 8.173 0 0 0-2.343-5.751 1.029 1.029 0 0 1 0-1.438Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_wand_magic_sparkles = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M17.44 3a1 1 0 0 1 .707.293l2.56 2.56a1 1 0 0 1 0 1.414L18.194 9.78 14.22 5.806l2.513-2.513A1 1 0 0 1 17.44 3Zm-4.634 4.22-9.513 9.513a1 1 0 0 0 0 1.414l2.56 2.56a1 1 0 0 0 1.414 0l9.513-9.513-3.974-3.974ZM6 6a1 1 0 0 1 1 1v1h1a1 1 0 0 1 0 2H7v1a1 1 0 1 1-2 0v-1H4a1 1 0 0 1 0-2h1V7a1 1 0 0 1 1-1Zm9 9a1 1 0 0 1 1 1v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 1 1 0-2h1v-1a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
    <path d="M19 13h-2v2h2v-2ZM13 3h-2v2h2V3Zm-2 2H9v2h2V5ZM9 3H7v2h2V3Zm12 8h-2v2h2v-2Zm0 4h-2v2h2v-2Z" />
</svg>' %}

{% set icon_window_restore = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 5a1 1 0 0 1 1-1h11a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-1a1 1 0 1 1 0-2h1V6H9a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M4 7a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2H4Zm0 11v-5.5h11V18H4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_window = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm16 7H4v7h16v-7ZM5 8a1 1 0 0 1 1-1h.01a1 1 0 0 1 0 2H6a1 1 0 0 1-1-1Zm4-1a1 1 0 0 0 0 2h.01a1 1 0 0 0 0-2H9Zm2 1a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_zoom_in = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm9-3a1 1 0 1 0-2 0v2H7a1 1 0 0 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2V7Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_zoom_out = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm4 0a1 1 0 0 0 1 1h6a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_backward_step = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd" d="M7 6a1 1 0 0 1 2 0v4l6.4-4.8A1 1 0 0 1 17 6v12a1 1 0 0 1-1.6.8L9 14v4a1 1 0 1 1-2 0V6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_camera_photo = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M7.5 4.586A2 2 0 0 1 8.914 4h6.172a2 2 0 0 1 1.414.586L17.914 6H19a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h1.086L7.5 4.586ZM10 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm2-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_caption = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm6.962 4.856a1.475 1.475 0 0 1 1.484.066A1 1 0 1 0 11.53 9.24a3.475 3.475 0 1 0-.187 5.955 1 1 0 1 0-.976-1.746 1.474 1.474 0 1 1-1.405-2.593Zm6.186 0a1.475 1.475 0 0 1 1.484.066 1 1 0 1 0 1.084-1.682 3.475 3.475 0 1 0-.187 5.955 1 1 0 1 0-.976-1.746 1.474 1.474 0 1 1-1.405-2.593Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_circle_pause = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9-3a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0V9Zm4 0a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0V9Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_clapperboard_play = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M19.003 3A2 2 0 0 1 21 5v2h-2V5.414L17.414 7h-2.828l2-2h-2.172l-2 2H9.586l2-2H9.414l-2 2H3V5a2 2 0 0 1 2-2h14.003ZM3 9v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9H3Zm2-2.414L6.586 5H5v1.586Zm4.553 4.52a1 1 0 0 1 1.047.094l4 3a1 1 0 0 1 0 1.6l-4 3A1 1 0 0 1 9 18v-6a1 1 0 0 1 .553-.894Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_computer_speaker = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 8a1 1 0 0 0-1 1v10H9a1 1 0 1 0 0 2h11a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-8Zm4 10a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z"
        clip-rule="evenodd" />
    <path fill-rule="evenodd"
        d="M5 3a2 2 0 0 0-2 2v6h6V9a3 3 0 0 1 3-3h8c.35 0 .687.06 1 .17V5a2 2 0 0 0-2-2H5Zm4 10H3v2a2 2 0 0 0 2 2h4v-4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_forward_step = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M17 6a1 1 0 1 0-2 0v4L8.6 5.2A1 1 0 0 0 7 6v12a1 1 0 0 0 1.6.8L15 14v4a1 1 0 1 0 2 0V6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_headphones = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 5a7 7 0 0 0-7 7v1.17c.313-.11.65-.17 1-.17h2a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H6a3 3 0 0 1-3-3v-6a9 9 0 0 1 18 0v6a3 3 0 0 1-3 3h-2a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h2c.35 0 .687.06 1 .17V12a7 7 0 0 0-7-7Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_incoming_call = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M6.97825 3.99999c-.3729 0-.74128.08169-1.07926.23934-.32394.15109-.61243.36845-.84696.63786-1.81892 1.82189-2.35302 3.87423-1.89899 5.93671.43916 1.9949 1.77747 3.8929 3.45642 5.572 1.67897 1.6791 3.57614 3.0176 5.57034 3.4591 2.0612.4563 4.1141-.0726 5.9396-1.8853.2705-.2348.4888-.524.6405-.8489.1581-.3387.2401-.7081.2401-1.0819 0-.3739-.082-.7432-.2401-1.0819-.1516-.3247-.3696-.6137-.6398-.8483l-1.2098-1.2106c-.5043-.5041-1.1879-.7872-1.9007-.7872-.7128 0-1.3968.2835-1.9011.7876l-.6178.6181c-.1512.1513-.3563.2363-.5701.2363-.2138 0-.4189-.085-.5701-.2363l-1.85336-1.8545c-.15117-.1513-.23609-.3565-.23609-.5704 0-.214.08493-.4192.23613-.5705l.61812-.61851c.5037-.50461.7867-1.18868.7867-1.90191s-.2833-1.39767-.7871-1.90228L8.90499 4.8778c-.23462-.26969-.5233-.48727-.84749-.63847-.33798-.15765-.70636-.23934-1.07925-.23934Z" />
    <path fill-rule="evenodd"
        d="M18.0299 8.98132c0 .55229-.4477 1-1 .99999l-3.03-.00002c-.5522 0-1-.44772-1-1V5.99995c0-.55229.4478-1 1-1 .5523 0 1 .44771 1 1v.58112l3.3184-3.29111c.3921-.38892 1.0253-.38631 1.4142.00582.3889.39213.3863 1.02529-.0058 1.4142l-3.2984 3.27133h.6016c.5523.00001 1 .44773 1 1.00001Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_list_music = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M17.316 4.052a.99.99 0 0 0-.9.14c-.262.19-.416.495-.416.82v8.566a4.573 4.573 0 0 0-2-.464c-1.99 0-4 1.342-4 3.443 0 2.1 2.01 3.443 4 3.443 1.99 0 4-1.342 4-3.443V6.801c.538.5 1 1.219 1 2.262 0 .56.448 1.013 1 1.013s1-.453 1-1.013c0-1.905-.956-3.18-1.86-3.942a6.391 6.391 0 0 0-1.636-.998 4 4 0 0 0-.166-.063l-.013-.005-.005-.002h-.002l-.002-.001ZM4 5.012c-.552 0-1 .454-1 1.013 0 .56.448 1.013 1 1.013h9c.552 0 1-.453 1-1.013 0-.559-.448-1.012-1-1.012H4Zm0 4.051c-.552 0-1 .454-1 1.013 0 .56.448 1.013 1 1.013h9c.552 0 1-.454 1-1.013 0-.56-.448-1.013-1-1.013H4Zm0 4.05c-.552 0-1 .454-1 1.014 0 .559.448 1.012 1 1.012h4c.552 0 1-.453 1-1.012 0-.56-.448-1.013-1-1.013H4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_microphone_slash = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="m15.506 14.097.994.995A3.989 3.989 0 0 0 17.975 12V9.011a.996.996 0 0 1 1.992 0v2.99a5.981 5.981 0 0 1-2.054 4.503l1.762 1.762a.996.996 0 1 1-1.408 1.408L4.325 5.733a.996.996 0 0 1 1.408-1.408L7.04 5.632a3.984 3.984 0 0 1 3.964-3.59h1.992c2.2 0 3.983 1.783 3.983 3.983v4.98a3.975 3.975 0 0 1-1.473 3.092ZM4.033 10.008a.996.996 0 1 1 1.992 0V12a3.99 3.99 0 0 0 3.984 3.984H12c.55 0 .996.446.996.996v2.988h1.992a.996.996 0 0 1 0 1.992H9.012a.996.996 0 0 1 0-1.992h1.992v-1.992h-.997a5.981 5.981 0 0 1-5.974-5.974v-1.993Z" />
</svg>' %}

{% set icon_microphone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 8a1 1 0 0 1 1 1v3a4.006 4.006 0 0 0 4 4h4a4.006 4.006 0 0 0 4-4V9a1 1 0 1 1 2 0v3.001A6.006 6.006 0 0 1 14.001 18H13v2h2a1 1 0 1 1 0 2H9a1 1 0 1 1 0-2h2v-2H9.999A6.006 6.006 0 0 1 4 12.001V9a1 1 0 0 1 1-1Z"
        clip-rule="evenodd" />
    <path d="M7 6a4 4 0 0 1 4-4h2a4 4 0 0 1 4 4v5a4 4 0 0 1-4 4h-2a4 4 0 0 1-4-4V6Z" />
</svg>' %}

{% set icon_missed_call = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M14.1673 10.687c-.3905-.3905-.3905-1.02367 0-1.41419l1.3869-1.38683-1.346-1.20257c-.4119-.36796-.4474-1.00013-.0795-1.41198.368-.41184 1.0002-.44742 1.412-.07945l1.4724 1.31553 1.4939-1.31935c.414-.36559 1.0459-.32639 1.4115.08757.3656.41395.3264 1.0459-.0876 1.4115l-1.3605 1.2016 1.4042 1.39843c.3913.38971.3927 1.02284.0029 1.41424-.3897.3913-1.0228.3926-1.4142.0029l-1.4525-1.44658-1.4293 1.42918c-.3905.3905-1.0236.3905-1.4142 0Z"
        clip-rule="evenodd" />
    <path
        d="M7.97825 5.00001c-.3729 0-.74128.08169-1.07926.23933-.32394.1511-.61243.36846-.84696.63787-1.81892 1.82188-2.35302 3.87423-1.89899 5.93669.43916 1.9949 1.77747 3.8929 3.45642 5.572 1.67897 1.6791 3.57614 3.0177 5.57034 3.4591 2.0612.4563 4.1141-.0726 5.9396-1.8853.2705-.2348.4888-.524.6405-.8489.1581-.3387.2401-.708.2401-1.0819 0-.3739-.082-.7432-.2401-1.0819-.1516-.3247-.3696-.6136-.6398-.8483l-1.2098-1.2106c-.5043-.504-1.1879-.7872-1.9007-.7872-.7128 0-1.3968.2835-1.9011.7876l-.6178.6182c-.1512.1512-.3563.2362-.5701.2362-.2138 0-.4189-.085-.5701-.2363l-1.8534-1.8545c-.1511-.1513-.2361-.3565-.2361-.5704 0-.214.085-.4192.2362-.5705l.6181-.6185c.5037-.5046.7867-1.18867.7867-1.9019 0-.71324-.2833-1.39767-.7871-1.90229L9.90499 5.87782c-.23462-.2697-.5233-.48727-.84749-.63848-.33798-.15764-.70636-.23933-1.07925-.23933Z" />
</svg>' %}

{% set icon_music_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M9.5 13C7.567 13 6 14.567 6 16.5S7.567 20 9.5 20s3.5-1.567 3.5-3.5S11.433 13 9.5 13Z" />
    <path fill-rule="evenodd"
        d="M11 5c0-.55228.4477-1 1-1 1.5438 0 3.3242.75435 4.5149 2.16836 1.2348 1.46632 1.7886 3.5834.9338 6.14784-.1747.524-.741.8071-1.2649.6325-.524-.1747-.8071-.741-.6325-1.2649.6452-1.93556.199-3.31848-.5662-4.22716C14.4407 6.8102 13.7107 6.37433 13 6.15825V16.5c0 .5523-.4477 1-1 1s-1-.4477-1-1V5Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_music = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M18.6216 3.21667c.2391.1897.3784.47817.3784.78334V15.6667c0 .0412-.0025.0818-.0073.1218.0048.0698.0073.1404.0073.2115 0 1.6569-1.3431 3-3 3s-3-1.3431-3-3 1.3431-3 3-3c.3506 0 .6872.0602 1 .1707V9.2602l-8 1.8667V18l-.00001.0032C8.99824 19.6586 7.65577 21 6 21c-1.65685 0-3-1.3431-3-3s1.34315-3 3-3c.35064 0 .68722.0602 1 .1707V6.33334c0-.46474.32018-.86823.77277-.97384l9.99953-2.33321c.1486-.03477.3012-.03465.4467-.00201.1427.03202.2783.09532.3964.18752.0021.00162.0041.00324.0062.00487Z" />
</svg>' %}

{% set icon_outgoing_call = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M6.97825 3.99999c-.3729 0-.74128.08169-1.07926.23933-.32394.1511-.61243.36846-.84696.63787-1.81892 1.82189-2.35302 3.87423-1.89899 5.93671.43916 1.9949 1.77747 3.8929 3.45642 5.572 1.67897 1.6791 3.57614 3.0176 5.57034 3.4591 2.0612.4563 4.1141-.0726 5.9396-1.8853.2705-.2348.4888-.524.6405-.8489.1581-.3387.2401-.7081.2401-1.0819 0-.3739-.082-.7432-.2401-1.0819-.1516-.3247-.3696-.6137-.6398-.8483l-1.2098-1.2106c-.5043-.5041-1.1879-.7872-1.9007-.7872-.7128 0-1.3968.2835-1.9011.7876l-.6178.6181c-.1512.1513-.3563.2363-.5701.2363-.2138 0-.4189-.085-.5701-.2363l-1.85336-1.8545c-.15117-.1513-.23609-.3565-.23609-.5704 0-.214.08493-.4192.23613-.5705l.61812-.61851c.5037-.50461.7867-1.18868.7867-1.90191s-.2833-1.39767-.7871-1.90228L8.90499 4.8778c-.23462-.26969-.5233-.48727-.84749-.63848-.33798-.15764-.70636-.23933-1.07925-.23933Z" />
    <path fill-rule="evenodd"
        d="M14.9925 3.99996c0-.55228.4477-.99999 1-.99999l3.03.00002c.5523 0 1 .44772 1 1v2.98135c0 .55228-.4478 1-1 1-.5523 0-1-.44772-1-1v-.58113l-3.3184 3.29112c-.3921.38887-1.0253.38627-1.4142-.00583-.3889-.39213-.3863-1.02529.0059-1.4142l3.2983-3.27133h-.6016c-.5523 0-1-.44772-1-1.00001Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_pause = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H8Zm7 0a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_play = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd" d="M8.6 5.2A1 1 0 0 0 7 6v12a1 1 0 0 0 1.6.8l8-6a1 1 0 0 0 0-1.6l-8-6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_rectangle_list = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm4.996 2a1 1 0 0 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 8a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Zm-4.004 3a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 11a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Zm-4.004 3a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 14a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_stop = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path d="M7 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H7Z" />
</svg>' %}

{% set icon_video_camera = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M14 7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7Zm2 9.387 4.684 1.562A1 1 0 0 0 22 17V7a1 1 0 0 0-1.316-.949L16 7.613v8.774Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_volume_mute = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path
        d="M5.707 4.293a1 1 0 0 0-1.414 1.414l14 14a1 1 0 0 0 1.414-1.414l-.004-.005C21.57 16.498 22 13.938 22 12a9.972 9.972 0 0 0-2.929-7.071 1 1 0 1 0-1.414 1.414A7.972 7.972 0 0 1 20 12c0 1.752-.403 3.636-1.712 4.873l-1.433-1.433C17.616 14.37 18 13.107 18 12c0-1.678-.69-3.197-1.8-4.285a1 1 0 1 0-1.4 1.428A3.985 3.985 0 0 1 16 12c0 .606-.195 1.335-.59 1.996L13 11.586V6.135c0-1.696-1.978-2.622-3.28-1.536L7.698 6.284l-1.99-1.991ZM4 8h.586L13 16.414v1.451c0 1.696-1.978 2.622-3.28 1.536L5.638 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2Z" />
</svg>' %}

{% set icon_font_color_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M19.9999 18.0661c0 1.6203-1.3431 2.9339-3 2.9339-1.6568 0-3-1.3136-3-2.9339 0-1.6204 3-6.0661 3-6.0661s3 4.4457 3 6.0661Z" />
    <path fill="currentColor" fill-rule="evenodd"
        d="M10.4817 7.52489 9.12238 10.9817H11.841l-1.3593-3.45681Zm3.7494 4.06961-2.7166-6.90843c-.3694-.93918-1.69627-.93917-2.06558 0L6.76269 11.5173c-.03333.0634-.06004.1309-.07922.2014l-1.28309 3.263h-.41869c-.55229 0-1 .4477-1 1s.44771 1 1 1h2.75c.55228 0 1-.4477 1-1s-.44772-1-1-1h-.18223l.78646-2h4.29158l.3676.9349c.2021.514.7826.7668 1.2966.5647.514-.2021.7668-.7826.5647-1.2966l-.6085-1.5473c-.0053-.0144-.0109-.0287-.0168-.0429Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_indent = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 6a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm0 12a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm1.65-9.76A1 1 0 0 0 5 9v6a1 1 0 0 0 1.65.76l3.5-3a1 1 0 0 0 0-1.52l-3.5-3ZM12 10a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_outdent = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 6a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm0 12a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm3.85-9.76A1 1 0 0 1 10.5 9v6a1 1 0 0 1-1.65.76l-3.5-3a1 1 0 0 1 0-1.52l3.5-3ZM12 10a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_paragraph = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8.5 4a4.5 4.5 0 0 0 0 9H11v6a1 1 0 1 0 2 0V6h2v13a1 1 0 1 0 2 0V6h2a1 1 0 1 0 0-2H8.5Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_quote = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M6 6a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a3 3 0 0 1-3 3H5a1 1 0 1 0 0 2h1a5 5 0 0 0 5-5V8a2 2 0 0 0-2-2H6Zm9 0a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a3 3 0 0 1-3 3h-1a1 1 0 1 0 0 2h1a5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_address_book = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M7 2a2 2 0 0 0-2 2v1a1 1 0 0 0 0 2v1a1 1 0 0 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H7Zm3 8a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm-1 7a3 3 0 0 1 3-3h2a3 3 0 0 1 3 3 1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_profile_card = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm10 5a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-8-5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm1.942 4a3 3 0 0 0-2.847 2.051l-.044.133-.004.012c-.042.126-.055.167-.042.195.006.013.02.023.038.039.032.025.08.064.146.155A1 1 0 0 0 6 17h6a1 1 0 0 0 .811-.415.713.713 0 0 1 .146-.155c.019-.016.031-.026.038-.04.014-.027 0-.068-.042-.194l-.004-.012-.044-.133A3 3 0 0 0 10.059 14H7.942Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_user_add = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M9 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4H7Zm8-1a1 1 0 0 1 1-1h1v-1a1 1 0 1 1 2 0v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 0 1-1-1Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_user_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 20a7.966 7.966 0 0 1-5.002-1.756l.002.001v-.683c0-1.794 1.492-3.25 3.333-3.25h3.334c1.84 0 3.333 1.456 3.333 3.25v.683A7.966 7.966 0 0 1 12 20ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10c0 5.5-4.44 9.963-9.932 10h-.138C6.438 21.962 2 17.5 2 12Zm10-5c-1.84 0-3.333 1.455-3.333 3.25S10.159 13.5 12 13.5c1.84 0 3.333-1.455 3.333-3.25S13.841 7 12 7Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_user_edit = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 8a4 4 0 1 1 7.796 1.263l-2.533 2.534A4 4 0 0 1 5 8Zm4.06 5H7a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h2.172a2.999 2.999 0 0 1-.114-1.588l.674-3.372a3 3 0 0 1 .82-1.533L9.06 13Zm9.032-5a2.907 2.907 0 0 0-2.056.852L9.967 14.92a1 1 0 0 0-.273.51l-.675 3.373a1 1 0 0 0 1.177 1.177l3.372-.675a1 1 0 0 0 .511-.273l6.07-6.07a2.91 2.91 0 0 0-.944-4.742A2.907 2.907 0 0 0 18.092 8Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_user_remove = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M5 8a4 4 0 1 1 8 0 4 4 0 0 1-8 0Zm-2 9a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v1a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-1Zm13-6a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_user_settings = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M17 10v1.126c.367.095.714.24 1.032.428l.796-.797 1.415 1.415-.797.796c.188.318.333.665.428 1.032H21v2h-1.126c-.095.367-.24.714-.428 1.032l.797.796-1.415 1.415-.796-.797a3.979 3.979 0 0 1-1.032.428V20h-2v-1.126a3.977 3.977 0 0 1-1.032-.428l-.796.797-1.415-1.415.797-.796A3.975 3.975 0 0 1 12.126 16H11v-2h1.126c.095-.367.24-.714.428-1.032l-.797-.796 1.415-1.415.796.797A3.977 3.977 0 0 1 15 11.126V10h2Zm.406 3.578.016.016c.354.358.574.85.578 1.392v.028a2 2 0 0 1-3.409 1.406l-.01-.012a2 2 0 0 1 2.826-2.83ZM5 8a4 4 0 1 1 7.938.703 7.029 7.029 0 0 0-3.235 3.235A4 4 0 0 1 5 8Zm4.29 5H7a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h6.101A6.979 6.979 0 0 1 9 15c0-.695.101-1.366.29-2Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_user = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4h-4Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_users_group = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M12 6a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7Zm-1.5 8a4 4 0 0 0-4 4 2 2 0 0 0 2 2h7a2 2 0 0 0 2-2 4 4 0 0 0-4-4h-3Zm6.82-3.096a5.51 5.51 0 0 0-2.797-6.293 3.5 3.5 0 1 1 2.796 6.292ZM19.5 18h.5a2 2 0 0 0 2-2 4 4 0 0 0-4-4h-1.1a5.503 5.503 0 0 1-.471.762A5.998 5.998 0 0 1 19.5 18ZM4 7.5a3.5 3.5 0 0 1 5.477-2.889 5.5 5.5 0 0 0-2.796 6.293A3.501 3.501 0 0 1 4 7.5ZM7.1 12H6a4 4 0 0 0-4 4 2 2 0 0 0 2 2h.5a5.998 5.998 0 0 1 3.071-5.238A5.505 5.505 0 0 1 7.1 12Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_users = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M8 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4H6Zm7.25-2.095c.478-.86.75-1.85.75-2.905a5.973 5.973 0 0 0-.75-2.906 4 4 0 1 1 0 5.811ZM15.466 20c.34-.588.535-1.271.535-2v-1a5.978 5.978 0 0 0-1.528-4H18a4 4 0 0 1 4 4v1a2 2 0 0 1-2 2h-4.535Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_moon_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M17 4c.5523 0 1 .44772 1 1v2h2c.5523 0 1 .44771 1 1 0 .55228-.4477 1-1 1h-2v2c0 .5523-.4477 1-1 1s-1-.4477-1-1V9h-2c-.5523 0-1-.44772-1-1s.4477-1 1-1h2V5c0-.55228.4477-1 1-1Z"
        clip-rule="evenodd" />
    <path
        d="M12.3224 4.68708c.2935-.31028.3575-.77266.1594-1.15098-.1981-.37832-.6146-.5891-1.0368-.52467-1.50847.2302-2.93175.83665-4.12869 1.76276-1.19717.92628-2.12732 2.1411-2.69465 3.52702-.56744 1.38618-.75115 2.89299-.53164 4.37079.2195 1.4776.83393 2.8711 1.77895 4.0436.9448 1.1722 2.18683 2.0826 3.60103 2.6449 1.414.5623 2.9539.7584 4.4683.57 1.5145-.1884 2.9549-.7551 4.1784-1.6475 1.2237-.8924 2.1892-2.0806 2.7972-3.4499.1723-.3879.0809-.8423-.2279-1.1335-.3089-.2911-.7679-.3556-1.145-.1608-.8631.4459-1.8291.6799-2.8118.6791h-.0018c-1.1598.0013-2.2925-.3234-3.2596-.931-.9667-.6074-1.7244-1.4697-2.1856-2.4779-.4611-1.00776-.6079-2.1209-.4243-3.20511.1835-1.08442.6905-2.09837 1.4645-2.91681Z" />
</svg>' %}

{% set icon_moon = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M11.675 2.015a.998.998 0 0 0-.403.011C6.09 2.4 2 6.722 2 12c0 5.523 4.477 10 10 10 4.356 0 8.058-2.784 9.43-6.667a1 1 0 0 0-1.02-1.33c-.08.006-.105.005-.127.005h-.001l-.028-.002A5.227 5.227 0 0 0 20 14a8 8 0 0 1-8-8c0-.952.121-1.752.404-2.558a.996.996 0 0 0 .096-.428V3a1 1 0 0 0-.825-.985Z"
        clip-rule="evenodd" />
</svg>' %}

{% set icon_sun = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
    viewBox="0 0 24 24">
    <path fill-rule="evenodd"
        d="M13 3a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0V3ZM6.343 4.929A1 1 0 0 0 4.93 6.343l1.414 1.414a1 1 0 0 0 1.414-1.414L6.343 4.929Zm12.728 1.414a1 1 0 0 0-1.414-1.414l-1.414 1.414a1 1 0 0 0 1.414 1.414l1.414-1.414ZM12 7a5 5 0 1 0 0 10 5 5 0 0 0 0-10Zm-9 4a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H3Zm16 0a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2ZM7.757 17.657a1 1 0 1 0-1.414-1.414l-1.414 1.414a1 1 0 1 0 1.414 1.414l1.414-1.414Zm9.9-1.414a1 1 0 0 0-1.414 1.414l1.414 1.414a1 1 0 0 0 1.414-1.414l-1.414-1.414ZM13 19a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2Z"
        clip-rule="evenodd" />
</svg>' %}
```

=== File: ./templates/default/settings/_ui_class.j2 ===
```jinja-html
{# _ui_class.j2 #}

{# frontpage styles #}
{% set body_classes = "flex flex-col min-h-full h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 transition-colors duration-300" %}
{% set main_clases = "flex-grow overflow-y-auto container mx-auto px-2 py-8" %}
{% set text_color = "text-gray-900 dark:text-white" %}
{% set hover_bg = "hover:bg-gray-100 dark:hover:bg-gray-700" %}
{% set bg_color = "bg-white dark:bg-gray-800" %}
{% set menu_bg_color = "bg-gray-100 dark:bg-gray-800" %}
{% set shadow = "shadow-md" %}
{% set rounded = "rounded-lg" %}
{% set padding = "p-6" %}
{% set container = "container mx-auto px-6 py-8" %}
{% set close_menu_button = "p-2 rounded-md text-gray-500 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" %}
{% set menu_link_style = "block py-2 px-4 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white rounded-md text-sm font-medium" %}

{# dashboard styles #}
{% set class_sidebar_menu = "flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group" %}
{% set input_bg_color = "bg-gray-50 dark:bg-gray-700" %}
{% set border_color = "border-gray-300 dark:border-gray-600" %}
{% set hover_bg_color = "hover:bg-gray-50 dark:hover:bg-gray-700" %}
{% set focus_ring_color = "focus:ring-indigo-500 dark:focus:ring-gray-500" %}
{% set button_bg_color = "bg-blue-600 hover:bg-blue-700" %}
{% set delete_button_bg_color = "bg-red-600 hover:bg-red-700" %}
{% set input_focus_bg_color = "focus:bg-white dark:focus:bg-gray-600" %}
{% set base_button_classes = "inline-flex justify-center rounded-md border shadow-sm px-4 py-2 text-sm font-medium focus:outline-none focus:ring-offset-2 focus:ring-offset-gray-100" %}
{% set base_input_classes = "mt-1 focus:ring-2 focus:border-indigo-300 block w-full shadow-sm text-sm border-gray-300 py-3 px-4 rounded-md dark:focus:border-gray-500" %}
{% set table_header_class = "px-4 py-3 text-left text-xs font-medium uppercase tracking-wider dark:text-gray-100" %}
{% set table_cell_class = "px-4 py-4 whitespace-nowrap text-sm" %}

```

=== File: ./templates/default/settings/_flowbite_ouline_icons.j2 ===
```jinja-html
{% set icon_angle_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 9-7 7-7-7" />
</svg>' %}

{% set icon_angle_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m15 19-7-7 7-7" />
</svg>' %}

{% set icon_angle_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 5 7 7-7 7" />
</svg>' %}

{% set icon_angle_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m5 15 7-7 7 7" />
</svg>' %}

{% set icon_arrow_down_to_bracket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 15v2a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3v-2m-8 1V4m0 12-4-4m4 4 4-4" />
</svg>' %}

{% set icon_arrow_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 19V5m0 14-4-4m4 4 4-4" />
</svg>' %}

{% set icon_arrow_left_to_bracket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16 12H4m12 0-4 4m4-4-4-4m3-4h2a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3h-2" />
</svg>' %}

{% set icon_arrow_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 12h14M5 12l4-4m-4 4 4 4" />
</svg>' %}

{% set icon_arrow_right_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16.153 19 21 12l-4.847-7H3l4.848 7L3 19h13.153Z" />
</svg>' %}

{% set icon_arrow_right_to_bracket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M20 12H8m12 0-4 4m4-4-4-4M9 4H7a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h2" />
</svg>' %}

{% set icon_arrow_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19 12H5m14 0-4 4m4-4-4-4" />
</svg>' %}

{% set icon_arrow_sort_letters = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7 4v16M7 4l3 3M7 4 4 7m9-3h6l-6 6h6m-6.5 10 3.5-7 3.5 7M14 18h4" />
</svg>' %}

{% set icon_arrow_up_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 20V7m0 13-4-4m4 4 4-4m4-12v13m0-13 4 4m-4-4-4 4" />
</svg>' %}

{% set icon_arrow_up_from_bracket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 15v2a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3v-2M12 4v12m0-12 4 4m-4-4L8 8" />
</svg>' %}

{% set icon_arrow_up_right_down_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16 4h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5" />
</svg>' %}

{% set icon_arrow_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 6v13m0-13 4 4m-4-4-4 4" />
</svg>' %}

{% set icon_arrows_repeat_count = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m16 4 3 3H5v3m3 10-3-3h14v-3m-9-2.5 2-1.5v4" />
</svg>' %}

{% set icon_arrows_repeat = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m16 10 3-3m0 0-3-3m3 3H5v3m3 4-3 3m0 0 3 3m-3-3h14v-3" />
</svg>' %}

{% set icon_caret_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7.119 8h9.762a1 1 0 0 1 .772 1.636l-4.881 5.927a1 1 0 0 1-1.544 0l-4.88-5.927A1 1 0 0 1 7.118 8Z" />
</svg>' %}

{% set icon_caret_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16 16.881V7.119a1 1 0 0 0-1.636-.772l-5.927 4.881a1 1 0 0 0 0 1.544l5.927 4.88a1 1 0 0 0 1.636-.77Z" />
</svg>' %}

{% set icon_caret_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 16.881V7.119a1 1 0 0 1 1.636-.772l5.927 4.881a1 1 0 0 1 0 1.544l-5.927 4.88A1 1 0 0 1 8 16.882Z" />
</svg>' %}

{% set icon_caret_sort = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m8 10 4-6 4 6H8Zm8 4-4 6-4-6h8Z" />
</svg>' %}

{% set icon_caret_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16.881 16H7.119a1 1 0 0 1-.772-1.636l4.881-5.927a1 1 0 0 1 1.544 0l4.88 5.927a1 1 0 0 1-.77 1.636Z" />
</svg>' %}

{% set icon_chevron_double_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m8 7 4 4 4-4m-8 6 4 4 4-4" />
</svg>' %}

{% set icon_chevron_double_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m17 16-4-4 4-4m-6 8-4-4 4-4" />
</svg>' %}

{% set icon_chevron_double_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m7 16 4-4-4-4m6 8 4-4-4-4" />
</svg>' %}

{% set icon_chevron_double_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m16 17-4-4-4 4m8-6-4-4-4 4" />
</svg>' %}

{% set icon_chevron_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m8 10 4 4 4-4" />
</svg>' %}

{% set icon_chevron_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m14 8-4 4 4 4" />
</svg>' %}

{% set icon_chevron_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m10 16 4-4-4-4" />
</svg>' %}

{% set icon_chevron_sort = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m8 15 4 4 4-4m0-6-4-4-4 4" />
</svg>' %}

{% set icon_chevron_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m16 14-4-4-4 4" />
</svg>' %}

{% set icon_compress = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 8h4V4m12 4h-4V4M4 16h4v4m12-4h-4v4" />
</svg>' %}

{% set icon_expand = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 4H4m0 0v4m0-4 5 5m7-5h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5m7 5h4m0 0v-4m0 4-5-5" />
</svg>' %}

{% set icon_forward = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4.248 19C3.22 15.77 5.275 8.232 12.466 8.232V6.079a1.025 1.025 0 0 1 1.644-.862l5.479 4.307a1.108 1.108 0 0 1 0 1.723l-5.48 4.307a1.026 1.026 0 0 1-1.643-.861v-2.154C5.275 13.616 4.248 19 4.248 19Z" />
</svg>' %}

{% set icon_minimize = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 9h4m0 0V5m0 4L4 4m15 5h-4m0 0V5m0 4 5-5M5 15h4m0 0v4m0-4-5 5m15-5h-4m0 0v4m0-4 5 5" />
</svg>' %}

{% set icon_redo = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M21 9H8a5 5 0 0 0 0 10h9m4-10-4-4m4 4-4 4" />
</svg>' %}

{% set icon_refresh = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17.651 7.65a7.131 7.131 0 0 0-12.68 3.15M18.001 4v4h-4m-7.652 8.35a7.13 7.13 0 0 0 12.68-3.15M6 20v-4h4" />
</svg>' %}

{% set icon_reply_all = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.757 6 3.24 10.95a1.05 1.05 0 0 0 0 1.549l5.611 5.088m5.73-3.214v1.615a.948.948 0 0 1-1.524.845l-5.108-4.251a1.1 1.1 0 0 1 0-1.646l5.108-4.251a.95.95 0 0 1 1.524.846v1.7c3.312 0 6 2.979 6 6.654v1.329a.7.7 0 0 1-1.345.353 5.174 5.174 0 0 0-4.652-3.191l-.003-.003Z" />
</svg>' %}

{% set icon_reply = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14.5 8.046H11V6.119c0-.921-.9-1.446-1.524-.894l-5.108 4.49a1.2 1.2 0 0 0 0 1.739l5.108 4.49c.624.556 1.524.027 1.524-.893v-1.928h2a3.023 3.023 0 0 1 3 3.046V19a5.593 5.593 0 0 0-1.5-10.954Z" />
</svg>' %}

{% set icon_share_all = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m15.141 6 5.518 4.95a1.05 1.05 0 0 1 0 1.549l-5.612 5.088m-6.154-3.214v1.615a.95.95 0 0 0 1.525.845l5.108-4.251a1.1 1.1 0 0 0 0-1.646l-5.108-4.251a.95.95 0 0 0-1.525.846v1.7c-3.312 0-6 2.979-6 6.654v1.329a.7.7 0 0 0 1.344.353 5.174 5.174 0 0 1 4.652-3.191l.004-.003Z" />
</svg>' %}

{% set icon_sort_horizontal = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 16h13M4 16l4-4m-4 4 4 4M20 8H7m13 0-4 4m4-4-4-4" />
</svg>' %}

{% set icon_sort = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 20V10m0 10-3-3m3 3 3-3m5-13v10m0-10 3 3m-3-3-3 3" />
</svg>' %}

{% set icon_undo = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 9h13a5 5 0 0 1 0 10H7M3 9l4-4M3 9l4 4" />
</svg>' %}

{% set icon_cart_plus_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 4h1.5L8 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm.75-3H7.5M11 7H6.312M17 4v6m-3-3h6" />
</svg>' %}

{% set icon_cart_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7h-1M8 7h-.688M13 5v4m-2-2h4" />
</svg>' %}

{% set icon_cart = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7H7.312" />
</svg>' %}

{% set icon_cash_register = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 18h14M5 18v3h14v-3M5 18l1-9h12l1 9M16 6v3m-4-3v3m-2-6h8v3h-8V3Zm-1 9h.01v.01H9V12Zm3 0h.01v.01H12V12Zm3 0h.01v.01H15V12Zm-6 3h.01v.01H9V15Zm3 0h.01v.01H12V15Zm3 0h.01v.01H15V15Z" />
</svg>' %}

{% set icon_cash = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M8 7V6a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1M3 18v-7a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm8-3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z" />
</svg>' %}

{% set icon_credit_card_plus_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 14h2m3 0h4m2 2h2m0 0h2m-2 0v2m0-2v-2m-5 4H4c-.55228 0-1-.4477-1-1V7c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v4M3 10h18" />
</svg>' %}

{% set icon_credit_card_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" stroke-width="2"
        d="M16.5 15v1.5m0 0V18m0-1.5H15m1.5 0H18M3 9V6a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v3M3 9v6a1 1 0 0 0 1 1h5M3 9h16m0 0v1M6 12h3m12 4.5a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0Z" />
</svg>' %}

{% set icon_credit_card = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 10h18M6 14h2m3 0h5M3 7v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Z" />
</svg>' %}

{% set icon_dollar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 17.345a4.76 4.76 0 0 0 2.558 1.618c2.274.589 4.512-.446 4.999-2.31.487-1.866-1.273-3.9-3.546-4.49-2.273-.59-4.034-2.623-3.547-4.488.486-1.865 2.724-2.899 4.998-2.31.982.236 1.87.793 2.538 1.592m-3.879 12.171V21m0-18v2.2" />
</svg>' %}

{% set icon_euro = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 10h9.231M6 14h9.231M18 5.086A5.95 5.95 0 0 0 14.615 4c-3.738 0-6.769 3.582-6.769 8s3.031 8 6.769 8A5.94 5.94 0 0 0 18 18.916" />
</svg>' %}

{% set icon_filter_dollar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m11.0001 18-.8536-.8536c-.0937-.0937-.1464-.2209-.1464-.3535v-4.4172c0-.2422-.08794-.4762-.24744-.6585L4.45127 5.6585C3.88551 5.01192 4.34469 4 5.20385 4H18.7547c.8658 0 1.3225 1.02544.7433 1.66896L16.5001 9m-2.5 9.3754c.3347.3615.7824.6134 1.2788.7195.4771.1584 1.0002.1405 1.464-.05.4638-.1906.8338-.5396 1.0356-.977.2462-.8286-.6363-1.7337-1.7735-1.9948-1.1372-.2611-2.016-1.1604-1.7735-1.9948.2016-.4375.5716-.7868 1.0354-.9774.4639-.1905.9871-.2082 1.4643-.0496.491.1045.9348.3517 1.2689.7067m-1.9397 5.41V20m0-8v.9771" />
</svg>' %}

{% set icon_receipt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 8h6m-6 4h6m-6 4h6M6 3v18l2-2 2 2 2-2 2 2 2-2 2 2V3l-2 2-2-2-2 2-2-2-2 2-2-2Z" />
</svg>' %}

{% set icon_sale_percent = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.891 15.107 15.11 8.89m-5.183-.52h.01m3.089 7.254h.01M14.08 3.902a2.849 2.849 0 0 0 2.176.902 2.845 2.845 0 0 1 2.94 2.94 2.849 2.849 0 0 0 .901 2.176 2.847 2.847 0 0 1 0 4.16 2.848 2.848 0 0 0-.901 2.175 2.843 2.843 0 0 1-2.94 2.94 2.848 2.848 0 0 0-2.176.902 2.847 2.847 0 0 1-4.16 0 2.85 2.85 0 0 0-2.176-.902 2.845 2.845 0 0 1-2.94-2.94 2.848 2.848 0 0 0-.901-2.176 2.848 2.848 0 0 1 0-4.16 2.849 2.849 0 0 0 .901-2.176 2.845 2.845 0 0 1 2.941-2.94 2.849 2.849 0 0 0 2.176-.901 2.847 2.847 0 0 1 4.159 0Z" />
</svg>' %}

{% set icon_scale_balanced = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5.5 21h13M12 21V7m0 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm2-1.8c3.073.661 2.467 2.8 5 2.8M5 8c3.359 0 2.192-2.115 5.012-2.793M7 9.556V7.75m0 1.806-1.95 4.393a.773.773 0 0 0 .37.962.785.785 0 0 0 .362.089h2.436a.785.785 0 0 0 .643-.335.776.776 0 0 0 .09-.716L7 9.556Zm10 0V7.313m0 2.243-1.95 4.393a.773.773 0 0 0 .37.962.786.786 0 0 0 .362.089h2.436a.785.785 0 0 0 .643-.335.775.775 0 0 0 .09-.716L17 9.556Z" />
</svg>' %}

{% set icon_shopping_bag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 10V6a3 3 0 0 1 3-3v0a3 3 0 0 1 3 3v4m3-2 .917 11.923A1 1 0 0 1 17.92 21H6.08a1 1 0 0 1-.997-1.077L6 8h12Z" />
</svg>' %}

{% set icon_store = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 12c.263 0 .524-.06.767-.175a2 2 0 0 0 .65-.491c.186-.21.333-.46.433-.734.1-.274.15-.568.15-.864a2.4 2.4 0 0 0 .586 1.591c.375.422.884.659 1.414.659.53 0 1.04-.237 1.414-.659A2.4 2.4 0 0 0 12 9.736a2.4 2.4 0 0 0 .586 1.591c.375.422.884.659 1.414.659.53 0 1.04-.237 1.414-.659A2.4 2.4 0 0 0 16 9.736c0 .295.052.588.152.861s.248.521.434.73a2 2 0 0 0 .649.488 1.809 1.809 0 0 0 1.53 0 2.03 2.03 0 0 0 .65-.488c.185-.209.332-.457.433-.73.1-.273.152-.566.152-.861 0-.974-1.108-3.85-1.618-5.121A.983.983 0 0 0 17.466 4H6.456a.986.986 0 0 0-.93.645C5.045 5.962 4 8.905 4 9.736c.023.59.241 1.148.611 1.567.37.418.865.667 1.389.697Zm0 0c.328 0 .651-.091.94-.266A2.1 2.1 0 0 0 7.66 11h.681a2.1 2.1 0 0 0 .718.734c.29.175.613.266.942.266.328 0 .651-.091.94-.266.29-.174.537-.427.719-.734h.681a2.1 2.1 0 0 0 .719.734c.289.175.612.266.94.266.329 0 .652-.091.942-.266.29-.174.536-.427.718-.734h.681c.183.307.43.56.719.734.29.174.613.266.941.266a1.819 1.819 0 0 0 1.06-.351M6 12a1.766 1.766 0 0 1-1.163-.476M5 12v7a1 1 0 0 0 1 1h2v-5h3v5h7a1 1 0 0 0 1-1v-7m-5 3v2h2v-2h-2Z" />
</svg>' %}

{% set icon_tag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15.583 8.445h.01M10.86 19.71l-6.573-6.63a.993.993 0 0 1 0-1.4l7.329-7.394A.98.98 0 0 1 12.31 4l5.734.007A1.968 1.968 0 0 1 20 5.983v5.5a.992.992 0 0 1-.316.727l-7.44 7.5a.974.974 0 0 1-1.384.001Z" />
</svg>' %}

{% set icon_user_headset = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14.079 6.839a3 3 0 0 0-4.255.1M13 20h1.083A3.916 3.916 0 0 0 18 16.083V9A6 6 0 1 0 6 9v7m7 4v-1a1 1 0 0 0-1-1h-1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1Zm-7-4v-6H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h1Zm12-6h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1v-6Z" />
</svg>' %}

{% set icon_wallet = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17 8H5m12 0a1 1 0 0 1 1 1v2.6M17 8l-4-4M5 8a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.6M5 8l4-4 4 4m6 4h-4a2 2 0 1 0 0 4h4a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1Z" />
</svg>' %}

{% set icon_book_open_reader = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M12.1429 11v9m0-9c-2.50543-.7107-3.19099-1.39543-6.13657-1.34968-.48057.00746-.86348.38718-.86348.84968v7.2884c0 .4824.41455.8682.91584.8617 2.77491-.0362 3.45995.6561 6.08421 1.3499m0-9c2.5053-.7107 3.1067-1.39542 6.0523-1.34968.4806.00746.9477.38718.9477.84968v7.2884c0 .4824-.4988.8682-1 .8617-2.775-.0362-3.3758.6561-6 1.3499m2-14c0 1.10457-.8955 2-2 2-1.1046 0-2-.89543-2-2s.8954-2 2-2c1.1045 0 2 .89543 2 2Z" />
</svg>' %}

{% set icon_chalkboard_user = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14.7141 15h4.268c.4043 0 .732-.3838.732-.8571V3.85714c0-.47338-.3277-.85714-.732-.85714H6.71411c-.55228 0-1 .44772-1 1v4m10.99999 7v-3h3v3h-3Zm-3 6H6.71411c-.55228 0-1-.4477-1-1 0-1.6569 1.34315-3 3-3h2.99999c1.6569 0 3 1.3431 3 3 0 .5523-.4477 1-1 1Zm-1-9.5c0 1.3807-1.1193 2.5-2.5 2.5s-2.49999-1.1193-2.49999-2.5S8.8334 9 10.2141 9s2.5 1.1193 2.5 2.5Z" />
</svg>' %}

{% set icon_chalkboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M20 14H4m6.5 3L8 20m5.5-3 2.5 3M4.88889 17H19.1111c.4909 0 .8889-.4157.8889-.9286V4.92857C20 4.41574 19.602 4 19.1111 4H4.88889C4.39797 4 4 4.41574 4 4.92857V16.0714c0 .5129.39797.9286.88889.9286ZM13 14v-3h4v3h-4Z" />
</svg>' %}

{% set icon_graduation_cap = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3.78552 9.5 12.7855 14l9-4.5-9-4.5-8.99998 4.5Zm0 0V17m3-6v6.2222c0 .3483 2 1.7778 5.99998 1.7778 4 0 6-1.3738 6-1.7778V11" />
</svg>' %}

{% set icon_laptop_code = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5.35709 16V5.78571c0-.43393.34822-.78571.77777-.78571H18.5793c.4296 0 .7778.35178.7778.78571V16M5.35709 16h-1c-.55229 0-1 .4477-1 1v1c0 .5523.44771 1 1 1H20.3571c.5523 0 1-.4477 1-1v-1c0-.5523-.4477-1-1-1h-1M5.35709 16H19.3571M9.35709 8l2.62501 2.5L9.35709 13m4.00001 0h2" />
</svg>' %}

{% set icon_laptop_file = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19.2857 7V5.78571c0-.43393-.3482-.78571-.7778-.78571H6.06345c-.42955 0-.77777.35178-.77777.78571V16m0 0h-1c-.55229 0-1 .4477-1 1v1c0 .5523.44771 1 1 1h5m-4-3h4m7.00002-6v3c0 .5523-.4477 1-1 1h-3m8-3v8c0 .5523-.4477 1-1 1h-6c-.5523 0-1-.4477-1-1v-5.397c0-.2536.0963-.4977.2696-.683l2.434-2.603c.189-.2022.4535-.317.7304-.317h3.566c.5523 0 1 .4477 1 1Z" />
</svg>' %}

{% set icon_microscope = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5.6427 21h14M16.2928 9c.8398.95515 1.3499 2.213 1.3499 3.5912 0 2.9872-2.3962 5.4088-5.3521 5.4088-1.9895 0-3.72545-1.097-4.6479-2.7251m-2-.2749h6m.4369-4.4369L10.6427 12m5.8092-5.76698 2.1554-2.15534M17.5296 3l2.1553 2.15534M10.6427 18v3m4-3v3m.7315-15.84464-4.3107 4.31068 2.1554 2.15536 4.3107-4.3107-2.1554-2.15534Z" />
</svg>' %}

{% set icon_person_chalkboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.5713 5h7v9h-7m-6.00001-4-3 4.5m3-4.5v5m0-5h3.00001m0 0h5m-5 0v5m-3.00001 0h3.00001m-3.00001 0v5m3.00001-5v5m6-6 2.5 6m-3-6-2.5 6m-3-14.5c0 .82843-.67158 1.5-1.50001 1.5-.82843 0-1.5-.67157-1.5-1.5s.67157-1.5 1.5-1.5 1.50001.67157 1.50001 1.5Z" />
</svg>' %}

{% set icon_school_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="m7.14284 11 4.99996-6 5 6m-9.99996 0h-3v8H20.1428v-8h-3m-9.99996 0H3.14285l3-4h4.33735l-3.33736 4Zm9.99996 0h4l-3-4h-4.3374l3.3374 4Zm-3 2c0 1.1046-.8954 2-2 2-1.1045 0-2-.8954-2-2s.8955-2 2-2c1.1046 0 2 .8954 2 2Z" />
</svg>' %}

{% set icon_school_check_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m7.28567 11 5.00003-6 5 6M7.28567 11h-3v8h8.00003m-5.00003-8H3.28568l3-4h4.33742l-3.33743 4Zm10.00003 0h3v1m-3-1h4l-3-4h-4.3374l3.3374 4Zm-2 6 2 2 4-4m-7-2c0 1.1046-.8955 2-2 2-1.1046 0-2-.8954-2-2s.8954-2 2-2c1.1045 0 2 .8954 2 2Z" />
</svg>' %}

{% set icon_school_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.14294 20v-9l-4 1.125V20h4Zm0 0V6.66667m0 13.33333h2.99996m5-9V6.66667m0 4.33333 4 1.125V13m-4-2v3m2-6-6-4-5.99996 4m4.99996 1h2m-2 3h2m1 6 2 2 4-4" />
</svg>' %}

{% set icon_school_exclamation_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17.4999 19H4.49988v-8h3m0 0 5.00002-6 5 6M7.49988 11H3.49989l3-4h4.33741l-3.33742 4Zm13.00002 8h.01m-.01-3v-3m-6.3374-6h4.3374l2 2.5m-6 3.5c0 1.1046-.8955 2-2 2-1.1046 0-2-.8954-2-2s.8954-2 2-2c1.1045 0 2 .8954 2 2Z" />
</svg>' %}

{% set icon_school_exclamation = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.07144 20v-9l-4 1.125V20h4Zm0 0h7.99996m-7.99996 0V6.66667M16.0714 20v-9l1.5.4219M16.0714 20h1m-1 0V6.66667m2 1.33333-6-4-5.99996 4m4.99996 1h2m-2 3h2m7 8h.01m-.01-3v-4" />
</svg>' %}

{% set icon_school_flag_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m7.4285 11 5-6 5 6m-10 0h-3v8h16v-8h-3m-10 0H3.42851l3-4h4.33739l-3.3374 4Zm10 0V7.5m-3 5.5c0 1.1046-.8954 2-2 2s-2-.8954-2-2 .8954-2 2-2 2 .8954 2 2Zm3-8v3h4V5h-4Z" />
</svg>' %}

{% set icon_school_flag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 20v-9l-4 1.125V20h4Zm0 0h8m-8 0V6.66667M16 20v-9l4 1.125V20h-4Zm0 0V7m0 0V4h4v3h-4ZM6 8l6-4 4 2.66667M11 9h2m-2 3h2" />
</svg>' %}

{% set icon_school_lock_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m7.35709 11 5.00001-6 3.3333 4m-8.33331 2h-3v8h7.00001m-4.00001-8H3.3571l3-4h4.3374l-3.33741 4Zm8.33131-2-1.6687-2h4.3374l1.5 2m-8.3237 5.8976c-1.0239-.4146-1.5178-1.5806-1.1032-2.6044.4146-1.0239 1.5806-1.5178 2.6044-1.1032M16.3571 15v-2.5c0-.8284.6716-1.5 1.5-1.5s1.5.6716 1.5 1.5V15m-4 0h5c.5523 0 1 .4477 1 1v2c0 .5523-.4477 1-1 1h-5c-.5523 0-1-.4477-1-1v-2c0-.5523.4477-1 1-1Z" />
</svg>' %}

{% set icon_school_lock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.21448 20v-9l-4 1.125V20h4Zm0 0V6.66667m0 13.33333h2.00002m6-11V6.66667m2 1.33333-6-4-6.00002 4m5.00002 1h2m-2 3h1m3 4v-2.5c0-.8284.6716-1.5 1.5-1.5s1.5.6716 1.5 1.5V16m-4 0h5c.5523 0 1 .4477 1 1v2c0 .5523-.4477 1-1 1h-5c-.5523 0-1-.4477-1-1v-2c0-.5523.4477-1 1-1Z" />
</svg>' %}

{% set icon_school_xmark_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m16.9757 15.4642 1.7677 1.7678m0 0 1.7678 1.7678m-1.7678-1.7678-1.7677 1.7678m1.7677-1.7678 1.7678-1.7678M7.21425 11l5.00005-6 5 6M7.21425 11h-3v8H13.294m-6.07975-8H3.21426l3-4h4.33744l-3.33745 4Zm10.00005 0h3v1.5574m-3-1.5574h3.9999l-3-4h-4.3373l3.3374 4Zm-3 2c0 1.1046-.8955 2-2 2-1.1046 0-2-.8954-2-2s.8954-2 2-2c1.1045 0 2 .8954 2 2Z" />
</svg>' %}

{% set icon_school_xmark = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.07141 20v-9l-4 1.125V20h4Zm0 0V6.66667m0 13.33333h3.99999m4-9V6.66667m0 4.33333 4 1.125V13m-4-2v2m2-5-6-4-5.99999 4m4.99999 1h2m-2 3h2m3.0148 4.4087 1.7678 1.7678m0 0 1.7678 1.7677m-1.7678-1.7677-1.7678 1.7677m1.7678-1.7677 1.7678-1.7678" />
</svg>' %}

{% set icon_school = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 20v-9l-4 1.125V20h4Zm0 0h8m-8 0V6.66667M16 20v-9l4 1.125V20h-4Zm0 0V6.66667M18 8l-6-4-6 4m5 1h2m-2 3h2" />
</svg>' %}

{% set icon_shapes = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M4.07141 14v6h5.99999v-6H4.07141Zm4.5-4h6.99999l-3.5-6-3.49999 6Zm7.99999 10c1.933 0 3.5-1.567 3.5-3.5s-1.567-3.5-3.5-3.5-3.5 1.567-3.5 3.5 1.567 3.5 3.5 3.5Z" />
</svg>' %}

{% set icon_theatre = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="m7.53316 11.8623.00957-.0029m5.58157 7.1424c-.5.515-.9195.8473-1.0611.8903-.4784.1454-5.42881-1.2797-6.23759-3.3305-.80878-2.0507-1.83058-5.8152-1.88967-6.2192-.0591-.40404 1.5599-1.72424 3.59722-2.61073m1.98839 8.05513c-.22637.262-.38955.5599-.55552.8474M13.4999 12c.5.5 1 1.049 2 1.049s1.5-.549 2-1.049m-4-4h.01m3.99 0h.01m-7.01-2.5c0-.28929 2.5-1.5 5-1.5s5 1.13645 5 1.5V12c0 1.9655-4.291 5-5 5-.7432 0-5-3.0345-5-5V5.5Z" />
</svg>' %}

{% set icon_user_graduate = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14.6144 7.19994c.3479.48981.5999 1.15357.5999 1.80006 0 1.6569-1.3432 3-3 3-1.6569 0-3.00004-1.3431-3.00004-3 0-.67539.22319-1.29865.59983-1.80006M6.21426 6v4m0-4 6.00004-3 6 3-6 2-2.40021-.80006M6.21426 6l3.59983 1.19994M6.21426 19.8013v-2.1525c0-1.6825 1.27251-3.3075 2.95093-3.6488l3.04911 2.9345 3-2.9441c1.7026.3193 3 1.9596 3 3.6584v2.1525c0 .6312-.5373 1.1429-1.2 1.1429H7.41426c-.66274 0-1.2-.5117-1.2-1.1429Z" />
</svg>' %}

{% set icon_face_explode = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" d="M12 17a2 2 0 0 1 2 2h-4a2 2 0 0 1 2-2Z" />
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.815 9H16.5a2 2 0 1 0-1.03-3.707A1.87 1.87 0 0 0 15.5 5 1.992 1.992 0 0 0 12 3.69 1.992 1.992 0 0 0 8.5 5c.002.098.012.196.03.293A2 2 0 1 0 7.5 9h3.388m2.927-.985v3.604M10.228 9v2.574M15 16h.01M9 16h.01m11.962-4.426a1.805 1.805 0 0 1-1.74 1.326 1.893 1.893 0 0 1-1.811-1.326 1.9 1.9 0 0 1-3.621 0 1.8 1.8 0 0 1-1.749 1.326 1.98 1.98 0 0 1-1.87-1.326A1.763 1.763 0 0 1 8.46 12.9a2.035 2.035 0 0 1-1.905-1.326A1.9 1.9 0 0 1 4.74 12.9 1.805 1.805 0 0 1 3 11.574V12a9 9 0 0 0 18 0l-.028-.426Z" />
</svg>' %}

{% set icon_face_grin_stars = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Z" />
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17 13c0 2.038-2.239 4.5-5 4.5S7 15.038 7 13c0 1.444 10 1.444 10 0Z" />
    <path fill="currentColor"
        d="m9 6.811.618 1.253 1.382.2-1 .975.236 1.377L9 9.966l-1.236.65L8 9.239l-1-.975 1.382-.2L9 6.811Zm6 0 .618 1.253 1.382.2-1 .975.236 1.377L15 9.966l-1.236.65L14 9.239l-1-.975 1.382-.2L15 6.811Z" />
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
        d="m9 6.811.618 1.253 1.382.2-1 .975.236 1.377L9 9.966l-1.236.65L8 9.239l-1-.975 1.382-.2L9 6.811Zm6 0 .618 1.253 1.382.2-1 .975.236 1.377L15 9.966l-1.236.65L14 9.239l-1-.975 1.382-.2L15 6.811Z" />
</svg>' %}

{% set icon_face_grin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14.99 9H15M8.99 9H9m12 3a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM7 13c0 1 .507 2.397 1.494 3.216a5.5 5.5 0 0 0 7.022 0C16.503 15.397 17 14 17 13c0 0-1.99 1-4.995 1S7 13 7 13Z" />
</svg>' %}

{% set icon_face_laugh = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 9h.01M8.99 9H9m12 3a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM6.6 13a5.5 5.5 0 0 0 10.81 0H6.6Z" />
</svg>' %}

{% set icon_thumbs_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17 13c-.889.086-1.416.543-2.156 1.057a22.322 22.322 0 0 0-3.958 5.084 1.6 1.6 0 0 1-.582.628 1.549 1.549 0 0 1-1.466.087 1.587 1.587 0 0 1-.537-.406 1.666 1.666 0 0 1-.384-1.279l1.389-4.114M17 13h3V6.5A1.5 1.5 0 0 0 18.5 5v0A1.5 1.5 0 0 0 17 6.5V13Zm-6.5 1H5.585c-.286 0-.372-.014-.626-.15a1.797 1.797 0 0 1-.637-.572 1.873 1.873 0 0 1-.215-1.673l2.098-6.4C6.462 4.48 6.632 4 7.88 4c2.302 0 4.79.943 6.67 1.475" />
</svg>' %}

{% set icon_thumbs_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7 11c.889-.086 1.416-.543 2.156-1.057a22.323 22.323 0 0 0 3.958-5.084 1.6 1.6 0 0 1 .582-.628 1.549 1.549 0 0 1 1.466-.087c.205.095.388.233.537.406a1.64 1.64 0 0 1 .384 1.279l-1.388 4.114M7 11H4v6.5A1.5 1.5 0 0 0 5.5 19v0A1.5 1.5 0 0 0 7 17.5V11Zm6.5-1h4.915c.286 0 .372.014.626.15.254.135.472.332.637.572a1.874 1.874 0 0 1 .215 1.673l-2.098 6.4C17.538 19.52 17.368 20 16.12 20c-2.303 0-4.79-.943-6.67-1.475" />
</svg>' %}

{% set icon_archive_arrow_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 11v5m0 0 2-2m-2 2-2-2M3 6v1a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Zm2 2v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8H5Z" />
</svg>' %}

{% set icon_clipboard_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 7 2 2 4-4m-5-9v4h4V3h-4Z" />
</svg>' %}

{% set icon_clipboard_clean = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-5-4v4h4V3h-4Z" />
</svg>' %}

{% set icon_clipboard_list = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-3 5h3m-6 0h.01M12 16h3m-6 0h.01M10 3v4h4V3h-4Z" />
</svg>' %}

{% set icon_clipboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 5h6m-6 4h6M10 3v4h4V3h-4Z" />
</svg>' %}

{% set icon_file_chart_bar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m4 10v-2m3 2v-6m3 6v-3m4-11v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m4 6 2 2 4-4m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_circle_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 9V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h4M9 3v4a1 1 0 0 1-1 1H4m11 6v4m-2-2h4m3 0a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z" />
</svg>' %}

{% set icon_file_clone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M15 4v3a1 1 0 0 1-1 1h-3m2 10v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-7.13a1 1 0 0 1 .24-.65L6.7 8.35A1 1 0 0 1 7.46 8H9m-1 4H4m16-7v10a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V7.87a1 1 0 0 1 .24-.65l2.46-2.87a1 1 0 0 1 .76-.35H19a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_code = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m5 4-2 2 2 2m4-4 2 2-2 2m5-12v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_copy_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M14 4v3a1 1 0 0 1-1 1h-3m4 10v1a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h2m11-3v10a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V7.87a1 1 0 0 1 .24-.65l2.46-2.87a1 1 0 0 1 .76-.35H18a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_copy = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M9 8v3a1 1 0 0 1-1 1H5m11 4h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-7a1 1 0 0 0-1 1v1m4 3v10a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-7.13a1 1 0 0 1 .24-.65L7.7 8.35A1 1 0 0 1 8.46 8H13a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_csv = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m2.665 9H6.647A1.647 1.647 0 0 1 5 15.353v-1.706A1.647 1.647 0 0 1 6.647 12h1.018M16 12l1.443 4.773L19 12m-6.057-.152-.943-.02a1.34 1.34 0 0 0-1.359 1.22 1.32 1.32 0 0 0 1.172 1.421l.536.059a1.273 1.273 0 0 1 1.226 1.718c-.2.571-.636.754-1.337.754h-1.13" />
</svg>' %}

{% set icon_file_doc = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m14 9.006h-.335a1.647 1.647 0 0 1-1.647-1.647v-1.706a1.647 1.647 0 0 1 1.647-1.647L19 12M5 12v5h1.375A1.626 1.626 0 0 0 8 15.375v-1.75A1.626 1.626 0 0 0 6.375 12H5Zm9 1.5v2a1.5 1.5 0 0 1-1.5 1.5v0a1.5 1.5 0 0 1-1.5-1.5v-2a1.5 1.5 0 0 1 1.5-1.5v0a1.5 1.5 0 0 1 1.5 1.5Z" />
</svg>' %}

{% set icon_file_export = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19 10V4a1 1 0 0 0-1-1H9.914a1 1 0 0 0-.707.293L5.293 7.207A1 1 0 0 0 5 7.914V20a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2M10 3v4a1 1 0 0 1-1 1H5m5 6h9m0 0-2-2m2 2-2 2" />
</svg>' %}

{% set icon_file_image = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor" d="M16 18H8l2.5-6 2 4 1.5-2 2 4Zm-1-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z" />
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 18h8l-2-4-1.5 2-2-4L8 18Zm7-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z" />
</svg>' %}

{% set icon_file_import = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 12V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-4m5-13v4a1 1 0 0 1-1 1H5m0 6h9m0 0-2-2m2 2-2 2" />
</svg>' %}

{% set icon_file_invoice = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m8-2h3m-3 3h3m-4 3v6m4-3H8M19 4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 12v6h8v-6H8Z" />
</svg>' %}

{% set icon_file_lines = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m4 8h6m-6-4h6m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_music = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m8 7.5V8s3 1 3 4m3-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-6 12c0 1.105-1.12 2-2.5 2S8 17.105 8 16s1.12-2 2.5-2 2.5.895 2.5 2Z" />
</svg>' %}

{% set icon_file_paste = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 20H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h2.429M7 8h3M8 8V4h4v2m4 0V5h-4m3 4v3a1 1 0 0 1-1 1h-3m9-3v9a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-6.397a1 1 0 0 1 .27-.683l2.434-2.603a1 1 0 0 1 .73-.317H19a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_pdf = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 17v-5h1.5a1.5 1.5 0 1 1 0 3H5m12 2v-5h2m-2 3h2M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m6 4v5h1.375A1.627 1.627 0 0 0 14 15.375v-1.75A1.627 1.627 0 0 0 12.375 12H11Z" />
</svg>' %}

{% set icon_file_pen = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 5V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5M9 3v4a1 1 0 0 1-1 1H4m11.383.772 2.745 2.746m1.215-3.906a2.089 2.089 0 0 1 0 2.953l-6.65 6.646L9 17.95l.739-3.692 6.646-6.646a2.087 2.087 0 0 1 2.958 0Z" />
</svg>' %}

{% set icon_file_ppt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 17v-5h1.5a1.5 1.5 0 1 1 0 3H5m6 2v-5h1.5a1.5 1.5 0 1 1 0 3H11m7-3v5m-1-5h2M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5" />
</svg>' %}

{% set icon_file_search = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m8 7.5 2.5 2.5M19 4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-5 9.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z" />
</svg>' %}

{% set icon_file_shield = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 9V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h6M9 3v4a1 1 0 0 1-1 1H4m11 13a11.426 11.426 0 0 1-3.637-3.99A11.139 11.139 0 0 1 10 11.833L15 10l5 1.833a11.137 11.137 0 0 1-1.363 5.176A11.425 11.425 0 0 1 15.001 21Z" />
</svg>' %}

{% set icon_file_video = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM9 12h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1Zm5.697 2.395v-.733l1.269-1.219v2.984l-1.268-1.032Z" />
</svg>' %}

{% set icon_file_word = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m4 4 1 5 2-3.333L14 17l1-5m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_file_zip = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-4 1h.01v.01H15V5Zm-2 2h.01v.01H13V7Zm2 2h.01v.01H15V9Zm-2 2h.01v.01H13V11Zm2 2h.01v.01H15V13Zm-2 2h.01v.01H13V15Zm2 2h.01v.01H15V17Zm-2 2h.01v.01H13V19Z" />
</svg>' %}

{% set icon_file = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z" />
</svg>' %}

{% set icon_folder_arrow_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.5 8H4m4 6h8m0 0-2-2m2 2-2 2M4 6v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z" />
</svg>' %}

{% set icon_folder_duplicate = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 11H4m15.5 5a.5.5 0 0 0 .5-.5V8a1 1 0 0 0-1-1h-3.75a1 1 0 0 1-.829-.44l-1.436-2.12a1 1 0 0 0-.828-.44H8a1 1 0 0 0-1 1M4 9v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1h-3.75a1 1 0 0 1-.829-.44L9.985 8.44A1 1 0 0 0 9.157 8H5a1 1 0 0 0-1 1Z" />
</svg>' %}

{% set icon_folder_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 19V6a1 1 0 0 1 1-1h4.032a1 1 0 0 1 .768.36l1.9 2.28a1 1 0 0 0 .768.36H16a1 1 0 0 1 1 1v1M3 19l3-8h15l-3 8H3Z" />
</svg>' %}

{% set icon_folder_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14 8H4m8 3.5v5M9.5 14h5M4 6v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z" />
</svg>' %}

{% set icon_folder = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.5 8H4m0-2v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z" />
</svg>' %}

{% set icon_add_column_after = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 5v14m8-7h-2m0 0h-2m2 0v2m0-2v-2M3 11h6m-6 4h6m11 4H4c-.55228 0-1-.4477-1-1V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v12c0 .5523-.4477 1-1 1Z" />
</svg>' %}

{% set icon_add_column_before = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 5v14m-8-7h2m0 0h2m-2 0v2m0-2v-2m12 1h-6m6 4h-6M4 19h16c.5523 0 1-.4477 1-1V6c0-.55228-.4477-1-1-1H4c-.55228 0-1 .44772-1 1v12c0 .5523.44772 1 1 1Z" />
</svg>' %}

{% set icon_adjustments_horizontal = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M20 6H10m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4m16 6h-2m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4m16 6H10m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4" />
</svg>' %}

{% set icon_adjustments_vertical = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M6 4v10m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v2m6-16v2m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v10m6-16v10m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v2" />
</svg>' %}

{% set icon_annotation = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7.556 8.5h8m-8 3.5H12m7.111-7H4.89a.896.896 0 0 0-.629.256.868.868 0 0 0-.26.619v9.25c0 .232.094.455.26.619A.896.896 0 0 0 4.89 16H9l3 4 3-4h4.111a.896.896 0 0 0 .629-.256.868.868 0 0 0 .26-.619v-9.25a.868.868 0 0 0-.26-.619.896.896 0 0 0-.63-.256Z" />
</svg>' %}

{% set icon_api_key = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M6.94318 11h-.85227l.96023-2.90909h1.07954L9.09091 11h-.85227l-.63637-2.10795h-.02272L6.94318 11Zm-.15909-1.14773h1.60227v.59093H6.78409v-.59093ZM9.37109 11V8.09091h1.25571c.2159 0 .4048.04261.5667.12784.162.08523.2879.20502.3779.35937.0899.15436.1349.33476.1349.5412 0 .20833-.0464.38873-.1392.54119-.0918.15246-.2211.26989-.3878.35229-.1657.0824-.3593.1236-.5809.1236h-.75003v-.61367h.59093c.0928 0 .1719-.0161.2372-.0483.0663-.03314.1169-.08002.152-.14062.036-.06061.054-.13211.054-.21449 0-.08334-.018-.15436-.054-.21307-.0351-.05966-.0857-.10511-.152-.13636-.0653-.0322-.1444-.0483-.2372-.0483h-.2784V11h-.78981Zm3.41481-2.90909V11h-.7898V8.09091h.7898Z" />
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M8.31818 2c-.55228 0-1 .44772-1 1v.72878c-.06079.0236-.12113.04809-.18098.07346l-.55228-.53789c-.38828-.37817-1.00715-.37817-1.39543 0L3.30923 5.09564c-.19327.18824-.30229.44659-.30229.71638 0 .26979.10902.52813.30229.71637l.52844.51468c-.01982.04526-.03911.0908-.05785.13662H3c-.55228 0-1 .44771-1 1v2.58981c0 .5523.44772 1 1 1h.77982c.01873.0458.03802.0914.05783.1366l-.52847.5147c-.19327.1883-.30228.4466-.30228.7164 0 .2698.10901.5281.30228.7164l1.88026 1.8313c.38828.3781 1.00715.3781 1.39544 0l.55228-.5379c.05987.0253.12021.0498.18102.0734v.7288c0 .5523.44772 1 1 1h2.65912c.5523 0 1-.4477 1-1v-.7288c.1316-.0511.2612-.1064.3883-.1657l.5435.2614v.4339c0 .5523.4477 1 1 1H14v.0625c0 .5523.4477 1 1 1h.0909v.0625c0 .5523.4477 1 1 1h.6844l.4952.4823c1.1648 1.1345 3.0214 1.1345 4.1863 0l.2409-.2347c.1961-.191.3053-.454.3022-.7277-.0031-.2737-.1183-.5342-.3187-.7207l-6.2162-5.7847c.0173-.0398.0342-.0798.0506-.12h.7799c.5522 0 1-.4477 1-1V8.17969c0-.55229-.4478-1-1-1h-.7799c-.0187-.04583-.038-.09139-.0578-.13666l.5284-.51464c.1933-.18824.3023-.44659.3023-.71638 0-.26979-.109-.52813-.3023-.71637l-1.8803-1.8313c-.3883-.37816-1.0071-.37816-1.3954 0l-.5523.53788c-.0598-.02536-.1201-.04985-.1809-.07344V3c0-.55228-.4477-1-1-1H8.31818Z" />
</svg>' %}

{% set icon_archive = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M10 12v1h4v-1m4 7H6a1 1 0 0 1-1-1V9h14v9a1 1 0 0 1-1 1ZM4 5h16a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_arrow_up_right_from_square = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 14v4.833A1.166 1.166 0 0 1 16.833 20H5.167A1.167 1.167 0 0 1 4 18.833V7.167A1.166 1.166 0 0 1 5.167 6h4.618m4.447-2H20v5.768m-7.889 2.121 7.778-7.778" />
</svg>' %}

{% set icon_atom = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M8.737 8.737a21.49 21.49 0 0 1 3.308-2.724m0 0c3.063-2.026 5.99-2.641 7.331-1.3 1.827 1.828.026 6.591-4.023 10.64-4.049 4.049-8.812 5.85-10.64 4.023-1.33-1.33-.736-4.218 1.249-7.253m6.083-6.11c-3.063-2.026-5.99-2.641-7.331-1.3-1.827 1.828-.026 6.591 4.023 10.64m3.308-9.34a21.497 21.497 0 0 1 3.308 2.724m2.775 3.386c1.985 3.035 2.579 5.923 1.248 7.253-1.336 1.337-4.245.732-7.295-1.275M14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z" />
</svg>' %}

{% set icon_award = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m7.171 12.906-2.153 6.411 2.672-.89 1.568 2.34 1.825-5.183m5.73-2.678 2.154 6.411-2.673-.89-1.568 2.34-1.825-5.183M9.165 4.3c.58.068 1.153-.17 1.515-.628a1.681 1.681 0 0 1 2.64 0 1.68 1.68 0 0 0 1.515.628 1.681 1.681 0 0 1 1.866 1.866c-.068.58.17 1.154.628 1.516a1.681 1.681 0 0 1 0 2.639 1.682 1.682 0 0 0-.628 1.515 1.681 1.681 0 0 1-1.866 1.866 1.681 1.681 0 0 0-1.516.628 1.681 1.681 0 0 1-2.639 0 1.681 1.681 0 0 0-1.515-.628 1.681 1.681 0 0 1-1.867-1.866 1.681 1.681 0 0 0-.627-1.515 1.681 1.681 0 0 1 0-2.64c.458-.361.696-.935.627-1.515A1.681 1.681 0 0 1 9.165 4.3ZM14 9a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z" />
</svg>' %}

{% set icon_badge_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m8.032 12 1.984 1.984 4.96-4.96m4.55 5.272.893-.893a1.984 1.984 0 0 0 0-2.806l-.893-.893a1.984 1.984 0 0 1-.581-1.403V7.04a1.984 1.984 0 0 0-1.984-1.984h-1.262a1.983 1.983 0 0 1-1.403-.581l-.893-.893a1.984 1.984 0 0 0-2.806 0l-.893.893a1.984 1.984 0 0 1-1.403.581H7.04A1.984 1.984 0 0 0 5.055 7.04v1.262c0 .527-.209 1.031-.581 1.403l-.893.893a1.984 1.984 0 0 0 0 2.806l.893.893c.372.372.581.876.581 1.403v1.262a1.984 1.984 0 0 0 1.984 1.984h1.262c.527 0 1.031.209 1.403.581l.893.893a1.984 1.984 0 0 0 2.806 0l.893-.893a1.985 1.985 0 0 1 1.403-.581h1.262a1.984 1.984 0 0 0 1.984-1.984V15.7c0-.527.209-1.031.581-1.403Z" />
</svg>' %}

{% set icon_ban = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="m6 6 12 12m3-6a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_barcode = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M2.9917 4.9834V18.917M9.96265 4.9834V18.917M15.9378 4.9834V18.917m2.9875-13.9336V18.917" />
    <path stroke="currentColor" stroke-linecap="round"
        d="M5.47925 4.4834V19.417m1.9917-14.9336V19.417M21.4129 4.4834V19.417M13.4461 4.4834V19.417" />
</svg>' %}

{% set icon_bars_from_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5 7h14M5 12h14M5 17h10" />
</svg>' %}

{% set icon_bars = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5 7h14M5 12h14M5 17h14" />
</svg>' %}

{% set icon_battery = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M2.98755 7.97095c0-.55229.44771-1 1-1H16.9253c.5523 0 1 .44771 1 1v7.95855c0 .5522-.4477 1-1 1H3.98755c-.55229 0-1-.4478-1-1V7.97095ZM20.9129 12.9419v-1.9834c0-.5523-.4478-1-1-1h-.9876c-.5523 0-1 .4477-1 1v1.9834c0 .5523.4477 1 1 1h.9876c.5522 0 1-.4477 1-1Z" />
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M5.9751 9.9585h8.9627v3.9834H5.9751V9.9585Z" />
</svg>' %}

{% set icon_bed = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 17v2M12 5.5V10m-6 7v2m15-2v-4c0-1.6569-1.3431-3-3-3H6c-1.65685 0-3 1.3431-3 3v4h18Zm-2-7V8c0-1.65685-1.3431-3-3-3H8C6.34315 5 5 6.34315 5 8v2h14Z" />
</svg>' %}

{% set icon_bell_active_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 5.365V3m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175 0 .593 0 1.193-.538 1.193H5.538c-.538 0-.538-.6-.538-1.193 0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.365Zm-8.134 5.368a8.458 8.458 0 0 1 2.252-5.714m14.016 5.714a8.458 8.458 0 0 0-2.252-5.714M8.54 17.901a3.48 3.48 0 0 0 6.92 0H8.54Z" />
</svg>' %}

{% set icon_bell_active = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m10.827 5.465-.435-2.324m.435 2.324a5.338 5.338 0 0 1 6.033 4.333l.331 1.769c.44 2.345 2.383 2.588 2.6 3.761.11.586.22 1.171-.31 1.271l-12.7 2.377c-.529.099-.639-.488-.749-1.074C5.813 16.73 7.538 15.8 7.1 13.455c-.219-1.169.218 1.162-.33-1.769a5.338 5.338 0 0 1 4.058-6.221Zm-7.046 4.41c.143-1.877.822-3.461 2.086-4.856m2.646 13.633a3.472 3.472 0 0 0 6.728-.777l.09-.5-6.818 1.277Z" />
</svg>' %}

{% set icon_bell_ring = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 5.464V3.099m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175C19 17.4 19 18 18.462 18H5.538C5 18 5 17.4 5 16.807c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.464ZM6 5 5 4M4 9H3m15-4 1-1m1 5h1M8.54 18a3.48 3.48 0 0 0 6.92 0H8.54Z" />
</svg>' %}

{% set icon_bell = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 5.365V3m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175 0 .593 0 1.292-.538 1.292H5.538C5 18 5 17.301 5 16.708c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.365ZM8.733 18c.094.852.306 1.54.944 2.112a3.48 3.48 0 0 0 4.646 0c.638-.572 1.236-1.26 1.33-2.112h-6.92Z" />
</svg>' %}

{% set icon_blender_phone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M20.283 8h-4.285m3.85 3h-3.85m4.061-6H11v11h8.27l1.715-9.847A.983.983 0 0 0 20.059 5ZM6.581 13.23h-.838A13.752 13.752 0 0 1 5.622 11c-.02-.745.02-1.49.12-2.23h1.04c.252 0 .496-.088.683-.245a.927.927 0 0 0 .329-.61l.2-1.872a.888.888 0 0 0-.045-.39.936.936 0 0 0-.212-.34 1.017 1.017 0 0 0-.341-.231A1.08 1.08 0 0 0 6.983 5h-2.06a1.27 1.27 0 0 0-.699.204 1.135 1.135 0 0 0-.442.543A15.066 15.066 0 0 0 3.007 11a15.656 15.656 0 0 0 .795 5.229c.165.462 1.342.771 1.864.771h1.116c.142 0 .283-.028.413-.082.13-.053.246-.132.341-.23a.936.936 0 0 0 .212-.34.889.889 0 0 0 .046-.391l-.201-1.873a.927.927 0 0 0-.33-.609 1.059 1.059 0 0 0-.682-.245ZM10 18v1h10v-1a2 2 0 0 0-2-2h-6a2 2 0 0 0-2 2Z" />
</svg>' %}

{% set icon_book_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 6.03v13m0-13c-2.819-.831-4.715-1.076-8.029-1.023A.99.99 0 0 0 3 6v11c0 .563.466 1.014 1.03 1.007 3.122-.043 5.018.212 7.97 1.023m0-13c2.819-.831 4.715-1.076 8.029-1.023A.99.99 0 0 1 21 6v11c0 .563-.466 1.014-1.03 1.007-3.122-.043-5.018.212-7.97 1.023" />
</svg>' %}

{% set icon_book = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 19V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v13H7a2 2 0 0 0-2 2Zm0 0a2 2 0 0 0 2 2h12M9 3v14m7 0v4" />
</svg>' %}

{% set icon_bookmark = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m17 21-5-4-5 4V3.889a.92.92 0 0 1 .244-.629.808.808 0 0 1 .59-.26h8.333a.81.81 0 0 1 .589.26.92.92 0 0 1 .244.63V21Z" />
</svg>' %}

{% set icon_booth_curtain = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M5 5v14m14 0V8h2M3 8h6m0-2v8.5858c0 .8909 1.0771 1.3371 1.7071.7071l.5858-.5858c.3905-.3905 1.0237-.3905 1.4142 0l.5858.5858c.3905.3905 1.0237.3905 1.4142 0l.5858-.5858c.3905-.3905 1.0237-.3905 1.4142 0l.5858.5858c.63.63 1.7071.1838 1.7071-.7071V6c0-.55228-.4477-1-1-1h-8c-.55229 0-1 .44772-1 1Z" />
</svg>' %}

{% set icon_brain = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 18.5A2.493 2.493 0 0 1 7.51 20H7.5a2.468 2.468 0 0 1-2.4-3.154 2.98 2.98 0 0 1-.85-5.274 2.468 2.468 0 0 1 .92-3.182 2.477 2.477 0 0 1 1.876-3.344 2.5 2.5 0 0 1 3.41-1.856A2.5 2.5 0 0 1 12 5.5m0 13v-13m0 13a2.493 2.493 0 0 0 4.49 1.5h.01a2.468 2.468 0 0 0 2.403-3.154 2.98 2.98 0 0 0 .847-5.274 2.468 2.468 0 0 0-.921-3.182 2.477 2.477 0 0 0-1.875-3.344A2.5 2.5 0 0 0 14.5 3 2.5 2.5 0 0 0 12 5.5m-8 5a2.5 2.5 0 0 1 3.48-2.3m-.28 8.551a3 3 0 0 1-2.953-5.185M20 10.5a2.5 2.5 0 0 0-3.481-2.3m.28 8.551a3 3 0 0 0 2.954-5.185" />
</svg>' %}

{% set icon_briefcase = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 7H5a2 2 0 0 0-2 2v4m5-6h8M8 7V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2m0 0h3a2 2 0 0 1 2 2v4m0 0v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6m18 0s-4 2-9 2-9-2-9-2m9-2h.01" />
</svg>' %}

{% set icon_bug = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 5 9 4V3m5 2 1-1V3m-3 6v11m0-11a5 5 0 0 1 5 5m-5-5a5 5 0 0 0-5 5m5-5a4.959 4.959 0 0 1 2.973 1H15V8a3 3 0 0 0-6 0v2h.027A4.959 4.959 0 0 1 12 9Zm-5 5H5m2 0v2a5 5 0 0 0 10 0v-2m2.025 0H17m-9.975 4H6a1 1 0 0 0-1 1v2m12-3h1.025a1 1 0 0 1 1 1v2M16 11h1a1 1 0 0 0 1-1V8m-9.975 3H7a1 1 0 0 1-1-1V8" />
</svg>' %}

{% set icon_building = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 4h12M6 4v16M6 4H5m13 0v16m0-16h1m-1 16H6m12 0h1M6 20H5M9 7h1v1H9V7Zm5 0h1v1h-1V7Zm-5 4h1v1H9v-1Zm5 0h1v1h-1v-1Zm-3 4h2a1 1 0 0 1 1 1v4h-4v-4a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_bullhorn = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M11 9H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h6m0-6v6m0-6 5.419-3.87A1 1 0 0 1 18 5.942v12.114a1 1 0 0 1-1.581.814L11 15m7 0a3 3 0 0 0 0-6M6 15h3v5H6v-5Z" />
</svg>' %}

{% set icon_calendar_edit = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m11.5 11.5 2.071 1.994M4 10h5m11 0h-1.5M12 7V4M7 7V4m10 3V4m-7 13H8v-2l5.227-5.292a1.46 1.46 0 0 1 2.065 2.065L10 17Zm-5 3h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_calendar_month = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 10h16m-8-3V4M7 7V4m10 3V4M5 20h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Zm3-7h.01v.01H8V13Zm4 0h.01v.01H12V13Zm4 0h.01v.01H16V13Zm-8 4h.01v.01H8V17Zm4 0h.01v.01H12V17Zm4 0h.01v.01H16V17Z" />
</svg>' %}

{% set icon_calendar_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M4 9.05H3v2h1v-2Zm16 2h1v-2h-1v2ZM10 14a1 1 0 1 0 0 2v-2Zm4 2a1 1 0 1 0 0-2v2Zm-3 1a1 1 0 1 0 2 0h-2Zm2-4a1 1 0 1 0-2 0h2Zm-2-5.95a1 1 0 1 0 2 0h-2Zm2-3a1 1 0 1 0-2 0h2Zm-7 3a1 1 0 0 0 2 0H6Zm2-3a1 1 0 1 0-2 0h2Zm8 3a1 1 0 1 0 2 0h-2Zm2-3a1 1 0 1 0-2 0h2Zm-13 3h14v-2H5v2Zm14 0v12h2v-12h-2Zm0 12H5v2h14v-2Zm-14 0v-12H3v12h2Zm0 0H3a2 2 0 0 0 2 2v-2Zm14 0v2a2 2 0 0 0 2-2h-2Zm0-12h2a2 2 0 0 0-2-2v2Zm-14-2a2 2 0 0 0-2 2h2v-2Zm-1 6h16v-2H4v2ZM10 16h4v-2h-4v2Zm3 1v-4h-2v4h2Zm0-9.95v-3h-2v3h2Zm-5 0v-3H6v3h2Zm10 0v-3h-2v3h2Z" />
</svg>' %}

{% set icon_calendar_week = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 10h16M8 14h8m-4-7V4M7 7V4m10 3V4M5 20h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_cell_attributes = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h8v-8m-9 4v-4m0 4h9m-9-4V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v4M3 11h11m6.25 5c0 1.2426-1.0073 2.25-2.25 2.25M20.25 16c0-1.2426-1.0073-2.25-2.25-2.25M20.25 16H21m-3 2.25c-1.2426 0-2.25-1.0074-2.25-2.25M18 18.25V19m-2.25-3c0-1.2426 1.0074-2.25 2.25-2.25M15.75 16H15m3-2.25V13m-1.591 1.409-.5303-.5303m4.2426 4.2426-.5303-.5303m-3.182 0-.5303.5303m4.2426-4.2426-.5303.5303" />
</svg>' %}

{% set icon_chart_line_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 4.5V19a1 1 0 0 0 1 1h15M7 10l4 4 4-4 5 5m0 0h-3.207M20 15v-3.207" />
</svg>' %}

{% set icon_chart_line_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 4.5V19a1 1 0 0 0 1 1h15M7 14l4-4 4 4 5-5m0 0h-3.207M20 9v3.207" />
</svg>' %}

{% set icon_chart_mixed_dollar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.6 16.733c.234.269.548.456.895.534a1.4 1.4 0 0 0 1.75-.762c.172-.615-.446-1.287-1.242-1.481-.796-.194-1.41-.861-1.241-1.481a1.4 1.4 0 0 1 1.75-.762c.343.077.654.26.888.524m-1.358 4.017v.617m0-5.939v.725M4 15v4m3-6v6M6 8.5 10.5 5 14 7.5 18 4m0 0h-3.5M18 4v3m2 8a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z" />
</svg>' %}

{% set icon_chart_mixed = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v4m6-6v6m6-4v4m6-6v6M3 11l6-5 6 5 5.5-5.5" />
</svg>' %}

{% set icon_chart_pie = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 6.025A7.5 7.5 0 1 0 17.975 14H10V6.025Z" />
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.5 3c-.169 0-.334.014-.5.025V11h7.975c.011-.166.025-.331.025-.5A7.5 7.5 0 0 0 13.5 3Z" />
</svg>' %}

{% set icon_chart = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 4v15a1 1 0 0 0 1 1h15M8 16l2.5-5.5 3 3L17.273 7 20 9.667" />
</svg>' %}

{% set icon_check_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.5 11.5 11 14l4-4m6 2a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_check_plus_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 21a9 9 0 1 1 0-18c1.052 0 2.062.18 3 .512M7 9.577l3.923 3.923 8.5-8.5M17 14v6m-3-3h6" />
</svg>' %}

{% set icon_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 11.917 9.724 16.5 19 7.5" />
</svg>' %}

{% set icon_circle_minus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7.757 12h8.486M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_circle_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 7.757v8.486M7.757 12h8.486M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_clock_arrow = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 8v4l3 3M3.22302 14C4.13247 18.008 7.71683 21 12 21c4.9706 0 9-4.0294 9-9 0-4.97056-4.0294-9-9-9-3.72916 0-6.92858 2.26806-8.29409 5.5M7 9H3V5" />
</svg>' %}

{% set icon_clock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_close_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m15 9-6 6m0-6 6 6m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_close_sidebar_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8.99994 10 7 11.9999l1.99994 2M12 5v14M5 4h14c.5523 0 1 .44772 1 1v14c0 .5523-.4477 1-1 1H5c-.55228 0-1-.4477-1-1V5c0-.55228.44772-1 1-1Z" />
</svg>' %}

{% set icon_close_sidebar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7.99994 10 6 11.9999l1.99994 2M11 5v14m-7 0h16c.5523 0 1-.4477 1-1V6c0-.55228-.4477-1-1-1H4c-.55228 0-1 .44772-1 1v12c0 .5523.44772 1 1 1Z" />
</svg>' %}

{% set icon_close = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 18 17.94 6M18 18 6.06 6" />
</svg>' %}

{% set icon_cloud_arrow_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 17h3a3 3 0 0 0 0-6h-.025a5.56 5.56 0 0 0 .025-.5A5.5 5.5 0 0 0 7.207 9.021C7.137 9.017 7.071 9 7 9a4 4 0 1 0 0 8h2.167M12 19v-9m0 0-2 2m2-2 2 2" />
</svg>' %}

{% set icon_code_branch = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 0a4 4 0 0 1-4 4h-1a3 3 0 0 0-3 3" />
</svg>' %}

{% set icon_code_fork = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 12v4m0 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4ZM8 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 0v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V8m0 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" />
</svg>' %}

{% set icon_code_merge = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm6-2a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 0h-1a5 5 0 0 1-5-5v-.5" />
</svg>' %}

{% set icon_code_pull_request = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm12 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0V9a3 3 0 0 0-3-3h-3m1.5-2-2 2 2 2" />
</svg>' %}

{% set icon_code = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14" />
</svg>' %}

{% set icon_cog = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M21 13v-2a1 1 0 0 0-1-1h-.757l-.707-1.707.535-.536a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0l-.536.535L14 4.757V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v.757l-1.707.707-.536-.535a1 1 0 0 0-1.414 0L4.929 6.343a1 1 0 0 0 0 1.414l.536.536L4.757 10H4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h.757l.707 1.707-.535.536a1 1 0 0 0 0 1.414l1.414 1.414a1 1 0 0 0 1.414 0l.536-.535 1.707.707V20a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-.757l1.707-.708.536.536a1 1 0 0 0 1.414 0l1.414-1.414a1 1 0 0 0 0-1.414l-.535-.536.707-1.707H20a1 1 0 0 0 1-1Z" />
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
</svg>' %}

{% set icon_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 5v14M9 5v14M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_command = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 8v8m0-8h8M8 8H6a2 2 0 1 1 2-2v2Zm0 8h8m-8 0H6a2 2 0 1 0 2 2v-2Zm8 0V8m0 8h2a2 2 0 1 1-2 2v-2Zm0-8h2a2 2 0 1 0-2-2v2Z" />
</svg>' %}

{% set icon_database = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19 6c0 1.657-3.134 3-7 3S5 7.657 5 6m14 0c0-1.657-3.134-3-7-3S5 4.343 5 6m14 0v6M5 6v6m0 0c0 1.657 3.134 3 7 3s7-1.343 7-3M5 12v6c0 1.657 3.134 3 7 3s7-1.343 7-3v-6" />
</svg>' %}

{% set icon_delete_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 5v14m-6-8h6m-6 4h6m4.506-1.494L15.012 12m0 0 1.506-1.506M15.012 12l1.506 1.506M15.012 12l-1.506-1.506M20 19H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1Z" />
</svg>' %}

{% set icon_delete_row = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h16c.5523 0 1-.4477 1-1v-3M3 15V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v9M3 15h18M8 15v4m4-4v4m4-4v4m-5.5061-7.4939L12 10m0 0 1.5061-1.50614M12 10l1.5061 1.5061M12 10l-1.5061-1.50614" />
</svg>' %}

{% set icon_delete_table = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h10.5M3 15v-4m0 4h11M3 11V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v5M3 11h18m0 0v1M8 11v8m4-8v8m4-8v2m1.8956 5.9528 1.5047-1.5047m0 0 1.5048-1.5048m-1.5048 1.5048 1.4605 1.4604m-1.4605-1.4604-1.4604-1.4605" />
</svg>' %}

{% set icon_desktop_pc = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 15v5m-3 0h6M4 11h16M5 15h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_dna = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15.041 13.862A4.999 4.999 0 0 1 17 17.831V21M7 3v3.169a5 5 0 0 0 1.891 3.916M17 3v3.169a5 5 0 0 1-2.428 4.288l-5.144 3.086A5 5 0 0 0 7 17.831V21M7 5h10M7.399 8h9.252M8 16h8.652M7 19h10" />
</svg>' %}

{% set icon_dots_horizontal = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="3" d="M6 12h.01m6 0h.01m5.99 0h.01" />
</svg>' %}

{% set icon_dots_vertical = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="3" d="M12 6h.01M12 12h.01M12 18h.01" />
</svg>' %}

{% set icon_download = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 13V4M7 14H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2m-1-5-4 5-4-5m9 8h.01" />
</svg>' %}

{% set icon_draw_square = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M11 6.5h2M11 18h2m-7-5v-2m12 2v-2M5 8h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm0 12h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm12 0h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm0-12h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_edit = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m14.304 4.844 2.852 2.852M7 7H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-4.5m2.409-9.91a2.017 2.017 0 0 1 0 2.853l-6.844 6.844L8 14l.713-3.565 6.844-6.844a2.015 2.015 0 0 1 2.852 0Z" />
</svg>' %}

{% set icon_envelope_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M21 8v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8m18 0-8.029-4.46a2 2 0 0 0-1.942 0L3 8m18 0-9 6.5L3 8" />
</svg>' %}

{% set icon_envelope = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="m3.5 5.5 7.893 6.036a1 1 0 0 0 1.214 0L20.5 5.5M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_exclamation_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 13V8m0 8h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_eye_slash = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3.933 13.909A4.357 4.357 0 0 1 3 12c0-1 4-6 9-6m7.6 3.8A5.068 5.068 0 0 1 21 12c0 1-3 6-9 6-.314 0-.62-.014-.918-.04M5 19 19 5m-4 7a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_eye = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2" d="M21 12c0 1.2-4.03 6-9 6s-9-4.8-9-6c0-1.2 4.03-6 9-6s9 4.8 9 6Z" />
    <path stroke="currentColor" stroke-width="2" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_filter = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M18.796 4H5.204a1 1 0 0 0-.753 1.659l5.302 6.058a1 1 0 0 1 .247.659v4.874a.5.5 0 0 0 .2.4l3 2.25a.5.5 0 0 0 .8-.4v-7.124a1 1 0 0 1 .247-.659l5.302-6.059c.566-.646.106-1.658-.753-1.658Z" />
</svg>' %}

{% set icon_fingerprint = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M21 12a28.076 28.076 0 0 1-1.091 9M7.231 4.37a8.994 8.994 0 0 1 12.88 3.73M2.958 15S3 14.577 3 12a8.949 8.949 0 0 1 1.735-5.307m12.84 3.088A5.98 5.98 0 0 1 18 12a30 30 0 0 1-.464 6.232M6 12a6 6 0 0 1 9.352-4.974M4 21a5.964 5.964 0 0 1 1.01-3.328 5.15 5.15 0 0 0 .786-1.926m8.66 2.486a13.96 13.96 0 0 1-.962 2.683M7.5 19.336C9 17.092 9 14.845 9 12a3 3 0 1 1 6 0c0 .749 0 1.521-.031 2.311M12 12c0 3 0 6-2 9" />
</svg>' %}

{% set icon_fire = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18.122 17.645a7.185 7.185 0 0 1-2.656 2.495 7.06 7.06 0 0 1-3.52.853 6.617 6.617 0 0 1-3.306-.718 6.73 6.73 0 0 1-2.54-2.266c-2.672-4.57.287-8.846.887-9.668A4.448 4.448 0 0 0 8.07 6.31 4.49 4.49 0 0 0 7.997 4c1.284.965 6.43 3.258 5.525 10.631 1.496-1.136 2.7-3.046 2.846-6.216 1.43 1.061 3.985 5.462 1.754 9.23Z" />
</svg>' %}

{% set icon_fix_tables = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h4v-4m-5 0v-4m0 4h5m-5-4V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v1.98935M3 11h5v4m9.4708 4.1718-.8696-1.4388-2.8164-.235-2.573-4.2573 1.4873-2.8362 1.4441 2.3893c.3865.6396 1.2183.8447 1.8579.4582.6396-.3866.8447-1.2184.4582-1.858l-1.444-2.38925h3.1353l2.6101 4.27715-1.0713 2.5847.8695 1.4388" />
</svg>' %}

{% set icon_flag = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 14v7M5 4.971v9.541c5.6-5.538 8.4 2.64 14-.086v-9.54C13.4 7.61 10.6-.568 5 4.97Z" />
</svg>' %}

{% set icon_floppy_disk_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M11 16h2m6.707-9.293-2.414-2.414A1 1 0 0 0 16.586 4H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7.414a1 1 0 0 0-.293-.707ZM16 20v-6a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v6h8ZM9 4h6v3a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1V4Z" />
</svg>' %}

{% set icon_floppy_disk = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M4 5a1 1 0 0 1 1-1h11.586a1 1 0 0 1 .707.293l2.414 2.414a1 1 0 0 1 .293.707V19a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5Z" />
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M8 4h8v4H8V4Zm7 10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_gift_box = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 21v-9m3-4H7.5a2.5 2.5 0 1 1 0-5c1.5 0 2.875 1.25 3.875 2.5M14 21v-9m-9 0h14v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-8ZM4 8h16a1 1 0 0 1 1 1v3H3V9a1 1 0 0 1 1-1Zm12.155-5c-3 0-5.5 5-5.5 5h5.5a2.5 2.5 0 0 0 0-5Z" />
</svg>' %}

{% set icon_globe = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M4.37 7.657c2.063.528 2.396 2.806 3.202 3.87 1.07 1.413 2.075 1.228 3.192 2.644 1.805 2.289 1.312 5.705 1.312 6.705M20 15h-1a4 4 0 0 0-4 4v1M8.587 3.992c0 .822.112 1.886 1.515 2.58 1.402.693 2.918.351 2.918 2.334 0 .276 0 2.008 1.972 2.008 2.026.031 2.026-1.678 2.026-2.008 0-.65.527-.9 1.177-.9H20M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_go_to_next_cell = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h9.5M3 15v-4m0 4h9m-9-4V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v5H3Zm5 0v8m4-8v8m7.0999-1.0999L21 16m0 0-1.9001-1.9001M21 16h-5" />
</svg>' %}

{% set icon_go_to_prev_cell = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h9.5M3 15v-4m0 4h9m-9-4V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v5H3Zm5 0v8m4-8v8m5.9001-1.0999L16 16m0 0 1.9001-1.9001M16 16h5" />
</svg>' %}

{% set icon_grid_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14 17h6m-3 3v-6M4.857 4h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857H4.857A.857.857 0 0 1 4 9.143V4.857C4 4.384 4.384 4 4.857 4Zm10 0h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857h-4.286A.857.857 0 0 1 14 9.143V4.857c0-.473.384-.857.857-.857Zm-10 10h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857H4.857A.857.857 0 0 1 4 19.143v-4.286c0-.473.384-.857.857-.857Z" />
</svg>' %}

{% set icon_grid = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9.143 4H4.857A.857.857 0 0 0 4 4.857v4.286c0 .473.384.857.857.857h4.286A.857.857 0 0 0 10 9.143V4.857A.857.857 0 0 0 9.143 4Zm10 0h-4.286a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286A.857.857 0 0 0 20 9.143V4.857A.857.857 0 0 0 19.143 4Zm-10 10H4.857a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286a.857.857 0 0 0 .857-.857v-4.286A.857.857 0 0 0 9.143 14Zm10 0h-4.286a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286a.857.857 0 0 0 .857-.857v-4.286a.857.857 0 0 0-.857-.857Z" />
</svg>' %}

{% set icon_hammer = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="m20.9532 11.7634-2.0523-2.05225-2.0523 2.05225 2.0523 2.0523 2.0523-2.0523Zm-1.3681-2.73651-4.1046-4.10457L12.06 8.3428l4.1046 4.1046 3.4205-3.42051Zm-4.1047 2.73651-2.7363-2.73638-8.20919 8.20918 2.73639 2.7364 8.2091-8.2092Z" />
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="m12.9306 3.74083 1.8658 1.86571-2.0523 2.05229-1.5548-1.55476c-.995-.99505-3.23389-.49753-3.91799.18657l2.73639-2.73639c.6841-.68409 1.9901-.74628 2.9229.18658Z" />
</svg>' %}

{% set icon_heart = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z" />
</svg>' %}

{% set icon_home = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m4 12 8-8 8 8M6 10.5V19a1 1 0 0 0 1 1h3v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3h3a1 1 0 0 0 1-1v-8.5" />
</svg>' %}

{% set icon_hourglass = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18.5 4h-13m13 16h-13M8 20v-3.333a2 2 0 0 1 .4-1.2L10 12.6a1 1 0 0 0 0-1.2L8.4 8.533a2 2 0 0 1-.4-1.2V4h8v3.333a2 2 0 0 1-.4 1.2L13.957 11.4a1 1 0 0 0 0 1.2l1.643 2.867a2 2 0 0 1 .4 1.2V20H8Z" />
</svg>' %}

{% set icon_image = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m3 16 5-7 6 6.5m6.5 2.5L16 13l-4.286 6M14 10h.01M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_inbox_full = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 13h3.439a.991.991 0 0 1 .908.6 3.978 3.978 0 0 0 7.306 0 .99.99 0 0 1 .908-.6H20M4 13v6a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-6M4 13l2-9h12l2 9M9 7h6m-7 3h8" />
</svg>' %}

{% set icon_inbox = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 13h3.439a.991.991 0 0 1 .908.6 3.978 3.978 0 0 0 7.306 0 .99.99 0 0 1 .908-.6H20M4 13v6a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-6M4 13l2-9h12l2 9" />
</svg>' %}

{% set icon_info_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 11h2v5m-2 0h4m-2.592-8.5h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_insert_row_after = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 9V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44771 1 1v3M3 9v9c0 .5523.44772 1 1 1h16c.5523 0 1-.4477 1-1V9M3 9h18M8 9V5m4 4V5m4 4V5m-6 9h2m0 0h2m-2 0v-2m0 2v2" />
</svg>' %}

{% set icon_insert_row_before = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h16c.5523 0 1-.4477 1-1v-3M3 15V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v9M3 15h18M8 15v4m4-4v4m4-4v4m-6-9h2m0 0h2m-2 0v2m0-2V8" />
</svg>' %}

{% set icon_insert_table_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h10.5M3 15v-4m0 4h11M3 11V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v5M3 11h18m0 0v1M8 11v8m4-8v8m4-8v2m1 4h2m0 0h2m-2 0v2m0-2v-2" />
</svg>' %}

{% set icon_insert_table = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2"
        d="M3 11h18M3 15h18M8 10.792V19m4-8.208V19m4-8.208V19M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_keyboard = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="square" stroke-width="2" d="M8 15h7.01v.01H15L8 15Z" />
    <path stroke="currentColor" stroke-linecap="square" stroke-width="2"
        d="M20 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z" />
    <path stroke="currentColor" stroke-linecap="square" stroke-width="2"
        d="M6 9h.01v.01H6V9Zm0 3h.01v.01H6V12Zm0 3h.01v.01H6V15Zm3-6h.01v.01H9V9Zm0 3h.01v.01H9V12Zm3-3h.01v.01H12V9Zm0 3h.01v.01H12V12Zm3 0h.01v.01H15V12Zm3 0h.01v.01H18V12Zm0 3h.01v.01H18V15Zm-3-6h.01v.01H15V9Zm3 0h.01v.01H18V9Z" />
</svg>' %}

{% set icon_label = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15.2 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11.2a1 1 0 0 0 .747-.334l4.46-5a1 1 0 0 0 0-1.332l-4.46-5A1 1 0 0 0 15.2 6Z" />
</svg>' %}

{% set icon_landmark = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M3 21h18M4 18h16M6 10v8m4-8v8m4-8v8m4-8v8M4 9.5v-.955a1 1 0 0 1 .458-.84l7-4.52a1 1 0 0 1 1.084 0l7 4.52a1 1 0 0 1 .458.84V9.5a.5.5 0 0 1-.5.5h-15a.5.5 0 0 1-.5-.5Z" />
</svg>' %}

{% set icon_layers = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5.005 11.19V12l6.998 4.042L19 12v-.81M5 16.15v.81L11.997 21l6.998-4.042v-.81M12.003 3 5.005 7.042l6.998 4.042L19 7.042 12.003 3Z" />
</svg>' %}

{% set icon_life_saver = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m13.46 8.291 3.849-3.849a1.5 1.5 0 0 1 2.122 0l.127.127a1.5 1.5 0 0 1 0 2.122l-3.84 3.838a4 4 0 0 0-2.258-2.238Zm0 0a4 4 0 0 1 2.263 2.238l3.662-3.662a8.961 8.961 0 0 1 0 10.27l-3.676-3.676m-2.25-5.17 3.678-3.676a8.961 8.961 0 0 0-10.27 0l3.662 3.662a4 4 0 0 0-2.238 2.258L4.615 6.863a8.96 8.96 0 0 0 0 10.27l3.662-3.662a4 4 0 0 0 2.258 2.238l-3.672 3.676a8.96 8.96 0 0 0 10.27 0l-3.662-3.662a4.001 4.001 0 0 0 2.238-2.262m0 0 3.849 3.848a1.5 1.5 0 0 1 0 2.122l-.127.126a1.499 1.499 0 0 1-2.122 0l-3.838-3.838a4 4 0 0 0 2.238-2.258Zm.29-1.461a4 4 0 1 1-8 0 4 4 0 0 1 8 0Zm-7.718 1.471-3.84 3.838a1.5 1.5 0 0 0 0 2.122l.128.126a1.5 1.5 0 0 0 2.122 0l3.848-3.848a4 4 0 0 1-2.258-2.238Zm2.248-5.19L6.69 4.442a1.5 1.5 0 0 0-2.122 0l-.127.127a1.5 1.5 0 0 0 0 2.122l3.849 3.848a4 4 0 0 1 2.238-2.258Z" />
</svg>' %}

{% set icon_lightbulb = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 9a3 3 0 0 1 3-3m-2 15h4m0-3c0-4.1 4-4.9 4-9A6 6 0 1 0 6 9c0 4 4 5 4 9h4Z" />
</svg>' %}

{% set icon_link_break = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M13.2131 9.78732c-.6359-.63557-1.4983-.99259-2.3974-.99259-.89911 0-1.76143.35702-2.39741.99259l-3.4253 3.42528C4.35719 13.8485 4 14.7108 4 15.61c0 .8992.35719 1.7616.99299 2.3974.63598.6356 1.4983.9926 2.39742.9926.89912 0 1.76144-.357 2.39742-.9926l.32157-.3043m-.32157-4.4905c.63587.6358 1.49827.993 2.39747.993.8991 0 1.7615-.3572 2.3974-.993l3.4243-3.42528c.6358-.63585.993-1.49822.993-2.39741 0-.89919-.3572-1.76156-.993-2.39741C17.3712 4.357 16.509 4 15.6101 4c-.899 0-1.7612.357-2.397.9925l-1.0278.96062m7.3873 14.04678-1.7862-1.7862m0 0L16 16.4274m1.7864 1.7863 1.7862-1.7863m-1.7862 1.7863L16 20" />
</svg>' %}

{% set icon_link = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.213 9.787a3.391 3.391 0 0 0-4.795 0l-3.425 3.426a3.39 3.39 0 0 0 4.795 4.794l.321-.304m-.321-4.49a3.39 3.39 0 0 0 4.795 0l3.424-3.426a3.39 3.39 0 0 0-4.794-4.795l-1.028.961" />
</svg>' %}

{% set icon_lock_open = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 14v3m4-6V7a3 3 0 1 1 6 0v4M5 11h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_lock_time = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9.5 11H5a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4.5M7 11V7a3 3 0 0 1 6 0v1.5m2.5 5.5v1.5l1 1m3.5-1a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0Z" />
</svg>' %}

{% set icon_lock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 14v3m-3-6V7a3 3 0 1 1 6 0v4m-8 0h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_mail_box = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M11 16v-5.5A3.5 3.5 0 0 0 7.5 7m3.5 9H4v-5.5A3.5 3.5 0 0 1 7.5 7m3.5 9v4M7.5 7H14m0 0V4h2.5M14 7v3m-3.5 6H20v-6a3 3 0 0 0-3-3m-2 9v4m-8-6.5h1" />
</svg>' %}

{% set icon_map_pin_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17.8 13.938h-.011a7 7 0 1 0-11.464.144h-.016l.14.171c.1.127.2.251.3.371L12 21l5.13-6.248c.194-.209.374-.429.54-.659l.13-.155Z" />
</svg>' %}

{% set icon_map_pin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 15a6 6 0 1 0 0-12 6 6 0 0 0 0 12Zm0 0v6M9.5 9A2.5 2.5 0 0 1 12 6.5" />
</svg>' %}

{% set icon_merge_cells = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 18v2H4V4h6v2m4 12v2h6V4h-6v2m-6.49543 8.4954L10 12m0 0L7.50457 9.50457M10 12H4.05191m12.50199 2.5539L14 12m0 0 2.5539-2.55392M14 12h5.8319" />
</svg>' %}

{% set icon_merge_or_split = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18.5045 14.4954 21 12m0 0-2.4955-2.49542M21 12h-5.9481m-9.49798 2.5539L3 12m0 0 2.55392-2.55392M3 12h5.83192m.16807 7V5H15v14H8.99999Z" />
</svg>' %}

{% set icon_message_caption = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7 9h5m3 0h2M7 12h2m3 0h5M5 5h14a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6.616a1 1 0 0 0-.67.257l-2.88 2.592A.5.5 0 0 1 8 18.477V17a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_message_dots = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16 10.5h.01m-4.01 0h.01M8 10.5h.01M5 5h14a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6.6a1 1 0 0 0-.69.275l-2.866 2.723A.5.5 0 0 1 8 18.635V17a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_messages = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 17h6l3 3v-3h2V9h-2M4 4h11v8H9l-3 3v-3H4V4Z" />
</svg>' %}

{% set icon_minus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14" />
</svg>' %}

{% set icon_mobile_phone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 15h12M6 6h12m-6 12h.01M7 21h10a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_newspaper = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19 7h1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h11.5M7 14h6m-6 3h6m0-10h.5m-.5 3h.5M7 7h3v3H7V7Z" />
</svg>' %}

{% set icon_objects_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M4 5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5Zm16 14a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2ZM4 13a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-6Zm16-2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6Z" />
</svg>' %}

{% set icon_open_door = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 18V6h-5v12h5Zm0 0h2M4 18h2.5m3.5-5.5V12M6 6l7-2v16l-7-2V6Z" />
</svg>' %}

{% set icon_open_sidebar_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m7 10 1.99994 1.9999-1.99994 2M12 5v14M5 4h14c.5523 0 1 .44772 1 1v14c0 .5523-.4477 1-1 1H5c-.55228 0-1-.4477-1-1V5c0-.55228.44772-1 1-1Z" />
</svg>' %}

{% set icon_open_sidebar = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m6 10 1.99994 1.9999-1.99994 2M11 5v14m-7 0h16c.5523 0 1-.4477 1-1V6c0-.55228-.4477-1-1-1H4c-.55228 0-1 .44772-1 1v12c0 .5523.44772 1 1 1Z" />
</svg>' %}

{% set icon_palette = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 7h.01m3.486 1.513h.01m-6.978 0h.01M6.99 12H7m9 4h2.706a1.957 1.957 0 0 0 1.883-1.325A9 9 0 1 0 3.043 12.89 9.1 9.1 0 0 0 8.2 20.1a8.62 8.62 0 0 0 3.769.9 2.013 2.013 0 0 0 2.03-2v-.857A2.036 2.036 0 0 1 16 16Z" />
</svg>' %}

{% set icon_paper_clip = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7 8v8a5 5 0 1 0 10 0V6.5a3.5 3.5 0 1 0-7 0V15a2 2 0 0 0 4 0V8" />
</svg>' %}

{% set icon_paper_plane = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m12 18-7 3 7-18 7 18-7-3Zm0 0v-5" />
</svg>' %}

{% set icon_pen_nib = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m4.988 19.012 5.41-5.41m2.366-6.424 4.058 4.058-2.03 5.41L5.3 20 4 18.701l3.355-9.494 5.41-2.029Zm4.626 4.625L12.197 6.61 14.807 4 20 9.194l-2.61 2.61Z" />
</svg>' %}

{% set icon_pen = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10.779 17.779 4.36 19.918 6.5 13.5m4.279 4.279 8.364-8.643a3.027 3.027 0 0 0-2.14-5.165 3.03 3.03 0 0 0-2.14.886L6.5 13.5m4.279 4.279L6.499 13.5m2.14 2.14 6.213-6.504M12.75 7.04 17 11.28" />
</svg>' %}

{% set icon_phone_hangup = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5.693 16.013H7.31a1.685 1.685 0 0 0 1.685-1.684v-.645A1.684 1.684 0 0 1 10.679 12h2.647a1.686 1.686 0 0 1 1.686 1.686v.646c0 .446.178.875.494 1.19.316.317.693.495 1.14.495h1.685a1.556 1.556 0 0 0 1.597-1.016c.078-.214.107-.776.088-1.002.014-4.415-3.571-6.003-8-6.004-4.427 0-8.014 1.585-8.01 5.996-.02.227.009.79.087 1.003a1.558 1.558 0 0 0 1.6 1.02Z" />
</svg>' %}

{% set icon_phone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18.427 14.768 17.2 13.542a1.733 1.733 0 0 0-2.45 0l-.613.613a1.732 1.732 0 0 1-2.45 0l-1.838-1.84a1.735 1.735 0 0 1 0-2.452l.612-.613a1.735 1.735 0 0 0 0-2.452L9.237 5.572a1.6 1.6 0 0 0-2.45 0c-3.223 3.2-1.702 6.896 1.519 10.117 3.22 3.221 6.914 4.745 10.12 1.535a1.601 1.601 0 0 0 0-2.456Z" />
</svg>' %}

{% set icon_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14m-7 7V5" />
</svg>' %}

{% set icon_printer = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M16.444 18H19a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h2.556M17 11V5a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v6h10ZM7 15h10v4a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-4Z" />
</svg>' %}

{% set icon_qr_code = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M4 4h6v6H4V4Zm10 10h6v6h-6v-6Zm0-10h6v6h-6V4Zm-4 10h.01v.01H10V14Zm0 4h.01v.01H10V18Zm-3 2h.01v.01H7V20Zm0-4h.01v.01H7V16Zm-3 2h.01v.01H4V18Zm0-4h.01v.01H4V14Z" />
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="M7 7h.01v.01H7V7Zm10 10h.01v.01H17V17Z" />
</svg>' %}

{% set icon_question_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9.529 9.988a2.502 2.502 0 1 1 5 .191A2.441 2.441 0 0 1 12 12.582V14m-.01 3.008H12M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_restore_window = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 11.5h13m-13 0V18a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-6.5m-13 0V9a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v2.5M9 5h11a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-1" />
</svg>' %}

{% set icon_rocket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m10.051 8.102-3.778.322-1.994 1.994a.94.94 0 0 0 .533 1.6l2.698.316m8.39 1.617-.322 3.78-1.994 1.994a.94.94 0 0 1-1.595-.533l-.4-2.652m8.166-11.174a1.366 1.366 0 0 0-1.12-1.12c-1.616-.279-4.906-.623-6.38.853-1.671 1.672-5.211 8.015-6.31 10.023a.932.932 0 0 0 .162 1.111l.828.835.833.832a.932.932 0 0 0 1.111.163c2.008-1.102 8.35-4.642 10.021-6.312 1.475-1.478 1.133-4.77.855-6.385Zm-2.961 3.722a1.88 1.88 0 1 1-3.76 0 1.88 1.88 0 0 1 3.76 0Z" />
</svg>' %}

{% set icon_ruler_combined = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 7H7m2 3H7m2 3H7m4 2v2m3-2v2m3-2v2M4 5v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-9a1 1 0 0 1-1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1Z" />
</svg>' %}

{% set icon_search = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="m21 21-3.5-3.5M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z" />
</svg>' %}

{% set icon_server = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 12a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1M5 12h14M5 12a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1m-2 3h.01M14 15h.01M17 9h.01M14 9h.01" />
</svg>' %}

{% set icon_share_nodes = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M7.926 10.898 15 7.727m-7.074 5.39L15 16.29M8 12a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm12 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm0-11a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z" />
</svg>' %}

{% set icon_shield_check = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9.5 11.5 11 13l4-3.5M12 20a16.405 16.405 0 0 1-5.092-5.804A16.694 16.694 0 0 1 5 6.666L12 4l7 2.667a16.695 16.695 0 0 1-1.908 7.529A16.406 16.406 0 0 1 12 20Z" />
</svg>' %}

{% set icon_shield = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 20a16.405 16.405 0 0 1-5.092-5.804A16.694 16.694 0 0 1 5 6.666L12 4l7 2.667a16.695 16.695 0 0 1-1.908 7.529A16.406 16.406 0 0 1 12 20Z" />
</svg>' %}

{% set icon_split_cells = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M4 18v2h6V4H4v2m16 12v2h-6V4h6v2M6.49545 14.4954 4.00003 12m0 0 2.49542-2.49543M4.00003 12h5.94809m7.49798 2.5539L20 12m0 0-2.5539-2.55392M20 12h-5.8319" />
</svg>' %}

{% set icon_star_half_stroke = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2"
        d="M12 4.392v14.832M8.476 9.38l-4.553.36c-.888.07-1.248 1.165-.572 1.737l3.47 2.934a.98.98 0 0 1 .322.98l-1.06 4.388c-.206.855.736 1.531 1.497 1.073l3.898-2.351c.32-.193.723-.193 1.044 0l3.898 2.351c.76.458 1.703-.218 1.497-1.073l-1.06-4.388a.982.982 0 0 1 .322-.98l3.47-2.934c.676-.572.316-1.667-.572-1.737l-4.553-.36a1 1 0 0 1-.845-.606l-1.754-4.165c-.342-.812-1.508-.812-1.85 0L9.321 8.774a1 1 0 0 1-.845.606Z" />
</svg>' %}

{% set icon_star_half = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2"
        d="m12.25 20.825 4.247-2.436a1 1 0 0 0 .503-.867V4.03c0-.405-2.062 3.38-2.8 4.747a1 1 0 0 1-.807.523l-4.87.367c-.903.068-1.258 1.208-.55 1.776l3.576 2.878a1 1 0 0 1 .343 1.025l-1.11 4.366c-.217.856.701 1.553 1.468 1.113Z" />
</svg>' %}

{% set icon_star = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2"
        d="M11.083 5.104c.35-.8 1.485-.8 1.834 0l1.752 4.022a1 1 0 0 0 .84.597l4.463.342c.9.069 1.255 1.2.556 1.771l-3.33 2.723a1 1 0 0 0-.337 1.016l1.03 4.119c.214.858-.71 1.552-1.474 1.106l-3.913-2.281a1 1 0 0 0-1.008 0L7.583 20.8c-.764.446-1.688-.248-1.474-1.106l1.03-4.119A1 1 0 0 0 6.8 14.56l-3.33-2.723c-.698-.571-.342-1.702.557-1.771l4.462-.342a1 1 0 0 0 .84-.597l1.753-4.022Z" />
</svg>' %}

{% set icon_swatchbook = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M7.111 20A3.111 3.111 0 0 1 4 16.889v-12C4 4.398 4.398 4 4.889 4h4.444a.89.89 0 0 1 .89.889v12A3.111 3.111 0 0 1 7.11 20Zm0 0h12a.889.889 0 0 0 .889-.889v-4.444a.889.889 0 0 0-.889-.89h-4.389a.889.889 0 0 0-.62.253l-3.767 3.665a.933.933 0 0 0-.146.185c-.868 1.433-1.581 1.858-3.078 2.12Zm0-3.556h.009m7.933-10.927 3.143 3.143a.889.889 0 0 1 0 1.257l-7.974 7.974v-8.8l3.574-3.574a.889.889 0 0 1 1.257 0Z" />
</svg>' %}

{% set icon_t_shirt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M9 5h-.16667c-.86548 0-1.70761.28071-2.4.8L3.5 8l2 3.5L8 10v9h8v-9l2.5 1.5 2-3.5-2.9333-2.2c-.6924-.51929-1.5346-.8-2.4-.8H15M9 5c0 1.5 1.5 3 3 3s3-1.5 3-3M9 5h6" />
</svg>' %}

{% set icon_table_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2"
        d="M3 11h18m-9 0v8m-8 0h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_table_row = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2"
        d="M3 11h18M3 15h18m-9-4v8m-8 0h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_tablet = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M11 18h2M5.875 3h12.25c.483 0 .875.448.875 1v16c0 .552-.392 1-.875 1H5.875C5.392 21 5 20.552 5 20V4c0-.552.392-1 .875-1Z" />
</svg>' %}

{% set icon_teddy_bear = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7.5 15C6.11929 15 5 16.1193 5 17.5S6.11929 20 7.5 20s2.5-1.1193 2.5-2.5S8.88071 15 7.5 15Zm0 0 1.67693-4.1693m6.69787-3.82761C17.0117 7.00309 18 6.10457 18 5c0-1.10457-.9217-2-2.0586-2-.8963 0-1.6853.74312-1.9679 1.51992M8.12719 6.99544C7.00181 6.99544 6 6.10457 6 5s.9123-2 2.03768-2c.93446 0 1.70666.67806 1.94698 1.51992M14 18h-4m6-3-1.4578-3.8912m-6.63506 2.8789-.44889.1929C6.24889 14.5837 5 13.6836 5 12.4088c0-.8339.55278-1.5667 1.35457-1.7958L8.5 10m7.1055 3.9877.4133.1446c1.2127.4242 2.4812-.476 2.4812-1.7607 0-.8159-.5302-1.5371-1.309-1.7805l-1.7458-.5575M12 9.06243v-.01m-1.3779-1.55397v-.01m3.0337.01v-.01M16 8c0 2.2091-1.7909 4-4 4-2.20914 0-4-1.7909-4-4 0-2.20914 1.79086-4 4-4 2.2091 0 4 1.79086 4 4Zm3 9.5c0 1.3807-1.1193 2.5-2.5 2.5S14 18.8807 14 17.5s1.1193-2.5 2.5-2.5 2.5 1.1193 2.5 2.5Z" />
</svg>' %}

{% set icon_terminal = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m8 9 3 3-3 3m5 0h3M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_thumbtack = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M12.0001 20v-4M7.00012 4h9.99998M9.00012 5v5c0 .5523-.46939 1.0045-.94861 1.279-1.43433.8217-2.60135 3.245-2.25635 4.3653.07806.2535.35396.3557.61917.3557H17.5859c.2652 0 .5411-.1022.6192-.3557.3449-1.1204-.8221-3.5436-2.2564-4.3653-.4792-.2745-.9486-.7267-.9486-1.279V5c0-.55228-.4477-1-1-1h-4c-.55226 0-.99998.44772-.99998 1Z" />
</svg>' %}

{% set icon_ticket = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18.5 12A2.5 2.5 0 0 1 21 9.5V7a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v2.5a2.5 2.5 0 0 1 0 5V17a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-2.5a2.5 2.5 0 0 1-2.5-2.5Z" />
</svg>' %}

{% set icon_toggle_header_cell = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h10M3 15v-4m0 4h9m-9-4V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v3M3 11h11m-2-.2079V19m3-4h1.9909M21 15c0 1.1046-.8954 2-2 2s-2-.8954-2-2 .8954-2 2-2 2 .8954 2 2Z" />
</svg>' %}

{% set icon_toggle_header_column = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 5v14m6-8h-6m6 4h-6m-9-3h1.99093M4 19h16c.5523 0 1-.4477 1-1V6c0-.55228-.4477-1-1-1H4c-.55228 0-1 .44772-1 1v12c0 .5523.44772 1 1 1Zm8-7c0 1.1046-.8954 2-2 2-1.10457 0-2-.8954-2-2s.89543-2 2-2c1.1046 0 2 .8954 2 2Z" />
</svg>' %}

{% set icon_toggle_header_row = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 15v3c0 .5523.44772 1 1 1h16c.5523 0 1-.4477 1-1v-3M3 15V6c0-.55228.44772-1 1-1h16c.5523 0 1 .44772 1 1v9M3 15h18M8 15v4m4-4v4m4-4v4m-7-9h1.9909M15 10c0 1.1046-.8954 2-2 2s-2-.8954-2-2c0-1.10457.8954-2 2-2s2 .89543 2 2Z" />
</svg>' %}

{% set icon_tools = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M7.58209 8.96025 9.8136 11.1917l-1.61782 1.6178c-1.08305-.1811-2.23623.1454-3.07364.9828-1.1208 1.1208-1.32697 2.8069-.62368 4.1363.14842.2806.42122.474.73509.5213.06726.0101.1347.0133.20136.0098-.00351.0666-.00036.1341.00977.2013.04724.3139.24069.5867.52125.7351 1.32944.7033 3.01552.4971 4.13627-.6237.8375-.8374 1.1639-1.9906.9829-3.0736l4.8107-4.8108c1.0831.1811 2.2363-.1454 3.0737-.9828 1.1208-1.1208 1.3269-2.80688.6237-4.13632-.1485-.28056-.4213-.474-.7351-.52125-.0673-.01012-.1347-.01327-.2014-.00977.0035-.06666.0004-.13409-.0098-.20136-.0472-.31386-.2406-.58666-.5212-.73508-1.3294-.70329-3.0155-.49713-4.1363.62367-.8374.83741-1.1639 1.9906-.9828 3.07365l-1.7788 1.77875-2.23152-2.23148-1.41419 1.41424Zm1.31056-3.1394c-.04235-.32684-.24303-.61183-.53647-.76186l-1.98183-1.0133c-.38619-.19746-.85564-.12345-1.16234.18326l-.86321.8632c-.3067.3067-.38072.77616-.18326 1.16235l1.0133 1.98182c.15004.29345.43503.49412.76187.53647l1.1127.14418c.3076.03985.61628-.06528.8356-.28461l.86321-.8632c.21932-.21932.32446-.52801.2846-.83561l-.14417-1.1127ZM19.4448 16.4052l-3.1186-3.1187c-.7811-.781-2.0474-.781-2.8285 0l-.1719.172c-.7811.781-.7811 2.0474 0 2.8284l3.1186 3.1187c.7811.781 2.0474.781 2.8285 0l.1719-.172c.7811-.781.7811-2.0474 0-2.8284Z" />
</svg>' %}

{% set icon_tracking = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M5 19h4m6 0h4m-6.9627-4.3843V8.63418L17 5.93918m-4.9298 2.66213L7.04175 5.93919M12 2.99719l5.033 2.90583v5.81168L12 14.6205l-5.03303-2.9058V5.90302L12 2.99719ZM14 19c0 1.1045-.8954 2-2 2s-2-.8955-2-2c0-1.1046.8954-2 2-2s2 .8954 2 2Z" />
</svg>' %}

{% set icon_trash_bin = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
</svg>' %}

{% set icon_truck_clock = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13 7h6l2 4m-8-4v8H9m4-8V6c0-.26522-.1054-.51957-.2929-.70711C12.5196 5.10536 12.2652 5 12 5H4c-.26522 0-.51957.10536-.70711.29289C3.10536 5.48043 3 5.73478 3 6v9h2m14 0h2v-4m0 0h-5M8 8.66669V10l1.5 1.5m10 5c0 1.3807-1.1193 2.5-2.5 2.5s-2.5-1.1193-2.5-2.5S15.6193 14 17 14s2.5 1.1193 2.5 2.5Zm-10 0C9.5 17.8807 8.38071 19 7 19s-2.5-1.1193-2.5-2.5S5.61929 14 7 14s2.5 1.1193 2.5 2.5Z" />
</svg>' %}

{% set icon_truck = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13 7h6l2 4m-8-4v8m0-8V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v9h2m8 0H9m4 0h2m4 0h2v-4m0 0h-5m3.5 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-10 0a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z" />
</svg>' %}

{% set icon_upload = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 5v9m-5 0H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2M8 9l4-5 4 5m1 8h.01" />
</svg>' %}

{% set icon_volume_down = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17.5 8.43A4.985 4.985 0 0 1 19 12a4.984 4.984 0 0 1-1.43 3.5M14 6.135v11.73a1 1 0 0 1-1.64.768L8 15H6a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h2l4.36-3.633a1 1 0 0 1 1.64.768Z" />
</svg>' %}

{% set icon_volume_up = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15.5 8.43A4.985 4.985 0 0 1 17 12a4.984 4.984 0 0 1-1.43 3.5m2.794 2.864A8.972 8.972 0 0 0 21 12a8.972 8.972 0 0 0-2.636-6.364M12 6.135v11.73a1 1 0 0 1-1.64.768L6 15H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h2l4.36-3.633a1 1 0 0 1 1.64.768Z" />
</svg>' %}

{% set icon_wand_magic_sparkles = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16.872 9.687 20 6.56 17.44 4 4 17.44 6.56 20 16.873 9.687Zm0 0-2.56-2.56M6 7v2m0 0v2m0-2H4m2 0h2m7 7v2m0 0v2m0-2h-2m2 0h2M8 4h.01v.01H8V4Zm2 2h.01v.01H10V6Zm2-2h.01v.01H12V4Zm8 8h.01v.01H20V12Zm-2 2h.01v.01H18V14Zm2 2h.01v.01H20V16Z" />
</svg>' %}

{% set icon_window = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 8h.01M9 8h.01M12 8h.01M4 11h16M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z" />
</svg>' %}

{% set icon_zoom_in = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="m21 21-3.5-3.5M10 7v6m-3-3h6m4 0a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z" />
</svg>' %}

{% set icon_zoom_out = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="m21 21-3.5-3.5M7 10h6m4 0a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z" />
</svg>' %}

{% set icon_backward_step = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 6v12m8-12v12l-8-6 8-6Z" />
</svg>' %}

{% set icon_camera_photo = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M4 18V8a1 1 0 0 1 1-1h1.5l1.707-1.707A1 1 0 0 1 8.914 5h6.172a1 1 0 0 1 .707.293L17.5 7H19a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Z" />
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_caption = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10.855 14.322a2.475 2.475 0 1 1 .133-4.241m6.053 4.241a2.475 2.475 0 1 1 .133-4.241M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_circle_pause = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 9v6m4-6v6m7-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>' %}

{% set icon_clapperboard_play = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19 4H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1Zm0 0-4 4m5 0H4m1 0 4-4m1 4 4-4m-4 7v6l4-3-4-3Z" />
</svg>' %}

{% set icon_computer_speaker = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 16H5a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v1M9 12H4m8 8V9h8v11h-8Zm0 0H9m8-4a1 1 0 1 0-2 0 1 1 0 0 0 2 0Z" />
</svg>' %}

{% set icon_forward_step = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16 6v12M8 6v12l8-6-8-6Z" />
</svg>' %}

{% set icon_headphones = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
        d="M20 16v-4a8 8 0 1 0-16 0v4m16 0v2a2 2 0 0 1-2 2h-2v-6h2a2 2 0 0 1 2 2ZM4 16v2a2 2 0 0 0 2 2h2v-6H6a2 2 0 0 0-2 2Z" />
</svg>' %}

{% set icon_incoming_call = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19.0225 4 14 8.98132m0 0 3.03.00002M14 8.98132V5.99998m4.2327 8.51492-1.1431-1.1439c-1.143-1.1439-1.9758-.3696-2.8382.4565-.3159.3161-.7443.4936-1.1911.4936-.4467 0-.8751-.1775-1.191-.4936L9.998 11.9549c-.65643-.6564-.92477-1.4591 0-2.38383.8488-.86837 1.6837-1.61177.4926-2.8037L9.2995 5.57544c-.90492-.90556-1.99137-.383-2.61843.23625-3.13257 3.1118-1.72021 6.77001 1.41066 9.90141s6.78747 4.5465 9.90477 1.4254c.1744-.1461.551-.565.6473-.7712.0962-.2062.1461-.4311.1461-.6587 0-.2277-.0499-.4525-.1461-.6588-.0963-.2062-.2366-.3888-.4111-.5349Z" />
</svg>' %}

{% set icon_list_music = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17 15.5V5s3 1 3 4m-7-3H4m9 4H4m4 4H4m13 2.4c0 1.326-1.343 2.4-3 2.4s-3-1.075-3-2.4 1.343-2.4 3-2.4 3 1.075 3 2.4Z" />
</svg>' %}

{% set icon_microphone_slash = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path fill="currentColor"
        d="M19.97 9.012a1 1 0 1 0-2 0h2Zm-1 2.988 1 .001V12h-1Zm-8.962 4.98-.001 1h.001v-1Zm-3.52-1.46.708-.708-.707.707ZM5.029 12h-1v.001l1-.001Zm3.984 7.963a1 1 0 1 0 0 2v-2Zm5.975 2a1 1 0 0 0 0-2v2ZM7.017 8.017a1 1 0 1 0 2 0h-2Zm6.641 4.862a1 1 0 1 0 .667 1.886l-.667-1.886Zm-7.63-2.87a1 1 0 1 0-2 0h2Zm9.953 5.435a1 1 0 1 0 1 1.731l-1-1.731ZM12 16.979h1a1 1 0 0 0-1-1v1ZM5.736 4.322a1 1 0 0 0-1.414 1.414l1.414-1.414Zm12.528 15.356a1 1 0 0 0 1.414-1.414l-1.414 1.414ZM17.97 9.012V12h2V9.012h-2Zm0 2.987a3.985 3.985 0 0 1-1.168 2.813l1.415 1.414a5.985 5.985 0 0 0 1.753-4.225l-2-.002Zm-7.962 3.98a3.985 3.985 0 0 1-2.813-1.167l-1.414 1.414a5.985 5.985 0 0 0 4.225 1.753l.002-2Zm-2.813-1.167a3.985 3.985 0 0 1-1.167-2.813l-2 .002a5.985 5.985 0 0 0 1.753 4.225l1.414-1.414Zm3.808-10.775h1.992v-2h-1.992v2Zm1.992 0c1.097 0 1.987.89 1.987 1.988h2a3.988 3.988 0 0 0-3.987-3.988v2Zm1.987 1.988v4.98h2v-4.98h-2Zm-5.967 0c0-1.098.89-1.988 1.988-1.988v-2a3.988 3.988 0 0 0-3.988 3.988h2Zm-.004 15.938H12v-2H9.012v2Zm2.988 0h2.987v-2H12v2ZM9.016 8.017V6.025h-2v1.992h2Zm5.967 2.987a1.99 1.99 0 0 1-1.325 1.875l.667 1.886a3.989 3.989 0 0 0 2.658-3.76h-2ZM6.03 12v-1.992h-2V12h2Zm10.774 2.812a3.92 3.92 0 0 1-.823.632l1.002 1.731a5.982 5.982 0 0 0 1.236-.949l-1.415-1.414ZM4.322 5.736l13.942 13.942 1.414-1.414L5.736 4.322 4.322 5.736ZM12 15.98h-1.992v2H12v-2Zm-1 1v3.984h2V16.98h-2Z" />
</svg>' %}

{% set icon_microphone = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M19 9v3a5.006 5.006 0 0 1-5 5h-4a5.006 5.006 0 0 1-5-5V9m7 9v3m-3 0h6M11 3h2a3 3 0 0 1 3 3v5a3 3 0 0 1-3 3h-2a3 3 0 0 1-3-3V6a3 3 0 0 1 3-3Z" />
</svg>' %}

{% set icon_missed_call = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m17.0896 13.371 1.1431 1.1439c.1745.1461.3148.3287.4111.5349.0962.2063.1461.4312.1461.6588 0 .2276-.0499.4525-.1461.6587-.0963.2063-.4729.6251-.6473.7712-3.1173 3.1211-6.7739 1.706-9.90477-1.4254-3.13087-3.1313-4.54323-6.7896-1.41066-9.90139.62706-.61925 1.71351-1.14182 2.61843-.23626l1.1911 1.19193c1.1911 1.19194.3562 1.93533-.4926 2.80371-.92477.92481-.65643 1.72741 0 2.38391l1.8713 1.8725c.3159.3161.7443.4936 1.191.4936.4468 0 .8752-.1775 1.1911-.4936.8624-.8261 1.6952-1.6004 2.8382-.4565Zm-2.2152-4.39103 2.1348-2.13485m0 0 2.1597-1.90738m-2.1597 1.90738 2.1597 2.15076m-2.1597-2.15076-2.1348-1.90738" />
</svg>' %}

{% set icon_music_alt = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 16.5c0 1.3807-1.1193 2.5-2.5 2.5C8.11929 19 7 17.8807 7 16.5S8.11929 14 9.5 14c1.3807 0 2.5 1.1193 2.5 2.5Zm0 0V5c2.5 0 6 2.5 4.5 7" />
</svg>' %}

{% set icon_music = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 18c0 1.1046-.89543 2-2 2s-2-.8954-2-2 .89543-2 2-2 2 .8954 2 2Zm0 0V6.33333L18 4v11.6667M8 10.3333 18 8m0 8c0 1.1046-.8954 2-2 2s-2-.8954-2-2 .8954-2 2-2 2 .8954 2 2Z" />
</svg>' %}

{% set icon_outgoing_call = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m17.0896 13.371 1.1431 1.1439c.1745.1461.3148.3287.4111.5349.0962.2063.1461.4312.1461.6588 0 .2276-.0499.4525-.1461.6587-.0963.2063-.4729.6251-.6473.7712-3.1173 3.1211-6.7739 1.706-9.90477-1.4254-3.13087-3.1313-4.54323-6.7896-1.41066-9.90139.62706-.61925 1.71351-1.14182 2.61843-.23626l1.1911 1.19193c1.1911 1.19194.3562 1.93533-.4926 2.80371-.92477.92481-.65643 1.72741 0 2.38391l1.8713 1.8725c.3159.3161.7443.4936 1.191.4936.4468 0 .8752-.1775 1.1911-.4936.8624-.8261 1.6952-1.6004 2.8382-.4565ZM14 8.98134l5.0225-4.98132m0 0L15.9926 4m3.0299.00002v2.98135" />
</svg>' %}

{% set icon_pause = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M9 6H8a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Zm7 0h-1a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z" />
</svg>' %}

{% set icon_play = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 18V6l8 6-8 6Z" />
</svg>' %}

{% set icon_rectangle_list = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M11 9h6m-6 3h6m-6 3h6M6.996 9h.01m-.01 3h.01m-.01 3h.01M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z" />
</svg>' %}

{% set icon_shuffle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13.484 9.166 15 7h5m0 0-3-3m3 3-3 3M4 17h4l1.577-2.253M4 7h4l7 10h5m0 0-3 3m3-3-3-3" />
</svg>' %}

{% set icon_stop = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <rect width="12" height="12" x="6" y="6" stroke="currentColor" stroke-linejoin="round" stroke-width="2" rx="1" />
</svg>' %}

{% set icon_video_camera = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M14 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Zm7 11-6-2V9l6-2v10Z" />
</svg>' %}

{% set icon_volume_mute = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15.5 8.43A4.985 4.985 0 0 1 17 12c0 1.126-.5 2.5-1.5 3.5m2.864-9.864A8.972 8.972 0 0 1 21 12c0 2.023-.5 4.5-2.5 6M7.8 7.5l2.56-2.133a1 1 0 0 1 1.64.768V12m0 4.5v1.365a1 1 0 0 1-1.64.768L6 15H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1m1-4 14 14" />
</svg>' %}

{% set icon_align_center = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 6h8M6 10h12M8 14h8M6 18h12" />
</svg>' %}

{% set icon_align_justify = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 6H6m12 4H6m12 4H6m12 4H6" />
</svg>' %}

{% set icon_align_left = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 6h8m-8 4h12M6 14h8m-8 4h12" />
</svg>' %}

{% set icon_align_right = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M18 6h-8m8 4H6m12 4h-8m8 4H6" />
</svg>' %}

{% set icon_font_color = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="m6.08169 15.9817 1.57292-4m-1.57292 4h-1.1m1.1 0h1.65m-.07708-4 2.72499-6.92967c.0368-.09379.1673-.09379.2042 0l2.725 6.92967m-5.65419 0h-.00607m.00607 0h5.65419m0 0 .6169 1.569m5.1104 4.453c0 1.1025-.8543 1.9963-1.908 1.9963s-1.908-.8938-1.908-1.9963c0-1.1026 1.908-4.1275 1.908-4.1275s1.908 3.0249 1.908 4.1275Z" />
</svg>' %}

{% set icon_font_family = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m10.5785 19 4.2979-10.92966c.0369-.09379.1674-.09379.2042 0L19.3785 19m-8.8 0H9.47851m1.09999 0h1.65m7.15 0h-1.65m1.65 0h1.1m-7.7-3.9846h4.4M3 16l1.56685-3.9846m0 0 2.73102-6.94506c.03688-.09379.16738-.09379.20426 0l2.50367 6.94506H4.56685Z" />
</svg>' %}

{% set icon_font_highlight = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M9 20H5.5c-.27614 0-.5-.2239-.5-.5v-3c0-.2761.22386-.5.5-.5h13c.2761 0 .5.2239.5.5v3c0 .2761-.2239.5-.5.5H18m-6-1 1.42 1.8933c.04.0534.12.0534.16 0L15 19m-7-6 3.9072-9.76789c.0335-.08381.1521-.08381.1856 0L16 13m-8 0H7m1 0h1.5m6.5 0h-1.5m1.5 0h1m-7-3.00001h4" />
</svg>' %}

{% set icon_horizontal_lines = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5 12h14" />
    <path stroke="currentColor" stroke-linecap="round" d="M6 9.5h12m-12-2h12m-12-2h12m-12 13h12m-12-2h12m-12-2h12" />
</svg>' %}

{% set icon_indent = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 6h12M6 18h12m-5-8h5m-5 4h5M6 9v6l3.5-3L6 9Z" />
</svg>' %}

{% set icon_language = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m13 19 3.5-9 3.5 9m-6.125-2h5.25M3 7h7m0 0h2m-2 0c0 1.63-.793 3.926-2.239 5.655M7.5 6.818V5m.261 7.655C6.79 13.82 5.521 14.725 4 15m3.761-2.345L5 10m2.761 2.655L10.2 15" />
</svg>' %}

{% set icon_letter_bold = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M8 5h4.5a3.5 3.5 0 1 1 0 7H8m0-7v7m0-7H6m2 7h6.5a3.5 3.5 0 1 1 0 7H8m0-7v7m0 0H6" />
</svg>' %}

{% set icon_letter_italic = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="m8.874 19 6.143-14M6 19h6.33m-.66-14H18" />
</svg>' %}

{% set icon_letter_underline = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M6 19h12M8 5v9a4 4 0 0 0 8 0V5M6 5h4m4 0h4" />
</svg>' %}

{% set icon_list = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M9 8h10M9 12h10M9 16h10M4.99 8H5m-.02 4h.01m0 4H5" />
</svg>' %}

{% set icon_ordered_list = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 6h8m-8 6h8m-8 6h8M4 16a2 2 0 1 1 3.321 1.5L4 20h5M4 5l2-1v6m-2 0h4" />
</svg>' %}

{% set icon_outdent = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M6 6h12M6 18h12m-5-8h5m-5 4h5M9.5 9v6L6 12l3.5-3Z" />
</svg>' %}

{% set icon_paragraph = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 5v7m0 7v-7m4-7v14m3-14H8.5A3.5 3.5 0 0 0 5 8.5v0A3.5 3.5 0 0 0 8.5 12H12" />
</svg>' %}

{% set icon_quote = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M10 11V8a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1Zm0 0v2a4 4 0 0 1-4 4H5m14-6V8a1 1 0 0 0-1-1h-3a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1Zm0 0v2a4 4 0 0 1-4 4h-1" />
</svg>' %}

{% set icon_subscript = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M20 20h-4v-.5c1.0989-1.0329 3.75-2.5 3.75-3.5v-1.0001c0-.5523-.4477-.9999-1-.9999H17c-.5522 0-1 .4477-1 1M4.00004 4l9.12206 11.3932m0-11.3932L4 15.3932" />
</svg>' %}

{% set icon_superscript = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M20 10h-4v-.5C17.0989 8.46711 19.75 7 19.75 6V4.99989c0-.55228-.4477-.99989-1-.99989H17c-.5523 0-1 .44772-1 1M4 7.30341l9.1221 11.39319m0-11.39319L4 18.6966" />
</svg>' %}

{% set icon_text_size = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 6.2V5h11v1.2M8 5v14m-3 0h6m2-6.8V11h8v1.2M17 11v8m-1.5 0h3" />
</svg>' %}

{% set icon_text_slash = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7 6.2V5h12v1.2M7 19h6m.2-14-1.677 6.523M9.6 19l1.029-4M5 5l6.523 6.523M19 19l-7.477-7.477" />
</svg>' %}

{% set icon_text_underline = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M5 19h14M7.6 16l4.2979-10.92963c.0368-.09379.1674-.09379.2042 0L16.4 16m-8.8 0H6.5m1.1 0h1.65m7.15 0h-1.65m1.65 0h1.1m-8.33315-4h5.66025" />
</svg>' %}

{% set icon_address_book = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M7 6H5m2 3H5m2 3H5m2 3H5m2 3H5m11-1a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2M7 3h11a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1Zm8 7a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z" />
</svg>' %}

{% set icon_profile_card = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M15 9h3m-3 3h3m-3 3h3m-6 1c-.306-.613-.933-1-1.618-1H7.618c-.685 0-1.312.387-1.618 1M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Zm7 5a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z" />
</svg>' %}

{% set icon_user_add = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16 12h4m-2 2v-4M4 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_user_circle = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm0 0a8.949 8.949 0 0 0 4.951-1.488A3.987 3.987 0 0 0 13 16h-2a3.987 3.987 0 0 0-3.951 3.512A8.948 8.948 0 0 0 12 21Zm3-11a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_user_edit = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" stroke-width="2"
        d="M7 19H5a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3h1m4-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm7.441 1.559a1.907 1.907 0 0 1 0 2.698l-6.069 6.069L10 19l.674-3.372 6.07-6.07a1.907 1.907 0 0 1 2.697 0Z" />
</svg>' %}

{% set icon_user_remove = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M16 12h4M4 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_user_settings = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" stroke-width="2"
        d="M10 19H5a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3h2m10 1a3 3 0 0 1-3 3m3-3a3 3 0 0 0-3-3m3 3h1m-4 3a3 3 0 0 1-3-3m3 3v1m-3-4a3 3 0 0 1 3-3m-3 3h-1m4-3v-1m-2.121 1.879-.707-.707m5.656 5.656-.707-.707m-4.242 0-.707.707m5.656-5.656-.707.707M12 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_user = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-width="2"
        d="M7 17v1a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1a3 3 0 0 0-3-3h-4a3 3 0 0 0-3 3Zm8-9a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_users_group = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M4.5 17H4a1 1 0 0 1-1-1 3 3 0 0 1 3-3h1m0-3.05A2.5 2.5 0 1 1 9 5.5M19.5 17h.5a1 1 0 0 0 1-1 3 3 0 0 0-3-3h-1m0-3.05a2.5 2.5 0 1 0-2-4.45m.5 13.5h-7a1 1 0 0 1-1-1 3 3 0 0 1 3-3h3a3 3 0 0 1 3 3 1 1 0 0 1-1 1Zm-1-9.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z" />
</svg>' %}

{% set icon_users = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2"
        d="M16 19h4a1 1 0 0 0 1-1v-1a3 3 0 0 0-3-3h-2m-2.236-4a3 3 0 1 0 0-4M3 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
</svg>' %}

{% set icon_moon_plus = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M17 5v3m0 0v3m0-3h-3m3 0h3m-3.3556 7.0913c-1.6389 0-2.58-.2487-3.7085-.9576-1.1285-.709-2.0191-1.7196-2.5631-2.9086-.54402-1.1891-.71806-2.50523-.5009-3.78809.2172-1.28287.8161-2.47705 1.724-3.43701-1.3427.20491-2.60689.74436-3.66765 1.56511-1.06077.82074-1.88149 1.8944-2.38113 3.11496-.49965 1.22056-.66094 2.54583-.46795 3.84493.19298 1.2992.73357 2.5273 1.56839 3.563.83482 1.0358 1.93501 1.8435 3.19194 2.3433 1.2569.4999 2.6272.6745 3.9754.5068 1.3482-.1676 2.6279-.6719 3.7125-1.463 1.0847-.7911 1.937-1.8416 2.4726-3.0478-1.0063.5199-1.9323.664-3.3556.664Z" />
</svg>' %}

{% set icon_moon = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 21a9 9 0 0 1-.5-17.986V3c-.354.966-.5 1.911-.5 3a9 9 0 0 0 9 9c.239 0 .254.018.488 0A9.004 9.004 0 0 1 12 21Z" />
</svg>' %}

{% set icon_sun = '<svg
    class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
    aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M12 5V3m0 18v-2M7.05 7.05 5.636 5.636m12.728 12.728L16.95 16.95M5 12H3m18 0h-2M7.05 16.95l-1.414 1.414M18.364 5.636 16.95 7.05M16 12a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z" />
</svg>' %}
```

=== File: ./templates/default/error.j2 ===
```jinja-html
{# error.j2 #}
<!DOCTYPE html>
<html lang="es" class="h-full">
<head>
    {% include 'partials/head.j2' %}
    {% from "settings/_ui_class.j2" import body_classes, main_clases, text_color, bg_color, hover_bg, menu_bg_color, shadow, rounded, padding, container, close_menu_button, menu_link_style %}
</head>
<body class="{{ body_classes }}">

    {% set c_page = "flex flex-grow overflow-hidden" if dashboard else "container mx-auto px-0 py-0" %}
    {% set is_full_width = dashboard %}
    {% set has_login_button = not dashboard and request.endpoint != 'core.login' %}

    {% if basic_form_view %}
    {% set main_clases = "w-full" %}
    {% set is_full_width = true %}
    {% set c_page, bg_color, rounded, shadow, padding = "", "", "", "", "" %}
    {% endif %}
    
    <div class="{{ c_page }}">

        {% if dashboard %}
        {% include 'partials/sidebar_toggle.j2' %}
        {% include 'partials/sidebar.j2' %}
        {% endif %}

        <main class="{{ main_clases }} {% if is_full_width %} w-full {% endif %}" role="main">
            {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
            <ul class="space-y-2">
                {% for category, message in messages %}
                <li class="p-4 rounded-md {% if category == 'success' %}bg-green-100 border border-green-400 text-green-700{% elif category == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-blue-100 border border-blue-400 text-blue-700{% endif %}"
                    role="alert">
                    {{ message }}
                </li>
                {% endfor %}
            </ul>
            {% endif %}
            {% endwith %}
            <div class="{{ bg_color }} {{ rounded }} {{ shadow }} {{ padding }}">
                {% block content %}
                {% if heading %}
                <h1 class="text-4xl font-bold mb-4 dark:text-white">{{ heading }}</h1>
                {% endif %}
                <div class="text-lg text-gray-700 dark:text-white">
                    {{ content | safe }}
                </div>
                {% if additional_content %}
                <div class="mt-4 text-lg text-gray-700 dark:text-white">
                    {{ additional_content | safe }}
                </div>
                {% endif %}
                {% endblock %}
            </div>



        </main>
    </div>

    {% block footer %}
    {% include 'partials/footer.j2' %}
    {% endblock %}
    {% block extra_js %}{% endblock %}
</body>

</html>
```

=== File: ./templates/default/router_lister.j2 ===
```jinja-html
{# router_lister.j2 #}
<!DOCTYPE html>
<html lang="es" class="h-full">
<head>
    {% include 'partials/head.j2' %}
    {% from "settings/_ui_class.j2" import body_classes %}
</head>
<body class="{{ body_classes }} home">
            {# contenido del tab2 #}
            <div class="flex h-screen">
                <!-- Lateral del menú -->
                <nav class="w-64 h-screen bg-gray-200 p-4 overflow-y-auto fixed top-0 left-0">
                    <h2 class="text-xl font-semibold mb-4">Endpoints</h2>
                    <div id="navEndpoints" class="space-y-2">
                        <!-- Aquí se insertarán los enlaces a cada endpoint -->
                    </div>
                </nav>
                <!-- Contenido principal -->
                <main class="flex-1 p-4 ml-64">
                    <h1 class="text-3xl font-bold mb-6">API Documentation</h1>
                    <div id="endpoints" class="space-y-8">
                        <!-- Aquí se insertarán las tarjetas de cada endpoint -->
                    </div>
                </main>
            </div>

            <script>

                {# manejo de la presentación del API #}
                document.addEventListener('DOMContentLoaded', function() {
                    const endpointsContainer = document.getElementById('endpoints');
                    const navEndpoints = document.getElementById('navEndpoints');
                    fetch('/list_endpoints')
                        .then(response => response.json())
                        .then(data => {
                            // Función para crear la tarjeta de un endpoint
                            const createEndpointCard = (route, isActive) => {
                                const endpointDiv = document.createElement('div');
                                endpointDiv.className = `bg-white rounded-lg shadow-md p-6 ${isActive ? 'ring-2 ring-blue-500' : ''}`;
                                endpointDiv.id = route.endpoint;
                                const endpointHeader = document.createElement('div');
                                endpointHeader.className = 'flex justify-between items-center mb-4';
                                const endpointUrl = document.createElement('h2');
                                endpointUrl.className = 'text-2xl font-bold text-gray-800';
                                endpointUrl.textContent = route.url;
                                const endpointROUTE = document.createElement('h3');
                                endpointROUTE.className = 'text-1xl font-bold text-gray-700';
                                endpointROUTE.textContent = route.endpoint;
                                const endpointMethods = document.createElement('div');
                                endpointMethods.className = 'flex space-x-2';
                                route.methods.split(',').forEach(method => {
                                    const methodSpan = document.createElement('span');
                                    methodSpan.className = `px-2 py-1 rounded text-sm font-medium 
                                        ${method === 'GET' ? 'bg-green-100 text-green-800' : 
                                         method === 'POST' ? 'bg-blue-100 text-blue-800' : 
                                         method === 'PUT' ? 'bg-yellow-100 text-yellow-800' : 
                                         method === 'DELETE' ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-800'}`;
                                    methodSpan.textContent = method;
                                    endpointMethods.appendChild(methodSpan);
                                });
                                endpointHeader.appendChild(endpointUrl);
                                endpointHeader.appendChild(endpointROUTE);
                                endpointHeader.appendChild(endpointMethods);
                                
                                const documentation = document.createElement('div');
                                documentation.className = 'mb-6';
                                if (route.documentation) {
                                    const docParagraph = document.createElement('p');
                                    docParagraph.className = 'text-gray-600';
                                    docParagraph.textContent = route.documentation;
                                    documentation.appendChild(docParagraph);
                                }
                                // Parámetros
                                if (route.parameters && route.parameters.length > 0) {
                                    const parameters = document.createElement('div');
                                    parameters.className = 'mb-6';
                                    const paramTitle = document.createElement('h3');
                                    paramTitle.className = 'text-lg font-semibold mb-2 text-gray-800';
                                    paramTitle.textContent = 'Parameters';
                                    const paramList = document.createElement('ul');
                                    paramList.className = 'grid grid-cols-1 md:grid-cols-2 gap-2';
                                    route.parameters.forEach(param => {
                                        const paramItem = document.createElement('li');
                                        paramItem.className = 'text-gray-600';
                                        paramItem.textContent = param;
                                        paramList.appendChild(paramItem);
                                    });
                                    parameters.appendChild(paramTitle);
                                    parameters.appendChild(paramList);
                                    endpointDiv.appendChild(parameters);
                                }
                                // Response Codes
                                if (route.response_codes && route.response_codes.length > 0) {
                                    const responses = document.createElement('div');
                                    responses.className = 'mb-6';
                                    const responseTitle = document.createElement('h3');
                                    responseTitle.className = 'text-lg font-semibold mb-2 text-gray-800';
                                    responseTitle.textContent = 'Response Codes';
                                    const responseList = document.createElement('ul');
                                    responseList.className = 'grid grid-cols-1 md:grid-cols-2 gap-2';
                                    route.response_codes.forEach(code => {
                                        const codeItem = document.createElement('li');
                                        codeItem.className = 'text-gray-600';
                                        codeItem.textContent = code;
                                        responseList.appendChild(codeItem);
                                    });
                                    responses.appendChild(responseTitle);
                                    responses.appendChild(responseList);
                                    endpointDiv.appendChild(responses);
                                }
                                // Method Documentation
                                if (route.method_docs && Object.keys(route.method_docs).length > 0) {
                                    const methodDocs = document.createElement('div');
                                    methodDocs.className = 'mt-6';
                                    Object.entries(route.method_docs).forEach(([method, docs]) => {
                                        const methodSection = document.createElement('div');
                                        methodSection.className = 'mb-4 border-l-4 border-blue-500 pl-4';
                                        const methodTitle = document.createElement('h3');
                                        methodTitle.className = 'text-lg font-semibold mb-2 text-gray-800';
                                        methodTitle.textContent = `${method.toUpperCase()} Documentation`;
                                        if (docs.parameters && docs.parameters.length > 0) {
                                            const methodParams = document.createElement('div');
                                            methodParams.className = 'mb-2';
                                            const paramTitle = document.createElement('h4');
                                            paramTitle.className = 'font-medium mb-1 text-gray-700';
                                            paramTitle.textContent = 'Parameters';
                                            methodParams.appendChild(paramTitle);
                                            const paramList = document.createElement('ul');
                                            paramList.className = 'list-disc list-inside text-gray-600';
                                            docs.parameters.forEach(param => {
                                                const paramItem = document.createElement('li');
                                                paramItem.textContent = param;
                                                paramList.appendChild(paramItem);
                                            });
                                            methodParams.appendChild(paramList);
                                            methodSection.appendChild(methodParams);
                                        }
                                        if (docs.response_codes && docs.response_codes.length > 0) {
                                            const methodResponses = document.createElement('div');
                                            methodResponses.className = 'mb-2';
                                            const responseTitle = document.createElement('h4');
                                            responseTitle.className = 'font-medium mb-1 text-gray-700';
                                            responseTitle.textContent = 'Response Codes';
                                            methodResponses.appendChild(responseTitle);
                                            const responseList = document.createElement('ul');
                                            responseList.className = 'list-disc list-inside text-gray-600';
                                            docs.response_codes.forEach(code => {
                                                const codeItem = document.createElement('li');
                                                codeItem.textContent = code;
                                                responseList.appendChild(codeItem);
                                            });
                                            methodResponses.appendChild(responseList);
                                            methodSection.appendChild(methodResponses);
                                        }
                                        methodSection.appendChild(methodTitle);
                                        methodDocs.appendChild(methodSection);
                                    });
                                    endpointDiv.appendChild(methodDocs);
                                }
                                endpointDiv.appendChild(endpointHeader);
                                endpointDiv.appendChild(documentation);
                                return endpointDiv;
                            };
                            data.forEach((route, index) => {
                                // Crea la tarjeta del endpoint
                                const endpointCard = createEndpointCard(route, index === 0);
                                // Crea el enlace en la sidebar
                                const navItem = document.createElement('div');
                                navItem.className = 'block mb-1';
                                const navLink = document.createElement('a');
                                navLink.className = `text-gray-600 hover:text-blue-500 transition-colors cursor-pointer ${
                                    index === 0 ? 'font-medium' : ''
                                }`;
                                navLink.textContent = route.endpoint;
                                navLink.href = `#${route.endpoint}`;
                                navLink.dataset.target = route.endpoint;
                                navItem.appendChild(navLink);
                                navEndpoints.appendChild(navItem);
                                endpointsContainer.appendChild(endpointCard);
                            });
                            // Agrega un evento de clic a la sidebar
                            navEndpoints.addEventListener('click', (e) => {
                                if (e.target.tagName === 'A') {
                                    const targetId = e.target.dataset.target;
                                    document.querySelectorAll('#endpoints > div').forEach(card => {
                                        card.classList.remove('ring-2', 'ring-blue-500');
                                    });
                                    document.querySelectorAll('#navEndpoints a').forEach(link => {
                                        link.classList.remove('font-medium');
                                    });
                                    const targetElement = document.getElementById(targetId);
                                    if (targetElement) {
                                        targetElement.classList.add('ring-2', 'ring-blue-500');
                                        e.target.classList.add('font-medium');
                                        const yOffset = targetElement.offsetTop - 80;
                                        window.scrollTo({
                                            top: yOffset,
                                            behavior: 'smooth'
                                        });
                                    }
                                }
                            });
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            const errorDiv = document.createElement('div');
                            errorDiv.className = 'text-red-500 text-center py-4';
                            errorDiv.textContent = 'Error al cargar la documentación';
                            endpointsContainer.appendChild(errorDiv);
                        });
                });
            </script>

</body>
</html>
```

=== File: ./templates/default/example/example_forms.j2 ===
```jinja-html
{% set form_fields = {
    "nombre": {
        "label": "Nombre del Proyecto",
        "type": "text",
        "required": True,
        "placeholder": "Ej: Proyecto X"
    },
    "contraseña": {
        "label": "Contraseña",
        "type": "password",
        "required": True
    },
    "correo": {
        "label": "Correo Electrónico",
        "type": "email",
        "required": True,
        "placeholder": "ejemplo@dominio.com"
    },
    "fecha_inicio": {
        "label": "Fecha de Inicio",
        "type": "date",
        "required": True
    },
    "fecha_hora": {
        "label": "Fecha y Hora",
        "type": "datetime-local",
        "required": True
    },
    "telefono": {
        "label": "Teléfono",
        "type": "tel",
        "placeholder": "+1234567890"
    },
    "sitio_web": {
        "label": "Sitio Web",
        "type": "url",
        "placeholder": "https://ejemplo.com"
    },
    "presupuesto": {
        "label": "Presupuesto",
        "type": "number",
        "required": True,
        "min": 0,
        "max": 1000000
    },
    "color_fondo": {
        "label": "Color de Fondo",
        "type": "color",
        "required": False
    },
    "mes": {
        "label": "Mes",
        "type": "month",
        "required": True
    },
    "semana": {
        "label": "Semana",
        "type": "week",
        "required": False
    },
    "hora": {
        "label": "Hora",
        "type": "time",
        "required": False
    },
    "busqueda": {
        "label": "Búsqueda",
        "type": "search",
        "placeholder": "Buscar..."
    },
    "progreso": {
        "label": "Progreso",
        "type": "range",
        "min": 0,
        "max": 100
    },
    "documento": {
        "label": "Documento",
        "type": "file",
        "required": False
    },
    "imagen": {
        "label": "Imagen",
        "type": "image",
        "required": False
    },
    "oculto": {
        "label": "Campo Oculto",
        "type": "hidden"
    },
    "estado": {
        "label": "Estado",
        "type": "select",
        "required": True,
        "options": {
            "Activo": "activo",
            "Inactivo": "inactivo",
            "Pendiente": "pendiente"
        },
        "new_value": True  # Permite agregar una opción personalizada
    },
    "prioridad": {
        "label": "Prioridad",
        "type": "radio",
        "required": True,
        "options": {
            "Alta": "alta",
            "Media": "media",
            "Baja": "baja"
        }
    },
    "terminado": {
        "label": "Terminado",
        "type": "checkbox",
        "required": False
    }
}
%}
{% block extra_js %}
<script>
{{ super() }} // para incluir el js preexistente
    function initializeFieldHandlers() {
        // text
        const nombre = document.getElementById('nombre');
        if (nombre) {
            nombre.addEventListener('input', function(e) {
                if (e.target.value.length > 50) {
                    e.target.value = e.target.value.slice(0, 50);
                    alert('El nombre no puede exceder 50 caracteres');
                }
            });
        }

        // password
        const contraseña = document.getElementById('contraseña');
        if (contraseña) {
            contraseña.addEventListener('change', function(e) {
                if (e.target.value.length < 8) {
                    e.target.setCustomValidity('La contraseña debe tener al menos 8 caracteres');
                } else {
                    e.target.setCustomValidity('');
                }
            });
        }

        // email
        const correo = document.getElementById('correo');
        if (correo) {
            correo.addEventListener('input', function(e) {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(e.target.value)) {
                    e.target.setCustomValidity('Correo inválido');
                } else {
                    e.target.setCustomValidity('');
                }
            });
        }

        // date
        const fechaInicio = document.getElementById('fecha_inicio');
        if (fechaInicio) {
            fechaInicio.addEventListener('change', function(e) {
                const today = new Date().toISOString().split('T')[0];
                if (e.target.value < today) {
                    e.target.setCustomValidity('La fecha no puede ser anterior a hoy');
                } else {
                    e.target.setCustomValidity('');
                }
            });
        }

        // datetime-local
        const fechaHora = document.getElementById('fecha_hora');
        if (fechaHora) {
            fechaHora.addEventListener('change', function(e) {
                const now = new Date().toISOString().slice(0, 16);
                if (e.target.value < now) {
                    e.target.setCustomValidity('La fecha y hora no pueden ser pasadas');
                } else {
                    e.target.setCustomValidity('');
                }
            });
        }

        // tel
        const telefono = document.getElementById('telefono');
        if (telefono) {
            telefono.addEventListener('input', function(e) {
                e.target.value = e.target.value.replace(/[^0-9+]/g, '');
            });
        }

        // url
        const sitioWeb = document.getElementById('sitio_web');
        if (sitioWeb) {
            sitioWeb.addEventListener('input', function(e) {
                if (!e.target.value.startsWith('http')) {
                    e.target.value = 'https://' + e.target.value;
                }
            });
        }

        // number
        const presupuesto = document.getElementById('presupuesto');
        if (presupuesto) {
            presupuesto.addEventListener('change', function(e) {
                const value = parseFloat(e.target.value);
                if (value < 0 || value > 1000000) {
                    e.target.setCustomValidity('El presupuesto debe estar entre 0 y 1,000,000');
                } else {
                    e.target.setCustomValidity('');
                }
            });
        }

        // color
        const colorFondo = document.getElementById('color_fondo');
        if (colorFondo) {
            colorFondo.addEventListener('change', function(e) {
                document.body.style.backgroundColor = e.target.value;
            });
        }

        // month
        const mes = document.getElementById('mes');
        if (mes) {
            mes.addEventListener('change', function(e) {
                console.log('Mes seleccionado:', e.target.value);
            });
        }

        // week
        const semana = document.getElementById('semana');
        if (semana) {
            semana.addEventListener('change', function(e) {
                console.log('Semana seleccionada:', e.target.value);
            });
        }

        // time
        const hora = document.getElementById('hora');
        if (hora) {
            hora.addEventListener('change', function(e) {
                console.log('Hora seleccionada:', e.target.value);
            });
        }

        // search
        const busqueda = document.getElementById('busqueda');
        if (busqueda) {
            busqueda.addEventListener('input', function(e) {
                console.log('Buscando:', e.target.value);
            });
        }

        // range
        const progreso = document.getElementById('progreso');
        if (progreso) {
            progreso.addEventListener('input', function(e) {
                console.log('Progreso:', e.target.value + '%');
            });
        }

        // file
        const documento = document.getElementById('documento');
        if (documento) {
            documento.addEventListener('change', function(e) {
                if (e.target.files[0] && e.target.files[0].size > 5 * 1024 * 1024) { // 5MB
                    alert('El archivo no puede exceder 5MB');
                    e.target.value = '';
                }
            });
        }

        // image (tratado como input de archivo en este contexto)
        const imagen = document.getElementById('imagen');
        if (imagen) {
            imagen.addEventListener('change', function(e) {
                if (e.target.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        console.log('Imagen cargada:', event.target.result);
                    };
                    reader.readAsDataURL(e.target.files[0]);
                }
            });
        }

        // hidden
        const oculto = document.getElementById('oculto');
        if (oculto) {
            oculto.value = 'valor_oculto'; // Ejemplo de asignación
            console.log('Valor oculto asignado:', oculto.value);
        }

        // select
        const estado = document.getElementById('estado');
        if (estado) {
            estado.addEventListener('change', function(e) {
                const customInput = document.getElementById('estado_custom');
                if (e.target.value === 'other' && customInput) {
                    customInput.focus();
                }
            });
        }

        // radio
        const prioridadRadios = document.getElementsByName('prioridad');
        prioridadRadios.forEach(radio => {
            radio.addEventListener('change', function(e) {
                console.log('Prioridad seleccionada:', e.target.value);
            });
        });

        // checkbox
        const terminado = document.getElementById('terminado');
        if (terminado) {
            terminado.addEventListener('change', function(e) {
                console.log('Terminado:', e.target.checked);
            });
        }
    }

    // Ejecutar las inicializaciones cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', initializeFieldHandlers);

    // Modificar saveProyecto para manejar todos los tipos de campos
    async function saveProyecto() {
        const data = {
            nombre: document.getElementById('nombre').value,
            contraseña: document.getElementById('contraseña').value,
            correo: document.getElementById('correo').value,
            fecha_inicio: document.getElementById('fecha_inicio').value,
            fecha_hora: document.getElementById('fecha_hora').value,
            telefono: document.getElementById('telefono').value,
            sitio_web: document.getElementById('sitio_web').value,
            presupuesto: document.getElementById('presupuesto').value,
            color_fondo: document.getElementById('color_fondo').value,
            mes: document.getElementById('mes').value,
            semana: document.getElementById('semana').value,
            hora: document.getElementById('hora').value,
            busqueda: document.getElementById('busqueda').value,
            progreso: document.getElementById('progreso').value,
            documento: document.getElementById('documento').files[0] || null,
            imagen: document.getElementById('imagen').files[0] || null,
            oculto: document.getElementById('oculto').value,
            estado: (function() {
                const selectValue = document.getElementById('estado').value;
                const customInput = document.getElementById('estado_custom');
                return (selectValue === 'other' && customInput && !customInput.disabled) ? customInput.value : selectValue;
            })(),
            prioridad: document.querySelector('input[name="prioridad"]:checked')?.value || '',
            terminado: document.getElementById('terminado').checked
        };

        const hasFiles = data.documento !== null || data.imagen !== null;
        let url = '{{ api_url }}';
        let method = currentAction === 'edit' ? 'PUT' : 'POST';

        if (currentAction === 'edit') {
            data.id = currentProyectoId;
            url += currentProyectoId.toString();
        }

        if (hasFiles) {
            const formData = new FormData();
            for (const key in data) {
                if (data[key] !== null && data[key] !== '') {
                    formData.append(key, data[key]);
                }
            }
            await fetch(url, {
                method: method,
                credentials: 'include',
                headers: { "X-CSRF-TOKEN": getCookie("csrf_access_token") },
                body: formData
            }).then(response => response.ok ? location.reload() : alert('Error al guardar'));
        } else {
            await fetch(url, {
                method: method,
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    "X-CSRF-TOKEN": getCookie("csrf_access_token")
                },
                body: JSON.stringify(data)
            }).then(response => response.ok ? location.reload() : alert('Error al guardar'));
        }
    }
</script>
{% endblock %}
```

=== File: ./helpers/mail.py ===
```python
"""
Email sender module for Yet Another Flask Survival Kit (YAFSK).

Author:
    Johnny De Castro <j@jdcastro.co>

Copyright:
    (c) 2024 - 2025 Johnny De Castro. All rights reserved.

License:
    Apache License 2.0 - http://www.apache.org/licenses/LICENSE-2.0

"""

# Python standard library imports
import threading
from typing import List, Optional, Union, Tuple

# Third party imports
from flask_mail import Mail, Message
from flask import current_app
from werkzeug.datastructures import FileStorage

# Local application imports
from app.config import Config

mail = Mail()


class EmailSender:
    def __init__(
        self,
        subject: str,
        message: str,
        recipients: Optional[Union[str, List[str]]] = None,
        attachments: Optional[List[Union[FileStorage, Tuple[str, str]]]] = None,
    ):
        self.subject = subject
        self.message = message
        self.sender = Config.MAIL_DEFAULT_SENDER
        self.recipients = self._get_recipients(recipients)
        self.attachments = attachments or []

    @staticmethod
    def _get_recipients(recipients: Optional[Union[str, List[str]]]) -> List[str]:
        default_recipient = Config.CONTACT_EMAIL
        if recipients is None:
            return [default_recipient]
        if isinstance(recipients, str):
            return [default_recipient, recipients]
        if isinstance(recipients, list):
            return [default_recipient] + recipients
        raise ValueError("Recipients must be a string or a list of strings")

    @staticmethod
    def send_async_email(app, msg: Message) -> None:
        try:
            with app.app_context():
                mail.send(msg)
        except Exception as e:
            current_app.logger.error(f"Failed to send email: {e}")

    def send_mail(self) -> threading.Thread:
        msg = Message(
            subject=self.subject,
            sender=self.sender,
            recipients=self.recipients,
            body=self.message,
        )
        self._attach_files(msg)
        app = current_app._get_current_object()
        thread = threading.Thread(target=self.send_async_email, args=(app, msg))
        thread.start()
        return thread

    def _attach_files(self, msg: Message) -> None:
        for attachment in self.attachments:
            if isinstance(attachment, FileStorage):
                msg.attach(
                    filename=attachment.filename,
                    content_type=attachment.content_type,
                    data=attachment.read(),
                )
            elif isinstance(attachment, tuple):
                filename, file_path = attachment
                with open(file_path, "rb") as f:
                    msg.attach(
                        filename=filename,
                        content_type="application/octet-stream",
                        data=f.read(),
                    )


def send_email(
    subject: str,
    message: str,
    recipients: Optional[Union[str, List[str]]] = None,
    attachments: Optional[List[Union[FileStorage, Tuple[str, str]]]] = None,
) -> threading.Thread:
    email_sender = EmailSender(subject, message, recipients, attachments)
    return email_sender.send_mail()

```

=== File: ./helpers/validators.py ===
```python
"""
Custom API Validator for Flask routes using Marshmallow
module for Yet Another Flask Survival Kit (YAFSK)

Author:
    Johnny De Castro <j@jdcastro.co>

Copyright:
    (c) 2024 - 2025 Johnny De Castro. All rights reserved.

License:
    Apache License 2.0 - http://www.apache.org/licenses/LICENSE-2.0
"""

# Python standard library imports
from functools import wraps
import logging
import re

# Third party imports
from flask import request, jsonify
from marshmallow import Schema, fields, ValidationError, validate


class APIValidator:
    """
    Class to validate input data in Flask routes using Marshmallow.
    Provides a decorator to specify required fields and validations.
    """

    @staticmethod
    def validate_form(**field_rules):
        """
        Decorator to validate input data of an API request.

        :param field_rules: Dictionary with validation rules for each field.
        """

        def decorator(f):
            @wraps(f)
            def decorated_function(*args, **kwargs):
                try:
                    json_data = APIValidator._get_request_data()
                    if not json_data:
                        return jsonify({"error": "No data provided"}), 400

                    schema = APIValidator._create_dynamic_schema(field_rules)
                    data = schema.load(json_data)
                    request.validated_data = data
                    return f(*args, **kwargs)
                except ValidationError as err:
                    return (
                        jsonify(
                            {"error": "Validation failed", "details": err.messages}
                        ),
                        400,
                    )
                except Exception as e:
                    logging.error(f"An error occurred: {e}")
                    return jsonify({"error": "Internal Server Error"}), 500

            return decorated_function

        return decorator

    @staticmethod
    def _get_request_data():
        """Helper method to get request data based on HTTP method."""
        if request.method in ["POST", "PUT", "PATCH"]:
            return request.get_json(silent=True) or dict(request.form)
        elif request.method == "GET":
            return dict(request.args)
        return {}

    @staticmethod
    def _create_dynamic_schema(field_rules):
        """Helper method to create a dynamic Marshmallow Schema."""
        schema_fields = {}

        for field_name, rules in field_rules.items():
            field_type = fields.String
            field_params = {"required": True}
            validators = []

            if isinstance(rules, dict):
                # Extract type, required status, and other parameters
                if "type" in rules:
                    field_type = rules["type"]
                if "required" in rules:
                    field_params["required"] = rules["required"]
                # Extract any other field parameters (e.g., truthy/falsy for Boolean)
                field_params.update(
                    {
                        k: v
                        for k, v in rules.items()
                        if k not in ["type", "validators", "required"]
                    }
                )
                # Extract validators
                if "validators" in rules:
                    val = rules["validators"]
                    validators = val if isinstance(val, list) else [val]
            else:
                # Handle cases where rules are a single validator or list
                if callable(rules):
                    validators = [rules]
                elif isinstance(rules, list):
                    validators = rules

            # Apply validators
            if validators:
                field_params["validate"] = validators

            # Create the field
            schema_fields[field_name] = field_type(**field_params)

        return type("DynamicSchema", (Schema,), schema_fields)()

    @staticmethod
    def validate_boolean(required=True):
        """Validator for boolean fields with custom truthy/falsy values."""
        return {
            "type": fields.Boolean,
            "truthy": {True},
            "falsy": {False},
            "required": required,
        }

    @staticmethod
    def validate_number(min_value=None, max_value=None, required=True):
        """Validator for numeric fields with optional range constraints."""
        validators = []
        if min_value is not None:
            validators.append(validate.Range(min=min_value))
        if max_value is not None:
            validators.append(validate.Range(max=max_value))
        return {"validators": validators, "required": required}

    @staticmethod
    def validate_username(required=True):
        """Validator for usernames (3-20 alphanumeric/underscore characters)."""
        return {
            "validators": [
                validate.Regexp(
                    r"^[a-zA-Z0-9_]{3,20}$", error="Invalid username format."
                )
            ],
            "required": required,
        }

    @staticmethod
    def validate_email(required=True):
        """Validator for email addresses."""
        return {
            "validators": [validate.Email(error="Invalid email format.")],
            "required": required,
        }

    @staticmethod
    def validate_password_strength(
        min_length=8,
        require_upper=True,
        require_lower=True,
        require_digit=True,
        require_special=True,
        required=True,
    ):
        """Validator for password strength requirements."""

        def validator(value):
            errors = []
            if len(value) < min_length:
                errors.append("Must be at least 8 characters.")
            if require_upper and not any(c.isupper() for c in value):
                errors.append("Must contain uppercase letters.")
            if require_lower and not any(c.islower() for c in value):
                errors.append("Must contain lowercase letters.")
            if require_digit and not any(c.isdigit() for c in value):
                errors.append("Must contain digits.")
            if require_special and not any(c in '!@#$%^&*(),.?":{}|<>' for c in value):
                errors.append("Must contain special characters.")
            if errors:
                raise ValidationError(" ".join(errors))

        return {"validators": [validator], "required": required}

    @staticmethod
    def validate_textarea(max_length=None, required=True):
        """Validator for long text fields with optional max length."""
        validators = []
        if max_length:
            validators.append(validate.Length(max=max_length))
        return {"validators": validators, "required": required}

    @staticmethod
    def validate_phone(required=True):
        """Validator for phone numbers (E.164 format)."""
        return {
            "validators": [
                validate.Regexp(
                    r"^\+?[1-9]\d{1,14}$", error="Invalid phone number format."
                )
            ],
            "required": required,
        }

    @staticmethod
    def validate_url(required=True):
        """Validator for URLs (RFC 3986-compliant)."""
        return {
            "validators": [validate.URL(error="Invalid URL format.")],
            "required": required,
        }

    @staticmethod
    def validate_ip(required=True):
        """Validator for IPv4 addresses."""
        return {"type": fields.IPv4, "required": required}

    @staticmethod
    def validate_ipv6(required=True):
        """Validator for IPv6 addresses."""
        return {"type": fields.IPv6, "required": required}

    @staticmethod
    def validate_mac_address(required=True):
        """Validator for MAC addresses (standard format)."""
        return {
            "validators": [
                validate.Regexp(
                    r"^([0-9A-Fa-f]{2}[:-]){5}[0-9A-Fa-f]{2}$",
                    error="Invalid MAC address format.",
                )
            ],
            "required": required,
        }

    @staticmethod
    def validate_credit_card(required=True):
        """Validator for credit card numbers using Luhn algorithm."""

        def luhn_check(value):
            stripped = value.replace(" ", "").replace("-", "")
            if not stripped.isdigit():
                raise ValidationError("Invalid characters.")
            total = 0
            for i, digit in enumerate(str(stripped)[::-1]):
                d = int(digit)
                if i % 2 == 0:
                    total += d
                else:
                    total += d * 2 if d * 2 < 10 else (d * 2 - 9)
            return total % 10 == 0

        def validator(value):
            if not luhn_check(value):
                raise ValidationError("Invalid credit card number.")

        return {"validators": [validator], "required": required}

    @staticmethod
    def validate_date(required=True):
        """Validator for dates (YYYY-MM-DD)."""
        return {"type": fields.Date, "required": required}

    @staticmethod
    def validate_datetime(required=True):
        """Validator for ISO8601 datetimes."""
        return {"type": fields.DateTime, "required": required}

    @staticmethod
    def validate_time(required=True):
        """Validator for times (HH:MM:SS)."""
        return {"type": fields.Time, "required": required}

    @staticmethod
    def validate_color(required=True):
        """Validator for hexadecimal color codes."""
        return {
            "validators": [
                validate.Regexp(
                    r"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$", error="Invalid color format."
                )
            ],
            "required": required,
        }

    @staticmethod
    def validate_radio(choices, required=True):
        """Validator for radio fields with predefined choices."""
        return {
            "validators": [
                validate.OneOf(
                    choices, error="Value must be one of the allowed options."
                )
            ],
            "required": required,
        }

    @staticmethod
    def validate_select(choices, required=True):
        """Validator for select fields with predefined choices."""
        return {
            "validators": [
                validate.OneOf(
                    choices, error="Value must be one of the allowed options."
                )
            ],
            "required": required,
        }

    @staticmethod
    def validate_isbn(required=True):
        """Validator for ISBN-10 and ISBN-13 numbers."""

        def validator(value):
            cleaned = re.sub(r"[^0-9X]", "", value.upper())
            if len(cleaned) == 10:
                total = 0
                for i, c in enumerate(cleaned):
                    if c == "X":
                        if i != 9:
                            raise ValidationError("Invalid ISBN-10.")
                        total += 10
                    else:
                        total += int(c) * (10 - i)
                if total % 11 != 0:
                    raise ValidationError("Invalid ISBN-10.")
            elif len(cleaned) == 13:
                total = 0
                for i, c in enumerate(cleaned):
                    digit = int(c)
                    total += digit if i % 2 == 0 else 3 * digit
                if total % 10 != 0:
                    raise ValidationError("Invalid ISBN-13.")
            else:
                raise ValidationError("Invalid ISBN length.")

        return {"validators": [validator], "required": required}

    @staticmethod
    def validate_enum(enum_class, value, required=True):
        """Validate if value belongs to the enum_class"""

        def validator(value):
            try:
                enum_class(value)
            except ValueError:
                raise ValidationError(
                    f"Value must be one of {enum_class.__name__} members."
                )

        return {"validators": [validator], "required": required}

    @staticmethod
    def validate_range(min_value=None, max_value=None, required=True):
        """Validator for numeric range fields."""

        def validator():
            return validate.Range(min=min_value, max=max_value)

        return {"validators": [validator], "required": required}

    @staticmethod
    def validate_month(required=True):
        """Validator for month fields in YYYY-MM format."""

        def validator():
            return fields.String(
                validate=validate.Regexp(r"^\d{4}-(0[1-9]|1[0-2])$"),
                error="Invalid month format. Use YYYY-MM.",
            )

        return {"validators": [validator], "required": required}

    @staticmethod
    def validate_week(required=True):
        """Validator for week fields in YYYY-Www format."""

        def validator():
            return fields.String(
                validate=validate.Regexp(
                    r"^\d{4}-W(0[1-9]|[1-4][0-9]|5[0-3])$",
                    error="Invalid week. Use the format YYYY-Www.",
                )
            )

        return {"validators": [validator], "required": required}

    @staticmethod
    def validate_datetime_local(required=True):
        """Validator for local datetime fields without timezone."""

        def validator():
            return fields.DateTime(
                format="%Y-%m-%dT%H:%M",
                error="Invalid datetime. Use the format YYYY-MM-DDTHH:MM.",
            )

        return {"validators": [validator], "required": required}

```

=== File: ./helpers/error_handler.py ===
```python
"""
Custom error handler module for Yet Another Flask Survival Kit (YAFSK)

Author:
    Johnny De Castro <j@jdcastro.co>

Copyright:
    (c) 2024 - 2025 Johnny De Castro. All rights reserved.

License:
    Apache License 2.0 - http://www.apache.org/licenses/LICENSE-2.0

"""

# Python standard library imports
import logging
from logging.handlers import RotatingFileHandler
import traceback
import json

# Third party imports
from flask import request, render_template, Response, Flask
from werkzeug.exceptions import HTTPException


def setup_logging(log_file="errors.log"):
    """
    Configures logging with a rotating file handler.

    Args:
        log_file (str): Path to the log file.

    Returns:
        logging.Logger: Configured logger instance.
    """
    handler = RotatingFileHandler(
        log_file,
        maxBytes=1024 * 1024,  # 1MB per file
        backupCount=10,  # Keep up to 10 backup files
    )
    handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
    logger = logging.getLogger(__name__)
    logger.addHandler(handler)
    logger.setLevel(logging.ERROR)

    return logger

def error_handler(app: Flask, logger) -> None:
    """Register global error handlers for the Flask application.

    Args:
        app: Flask application instance.
        logger: Configured logger instance for error logging.
    """

    def _is_api_request() -> bool:
        """Determine if the request is for an API endpoint.

        Returns:
            bool: True if the request expects JSON (e.g., Accept header or URL pattern), False otherwise.
        """
        accept_header = request.headers.get("Accept", "").lower()
        return (
            "application/json" in accept_header
            or request.path.startswith("/api/")
        )

    @app.errorhandler(Exception)
    def handle_exception(e: Exception) -> tuple:
        """Handle global exceptions, log them, and return appropriate responses.

        Args:
            e: The exception instance to handle.

        Returns:
            tuple: Response (JSON or HTML) and HTTP status code.
        """
        # Log the error with additional request context
        logger.error(
            f"Error occurred: {str(e)}\n"
            f"Method: {request.method}, Path: {request.path}, "
            f"Headers: {request.headers}, Body: {request.get_data(as_text=True)}\n"
            f"Traceback: {traceback.format_exc()}"
        )

        # Determine error details based on exception type
        if isinstance(e, HTTPException):
            error_code = e.code
            error_description = e.name
            error_details = e.description if hasattr(e, "description") else str(e)
        else:
            error_code = 500
            error_description = "Internal Server Error"
            error_details = "An unexpected error occurred on the server."

        # Choose response format based on request type
        if _is_api_request():
            # JSON response for API requests
            response_data = {
                "status": "error",
                "message": error_description,
                "code": error_code,
                "details": error_details,
            }
            return Response(
                json.dumps(response_data, ensure_ascii=False, indent=4),
                status=error_code,
                mimetype="application/json",
            )
        else:
            # HTML response for web requests
            try:
                return (
                    render_template(
                        "layouts/error_handler.j2",
                        e=error_code,
                        e_description=error_description,
                        e_details=error_details,
                    ),
                    error_code,
                )
            except Exception as template_error:
                # Fallback if template rendering fails
                logger.error(f"Template rendering failed: {str(template_error)}")
                return (
                    f"Error {error_code}: {error_description} - {error_details}",
                    error_code,
                )

```

=== File: ./helpers/route_lister.py ===
```python
"""
Custom Route Lister View for Flask routes
module for Yet Another Flask Survival Kit (YAFSK)

Author:
    Johnny De Castro <j@jdcastro.co>

Copyright:
    (c) 2024 - 2025 Johnny De Castro. All rights reserved.

License:
    Apache License 2.0 - http://www.apache.org/licenses/LICENSE-2.0

"""

# Python standard library imports
from typing import Dict, Union, List

# Third party imports
from flask import current_app, json
from flask.views import MethodView


class RouteLister(MethodView):
    """
    View for listing all application routes with their documentation
    """

    def get(self):
        """
        Lists all application routes with their documentation
        :return: JSON with list of routes
        """
        output = [
            self._get_endpoint_info(rule)
            for rule in current_app.url_map.iter_rules()
            if rule.endpoint != "static"
        ]
        return current_app.response_class(
            response=json.dumps(output, ensure_ascii=False, indent=2),
            status=200,
            mimetype="application/json; charset=utf-8",
        )

    def _get_endpoint_info(self, rule) -> Dict[str, Union[str, List[str], Dict]]:
        """
        Retrieves information about a specific endpoint
        :param rule: URL rule object
        :return: Dictionary with endpoint information
        """
        endpoint_info = {
            "endpoint": rule.endpoint,
            "url": rule.rule,
            "methods": ",".join(rule.methods),
            "options": {arg: f"[{arg}]" for arg in rule.arguments},
            "parameters": [],
            "response_codes": [],
            "documentation": "",
            "method_docs": {},
        }
        func = current_app.view_functions.get(rule.endpoint)
        if func:
            endpoint_info.update(self._extract_docs(func))

        return endpoint_info

    def _extract_docs(self, func) -> Dict[str, Union[str, List[str], Dict]]:
        """
        Extracts documentation from a function or class
        :param func: View function or class
        :return: Dictionary with extracted documentation data
        """
        docstring = self._get_docstring(func)
        if not docstring:
            return {"documentation": "No documentation available"}

        general_description, general_params, general_responses, method_docs = (
            self._parse_docstring(docstring)
        )

        if hasattr(func, "view_class"):
            view_class = func.view_class
            docstring = view_class.__doc__
            method_docs.update(self._get_method_docs(view_class, func.methods or []))

        return {
            "documentation": general_description,
            "parameters": general_params,
            "response_codes": general_responses,
            "method_docs": method_docs or None,
        }

    @staticmethod
    def _get_docstring(func):
        """
        Safely retrieves the docstring from a function or class
        :param func: View function or class
        :return: Docstring or empty string
        """
        docstring = func.__doc__
        return docstring.strip() if docstring else ""

    from typing import List, Dict, Tuple

    @staticmethod
    def _parse_docstring(
        docstring: str,
    ) -> Tuple[str, List[str], List[str], Dict[str, Dict[str, List[str]]]]:
        """
        Parses the docstring for general and method-specific documentation.
        
        :param docstring: Raw docstring
        :return: Tuple with parsed general description, parameters, response codes, and method documentation.
        """
        lines = docstring.split("\n")
        general_description, general_params, general_responses, method_docs = (
            [], [], [], {}
        )

        for line in lines:
            line_stripped = line.strip()
            if line_stripped.startswith(":param"):
                general_params.append(line_stripped.replace(":param", "").strip())
            elif line_stripped.startswith(":status"):
                general_responses.append(line_stripped.replace(":status", "").strip())
            else:
                general_description.append(line_stripped)

        return (
            "\n".join(general_description).strip(),
            general_params,
            general_responses,
            method_docs,
        )


    def _get_method_docs(self, view_class, methods) -> Dict[str, Dict[str, List[str]]]:
        """
        Retrieves documentation for each method in a view class
        :param view_class: View class
        :param methods: List of HTTP methods
        :return: Dictionary with method documentation
        """
        method_docs = {}
        for method in methods:
            method_lower = method.lower()
            method_func = getattr(view_class, method_lower, None)
            if method_func:
                method_docstring = method_func.__doc__
                if method_docstring:
                    _, method_params, method_responses, _ = self._parse_docstring(
                        method_docstring
                    )
                    method_docs[method] = {
                        "parameters": method_params,
                        "response_codes": method_responses,
                    }
        return method_docs

```

=== File: ./helpers/helpers_functions.py ===
```python
from flask_jwt_extended import get_jwt_identity, verify_jwt_in_request
from app.core.models import User


def merge_dicts(original, new_values):
    """Merge two dictionaries in Jinja2."""
    if not isinstance(original, dict) or not isinstance(new_values, dict):
        return original
    merged = original.copy()  # Hacemos una copia para evitar modificar el original
    merged.update(new_values)
    return merged


def inject_user():
    user_id = None
    username = None
    rol = None

    try:
        # Verifica si hay un token JWT en la solicitud
        verify_jwt_in_request(optional=True)
        user_id = get_jwt_identity()
        if user_id:
            user = User.query.get(user_id)
            if user:
                username = user.username
                rol = user.role.value
    except Exception:
        pass  # Si no hay token o hay un error, simplemente pasa

    return {"user_id": user_id, "username": username, "rol": rol}

```

=== File: ./helpers/crud_pattern.py ===
```python
from typing import List, Dict, Any
import json

from flask import Response, request, json
from flask_jwt_extended import jwt_required, get_jwt
from flask.views import MethodView
from werkzeug.exceptions import BadRequest, Forbidden, NotFound
from sqlalchemy.exc import SQLAlchemyError

from app.core.models import RoleEnum, User, ResellerPackage
from app.extensions import db


class CRUDMixin(MethodView):
    """Generic mixin for CRUD operations with customization support."""

    decorators = [jwt_required()]

    def __init__(self, model, schema, service, required_roles=None):
        """Initialize CRUD operations with model, schema, service, and access control.

        Args:
            model: SQLAlchemy model class for database operations.
            schema: Marshmallow schema for serialization/deserialization.
            service: Business logic service for model operations.
            required_roles: List of roles allowed to access resources (default: ['administrator']).
        """
        self.model = model
        self.schema = schema
        self.service = service
        self.required_roles = required_roles or ["administrator"]

    def get(self, resource_id=None):
        """Retrieve a single resource or a list of resources.

        Args:
            resource_id: ID of the resource to retrieve (optional).

        Returns:
            Response: JSON response with the resource or list of resources.
        """
        if resource_id:
            return self._get_resource(resource_id)
        return self._get_resource_list()

    def post(self):
        """Create a new resource with validated input data.

        Returns:
            Response: JSON response with the created resource.

        Raises:
            BadRequest: If required fields are missing in the data.
        """
        data = self.schema.load(request.get_json())
        if not data or not self._validate_required_fields(data):
            raise BadRequest("Missing required fields.")
        return self._create_resource(data)

    def put(self, resource_id):
        """Update an existing resource by ID.

        Args:
            resource_id: ID of the resource to update.

        Returns:
            Response: JSON response with the updated resource.

        Raises:
            BadRequest: If resource_id or data is missing.
        """
        data = request.get_json()
        if not data or not resource_id:
            raise BadRequest("Missing resource_id or data.")
        return self._update_resource(resource_id, data)

    def delete(self, resource_id=None):
        """Delete one or multiple resources by ID(s).

        Args:
            resource_id: ID of the resource to delete (optional).

        Returns:
            Response: JSON response confirming the deletion.

        Raises:
            BadRequest: If neither resource_id nor a list of IDs is provided.
        """
        data = request.get_json()
        if data and "ids" in data:
            return self._delete_resources(data["ids"])
        if resource_id:
            return self._delete_resource(resource_id)
        raise BadRequest("Missing resource_id.")

    def _get_resource_list(self):
        """Retrieve all resources filtered by user access with optional pagination.

        Returns:
            Response: JSON response with the list of accessible resources.

        Raises:
            BadRequest: If pagination parameters are invalid.
            Forbidden: If the user has no access to any resources.
        """
        claims = get_jwt()
        page = request.args.get("page", type=int)
        per_page = request.args.get("per_page", type=int)
        pagination_requested = page is not None or per_page is not None

        if pagination_requested:
            page = page if page is not None else 1
            per_page = per_page if per_page is not None else 10

            if page < 1:
                raise BadRequest("Page number must be 1 or greater.")
            if per_page < 1 or per_page > 100:
                raise BadRequest("Per_page must be between 1 and 100.")

            pagination = self.service.get_all_paginated(page, per_page)
            accessible_items = [
                item for item in pagination.items if self._has_access(item, claims)
            ]

            if pagination.items and not accessible_items:
                raise Forbidden("You do not have access to any resources.")

            data = {
                "items": [self._serialize_resource(item) for item in accessible_items],
                "total": len(accessible_items),
                "pages": (len(accessible_items) + per_page - 1) // per_page if accessible_items else 1,
                "page": page,
                "per_page": per_page,
            }
            return self._build_success_response("Resources retrieved successfully", data)
        else:
            resources = self.service.get_all()
            accessible_resources = [
                resource for resource in resources if self._has_access(resource, claims)
            ]

            if resources and not accessible_resources:
                raise Forbidden("You do not have access to any resources.")

            data = [self._serialize_resource(resource) for resource in accessible_resources]
            return self._build_success_response("Resources retrieved successfully", data)

    def _get_resource(self, resource_id):
        """Retrieve a specific resource by ID with access control.

        Args:
            resource_id: ID of the resource to retrieve.

        Returns:
            Response: JSON response with the resource.

        Raises:
            NotFound: If the resource does not exist.
            Forbidden: If the user has no access to the resource.
        """
        resource = self.service.get_by_id(resource_id)
        if not resource:
            raise NotFound(f"Resource {resource_id} not found.")
        claims = get_jwt()
        if not self._has_access(resource, claims):
            raise Forbidden("You do not have access to this resource.")
        data = self._serialize_resource(resource)
        return self._build_success_response(
            f"Resource {resource_id} retrieved successfully", data
        )

    def _create_resource(self, data):
        """Create and return a new resource instance with access check.

        Args:
            data: Data for the resource to create.

        Returns:
            Response: JSON response with the created resource.

        Raises:
            Forbidden: If the user lacks permission to create the resource.
        """
        claims = get_jwt()
        temp_resource = self.model(**data)
        if not self._has_access(temp_resource, claims):
            raise Forbidden("You do not have permission to create this resource.")
        resource = self.service.create(data)
        data = self._serialize_resource(resource)
        return self._build_success_response(
            "Resource created successfully", data, status_code=201
        )

    def _update_resource(self, resource_id, data):
        """Update an existing resource with provided data and access check.

        Args:
            resource_id: ID of the resource to update.
            data: Data to update the resource with.

        Returns:
            Response: JSON response with the updated resource.

        Raises:
            NotFound: If the resource does not exist.
            Forbidden: If the user lacks access to the resource or the changes.
        """
        claims = get_jwt()
        resource = self.service.get_by_id(resource_id)
        if not resource:
            raise NotFound(f"Resource {resource_id} not found.")
        if not self._has_access(resource, claims):
            raise Forbidden("You do not have access to update this resource.")

        temp_resource = self.model(**{**self.schema.dump(resource), **data})
        if not self._has_access(temp_resource, claims):
            raise Forbidden(
                "You do not have permission to update this resource with these changes."
            )

        updated_resource = self.service.update(resource_id, data)
        data = self._serialize_resource(updated_resource)
        return self._build_success_response(
            f"Resource {resource_id} updated successfully", data
        )

    def _delete_resource(self, resource_id):
        """Delete a single resource by ID with access check.

        Args:
            resource_id: ID of the resource to delete.

        Returns:
            Response: JSON response confirming the deletion.

        Raises:
            NotFound: If the resource does not exist.
            Forbidden: If the user lacks access to delete the resource.
        """
        claims = get_jwt()
        resource = self.service.get_by_id(resource_id)
        if not resource:
            raise NotFound(f"Resource {resource_id} not found.")
        if not self._has_access(resource, claims):
            raise Forbidden("You do not have access to delete this resource.")

        self.service.delete(resource_id)
        return self._build_success_response(
            f"Resource {resource_id} deleted successfully"
        )

    def _delete_resources(self, resource_ids):
        """Delete multiple resources by a list of IDs with access check.

        Args:
            resource_ids: List of resource IDs to delete.

        Returns:
            Response: JSON response confirming the deletion.

        Raises:
            Forbidden: If no resources were deleted due to permission restrictions.
        """
        deleted_resources = self.service.delete_multiple(resource_ids)
        if not deleted_resources:
            raise Forbidden(
                "No resources were deleted due to permission restrictions."
            )
            
        deleted_resources_str = ", ".join(map(str, deleted_resources))    
        return self._build_success_response(
            f"Resources {deleted_resources_str} deleted successfully"
        )

    def _validate_required_fields(self, data):
        """Validate the presence of required fields in incoming data.

        Args:
            data: Data to validate.

        Returns:
            bool: True if the data is valid, False otherwise.

        Note:
            Override this method to implement custom validation checks.
        """
        return True

    def _serialize_resource(self, resource):
        """Serialize a resource using the configured schema.

        Args:
            resource: Resource to serialize.

        Returns:
            dict: Serialized representation of the resource.
        """
        return self.schema.dump(resource)

    def _has_access(self, resource, claims):
        """Check user authorization to access a specific resource.

        Args:
            resource: Resource to check.
            claims: JWT claims of the user.

        Returns:
            bool: True if the user has access, False otherwise.
        """
        user_role = claims.get("rol")

        if user_role == RoleEnum.ADMINISTRATOR.value:
            return True

        if user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            if not reseller_package:
                return False
            return any(
                org.id == getattr(resource, "org_id", None)
                for org in reseller_package.organizations
            )

        if user_role == RoleEnum.ORG_ADMIN.value or user_role == RoleEnum.ORG_EDITOR.value or user_role == RoleEnum.ORG_VIEWER.value:
            user_id = claims.get("user_id")
            if not user_id:
                return False
            user = User.query.get(user_id)
            if not user:
                return False
            resource_org_id = getattr(resource, "org_id", None)
            if resource_org_id is None:
                return False
            return any(org.id == resource_org_id for org in user.organizations)

        return False

    def _build_success_response(self, message, data=None, status_code=200):
        """Build a successful JSON response.

        Args:
            message: Success message.
            data: Data to include in the response (optional).
            status_code: HTTP status code (default: 200).

        Returns:
            Response: JSON response with the standardized format.
        """
        response_data = {"status": "success", "message": message}
        if data is not None:
            response_data["data"] = data
        return Response(
            json.dumps(response_data, ensure_ascii=False, indent=4),
            status=status_code,
            mimetype="application/json",
        )


class BaseService:
    """Base service class for business logic operations (CRUD operations)."""

    def __init__(self, model: Any) -> None:
        """Initialize the service with an associated SQLAlchemy model.

        Args:
            model: SQLAlchemy model class for database operations.
        """
        self.model = model

    def get_all(self) -> List[Any]:
        """Retrieve all resources from the database.

        Returns:
            List[Any]: List of all resource instances.
        """
        return self.model.query.all()

    def get_all_paginated(self, page: int, per_page: int) -> Any:
        """Retrieve all resources with pagination.

        Args:
            page: Page number to retrieve (1-based).
            per_page: Number of items per page.

        Returns:
            Any: Pagination object containing the resources.
        """
        return self.model.query.paginate(
            page=page, per_page=per_page, error_out=False
        )

    def get_by_id(self, resource_id: Any) -> Any:
        """Retrieve a single resource by its primary key.

        Args:
            resource_id: ID of the resource to retrieve.

        Returns:
            Any: Resource instance if found.

        Raises:
            NotFound: If the resource with the given ID does not exist.
        """
        resource = self.model.query.get(resource_id)
        if not resource:
            raise NotFound(f"Resource {resource_id} not found.")
        return resource

    def get_by_filter(self, filter_data: Dict[str, Any]) -> List[Any]:
        """Retrieve a list of resources matching the provided filter.

        Args:
            filter_data: Dictionary of filter criteria (e.g., {'org_id': 1}).

        Returns:
            List[Any]: List of resource instances matching the filter.
        """
        return self.model.query.filter_by(**filter_data).all()

    def get_by_reseller(self, reseller_id: Any) -> List[Any]:
        """Retrieve resources linked to a reseller account.

        Args:
            reseller_id: ID of the reseller account.

        Returns:
            List[Any]: List of resources associated with the reseller's organizations.

        Raises:
            NotFound: If the reseller package is not found.
        """

        reseller_package = ResellerPackage.query.filter_by(
            reseller_id=reseller_id
        ).first()
        if not reseller_package:
            raise NotFound("Reseller package not found.")

        resources = []
        for organization in reseller_package.organizations:
            resources.extend(
                self.model.query.filter_by(org_id=organization.id).all()
            )
        return resources

    def get_by_reseller_paginated(self, reseller_id: Any, page: int, per_page: int) -> Any:
        """Retrieve paginated resources linked to a reseller account.

        Args:
            reseller_id: ID of the reseller account.
            page: Page number to retrieve (1-based).
            per_page: Number of items per page.

        Returns:
            Any: Pagination object containing the resources.

        Raises:
            NotFound: If the reseller package is not found.
        """

        reseller_package = ResellerPackage.query.filter_by(
            reseller_id=reseller_id
        ).first()
        if not reseller_package:
            raise NotFound("Reseller package not found.")

        query = self.model.query.filter(
            self.model.org_id.in_([org.id for org in reseller_package.organizations])
        )
        return query.paginate(page=page, per_page=per_page, error_out=False)

    def create(self, data: Dict[str, Any]) -> Any:
        """Create a new resource instance.

        Args:
            data: Dictionary of data to create the resource.

        Returns:
            Any: Newly created resource instance.
        """
        
        try:
            resource = self.model(**self._prepare_create_data(data))
            db.session.add(resource)
            db.session.commit()
            return resource
        except SQLAlchemyError as e:
            db.session.rollback()
            raise e

    def update(self, resource_id: Any, data: Dict[str, Any]) -> Any:
        """Update an existing resource with provided data.

        Args:
            resource_id: ID of the resource to update.
            data: Dictionary of data to update the resource.

        Returns:
            Any: Updated resource instance.

        Raises:
            NotFound: If the resource with the given ID does not exist.
        """
        resource = self.get_by_id(resource_id)
        self._update_resource(resource, data)
        db.session.commit()
        return resource

    def delete(self, resource_id: Any) -> None:
        """Delete a single resource by its ID or deactivate it if it has an active flag.

        Args:
            resource_id: ID of the resource to delete.

        Raises:
            NotFound: If the resource with the given ID does not exist.
        """
        resource = self.get_by_id(resource_id)
        if hasattr(resource, "active"):
            resource.active = False
            db.session.commit()
        else:
            db.session.delete(resource)
            db.session.commit()

    def delete_multiple(self, resource_ids: List[Any]) -> List[Any]:
        """Delete multiple resources by a list of IDs or deactivate them if they have an active flag.

        Args:
            resource_ids: List of resource IDs to delete.

        Returns:
            List[Any]: List of IDs of resources that were successfully processed (deleted or deactivated).
        """
        processed_ids = []
        try:
            for resource_id in resource_ids:
                resource = self.model.query.get(resource_id)
                if resource:
                    if hasattr(resource, "active"):
                        resource.active = False
                    else:
                        db.session.delete(resource)
                    processed_ids.append(resource_id)
            db.session.commit()
            
        except SQLAlchemyError as e:
            db.session.rollback()
            raise e
        return processed_ids

    def _prepare_create_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data before resource creation.

        Args:
            data: Raw data to prepare.

        Returns:
            Dict[str, Any]: Prepared data for resource creation.

        Note:
            Override this method to implement custom validation or data transformation.
        """
        return data

    def _update_resource(self, resource: Any, data: Dict[str, Any]) -> None:
        """Update resource attributes with provided data.

        Args:
            resource: Resource instance to update.
            data: Dictionary of data to apply to the resource.

        Note:
            Override this method to restrict or edit fields as needed.
        """
        allowed_fields = self.model._sa_class_manager.mapper.column_attrs.keys()
        for key, value in data.items():
            if key in allowed_fields:
                setattr(resource, key, value)
```

=== File: ./core/__init__.py ===
```python
from flask import Blueprint

core = Blueprint("core", __name__, url_prefix="/", template_folder="templates")

core_api = Blueprint("core_api", __name__, url_prefix="/api/core")

from . import web_routes, api_routes

```

=== File: ./core/web_routes.py ===
```python
"""📃 Rutas de páginas de la aplicación (jinja2)"""

# Third party imports
from flask import render_template, redirect, url_for, request
from flask_jwt_extended import (
    verify_jwt_in_request,
    get_jwt_identity,
    jwt_required,
    get_jwt,
)

# from sqlalchemy.orm import joinedload

# Local application imports
from . import core as web
from .controller import UserView, OrgView, InstallationView, login_required
from .models import User, get_clients_for_user, RoleEnum

__doc__ = """
paginas de bienvenida y contenido general
"""


def get_dashboard_menu():
    return {
        "menu": [
            {"name": "Home", "url": url_for("core.index")},
            {"name": "Logout", "url": url_for("core.logout")},
            {"name": "Profile", "url": url_for("core.profile")},
        ]
    }


@web.route("/")
def index():
    """Página: Inicio de la aplicación "Welcome Page"
    :param None: No requiere parámetros, opcional obtiene el ID del usuario autenticado
    :status 200: Retorna la página principal
    """
    user_authenticated = False
    claims = None  # Initialize claims variable here
    context = {
        "has_login_button": True,
        "is_full_width": True,
        "title": "Welcome",
        "description": "Bienvenido a TecnoAgro.",
        "keywords": "gestión foliar, manejo de suelos y cultivos",
        "author": "Johnny De Castro",
        "site_title": "Software para gestión de  datos de foliar",
        "og_image": "/img/og-image.jpg",
        "twitter_image": "/img/twitter-image.jpg",
    }
    try:
        verify_jwt_in_request()
        claims = get_jwt_identity()
        if claims is not None:
            user_authenticated = True
        else:
            user_authenticated = False
    except Exception as e:
        # Si hay un error al obtener el token, asume que no está autenticado
        user_authenticated = False
    return (
        render_template(
            "home.j2",
            is_user_authenticated=user_authenticated,
            **context,
            request=request,
        ),
        200,
    )


__doc__ = """
Paginas de autenticacion y autorizacion
"""


@web.route("/login")
def login():
    """Página: Inicio de sesión. Implementa core_api.login"""
    context = {
        "has_login_button": False,
        "is_full_width": True,
        "title": "Bienvenido a App TecnoAgro",
        "description": "Acceso a la aplicación.",
        "author": "Johnny De Castro",
        "site_title": "Login",
        "og_image": "/img/og-image.jpg",
        "twitter_image": "/img/twitter-image.jpg",
    }
    try:
        verify_jwt_in_request()
        user_id = get_jwt_identity()
        if user_id:
            return redirect(url_for("core.dashboard"))
    except:
        pass
    return render_template(
        "login.j2", login_status="not_authenticated", **context, request=request
    )


@web.route("/logout")
def logout():
    """Página de cierre de sesión. Implementa core_api.logout"""
    return render_template("logout.j2")


__doc__ = """
Paginas de dashboard y administracion
"""


@web.route("/dashboard")
@login_required
def dashboard():

    context = {
        "dashboard": True,
        "title": "Dashboard TecnoAgro",
        "description": "Panel de control.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "og_image": "/img/og-image.jpg",
        "twitter_image": "/img/twitter-image.jpg",
        "data_menu": get_dashboard_menu(),
    }

    return (
        render_template(
            "dashboard/welcome.j2",
            **context,
            request=request,
        ),
        200,
    )


@web.route("/home/not-authorized")
def not_authorized():
    """
    Página de error para usuarios no autorizados
    """
    return render_template("dashboard/not_authorized.j2")


@web.route("/dashboard/users")
@jwt_required()
def amd_users():
    """
    Página: Renderiza la vista de usuarios
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de usuarios",
        "description": "Administración de usuarios.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    user_view = UserView()
    response, status_code = user_view._get_user_list()
    items = response.get_json()
    assigned_org = get_clients_for_user(user_id)
    org_dict = {org.name: org.id for org in assigned_org}
    # logging.error("Items obtenidos: %s, org_dict: %s", items, org_dict)

    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "dashboard/users.j2",
            items=items,
            org_dict=org_dict,
            **context,
            request=request,
        ),
        200,
    )


@web.route("/dashboard/clients")
@jwt_required()
def amd_clients():
    """
    Página: Renderiza la vista de clientes
    """
    claims = get_jwt()
    user_role = claims.get("rol")
    user_id = claims.get("id")
    context = {
        "dashboard": True,
        "title": "Gestión de clientes",
        "description": "Administración de clientes.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    org_view = OrgView()
    response, status_code = org_view._get_org_list()
    if status_code != 200:
        return render_template("error.j2"), status_code
    items = response.get_json()
    if user_role == "administrator":
        # Obtener todos los usuarios con rol reseller
        resellers = User.query.filter_by(role=RoleEnum.RESELLER).all()
        reseller_dict = {"Sin Reseller": None}
        for user in resellers:
            reseller_dict[user.full_name] = user.id
    elif user_role == "reseller":
        # Obtener el usuario actual
        user = User.query.get(user_id)
        reseller_dict = {user.full_name: user.username}
    return (
        render_template(
            "dashboard/clients.j2",
            items=items,
            reseller_dict=reseller_dict,
            **context,
            request=request,
        ),
        200,
    )


@web.route("/dashboard/profile")
@jwt_required()
def profile():
    """
    Página: Renderiza la vista de perfil de usuario
    """
    context = {}
    return render_template("dashboard/profile.j2", **context)


web.add_url_rule("/install", view_func=InstallationView.as_view("install"))

```

=== File: ./core/schemas.py ===
```python
# Third party imports
from marshmallow import fields
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema

# Local application imports
from .models import User, Organization, ResellerPackage, RoleEnum


class UserSchema(SQLAlchemyAutoSchema):
    role = fields.Enum(RoleEnum, by_value=True, dump_only=True)
    organizations = fields.List(fields.Integer(), dump_only=True)
    reseller_packages = fields.List(
        fields.Nested(
            lambda: ResellerPackageSchema(
                only=("id", "max_clients", "current_clients")
            ),
            dump_only=True,
        ),
        dump_only=True,
    )
    profile_data = fields.Raw(dump_only=True)  # To include JSON profile data as is

    class Meta:
        model = User
        exclude = ["password_hash"]
        include_relationships = False
        load_instance = False  # For output, not needed


class OrganizationSchema(SQLAlchemyAutoSchema):
    users = fields.List(
        fields.String(),
        attribute=lambda obj: [str(u.id) for u in obj.users],
        dump_only=True,
    )
    reseller_package = fields.Nested(
        lambda: ResellerPackageSchema(only=("id", "reseller", "max_clients")),
        dump_only=True,
    )

    class Meta:
        model = Organization
        exclude = []
        load_instance = False

    # Alternative method-based approach for users field
    # def get_user_ids(self, obj):
    #     return [str(user.id) for user in obj.users]
    # users = fields.Method("get_user_ids", dump_only=True)


class ResellerPackageSchema(SQLAlchemyAutoSchema):
    reseller = fields.Nested(
        lambda: UserSchema(only=("id", "username")), dump_only=True
    )

    class Meta:
        model = ResellerPackage
        exclude = []
        load_instance = False

```

=== File: ./core/api_routes.py ===
```python
# Third party imports
from flask import jsonify, request, current_app, views
from flask_jwt_extended import unset_jwt_cookies

# Local application imports
from . import core_api as api
from .controller import (
    login_required,
    LoginView,
    RefreshView,
    UserView,
    OrgView,
)

#############################################
# Set up the API routes for the core module #
#############################################

####################################
# Login, logout and refresh routes #
####################################
api.add_url_rule("/login", view_func=LoginView.as_view("login"), methods=["POST"])


@api.route("/logout")
@login_required
def logout():
    """Cerrar sesión
    :status 200: Sesión cerrada correctamente
    """
    response = jsonify({"msg": "Logout successful"})
    unset_jwt_cookies(response)
    return response, 200


api.add_url_rule("/refresh", view_func=RefreshView.as_view("refresh"), methods=["POST"])

################################
# Endpoints for the User model #
################################
user_view = UserView.as_view("user_view")

api.add_url_rule("/users/", view_func=user_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule(
    "/users/<string:user_id>", view_func=user_view, methods=["GET", "PUT", "DELETE"]
)

########################################
# Endpoints for the Organization model #
########################################

org_view = OrgView.as_view("org_view")
api.add_url_rule("/org/", view_func=org_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule(
    "/org/<int:org_id>", view_func=org_view, methods=["GET", "PUT", "DELETE"]
)


# # Registro de rutas
# def register_routes(api):
#     """Registra las rutas para las vistas UserView y OrgView."""


#     api.add_url_rule("/users/", view_func=user_view, methods=["GET", "POST"])
#     api.add_url_rule(
#         "/users/<string:user_id>", view_func=user_view, methods=["GET", "PUT", "DELETE"]
#     )
#     api.add_url_rule("/organizations/", view_func=org_view, methods=["GET", "POST"])
#     api.add_url_rule(
#         "/organizations/<int:org_id>",
#         view_func=org_view,
#         methods=["GET", "PUT", "DELETE"],
#     )


# # def get_user(user_id):
# #     # Obtener datos del token
# #     aut_user_id = get_jwt_identity()
# #     claims = get_jwt()
# #     aut_roles = [role["name"] for role in claims["roles"]]
# #     aut_client_id = claims["client"]["id"] if claims.get("client") else None

# #     user = User.query.get_or_404(user_id)

# #     # Verificar permisos para ver este usuario
# #     if "administrator" in aut_roles:
# #         # Administradores pueden ver cualquier usuario
# #         pass
# #     elif "reseller" in aut_roles:
# #         # Resellers solo pueden ver usuarios de sus clientes
# #         current_user = User.query.get(aut_user_id)
# #         if not hasattr(current_user, 'reseller_info') or not current_user.reseller_info.is_reseller_client(user.client_id):
# #             return jsonify({"error": "Permission denied"}), 403
# #     elif user.client_id != aut_client_id:
# #         # Otros roles solo pueden ver usuarios de su mismo cliente
# #         return jsonify({"error": "Permission denied"}), 403

# #     return jsonify(UserSchema().dump(user))

```

=== File: ./core/templates/login.j2 ===
```jinja-html
{% set fields = [{'name': 'username', 'label': 'Usuario:', 'type': 'text'}, {'name': 'password', 'label': 'Contraseña:', 'type': 'password'}] %}
{% set form_id = 'loginForm' %}
{% set button_text = 'Iniciar Sesión' %}
{% set api_url = url_for('core_api.login') %}

{% include 'layouts/access_form.j2' %}

{% block extra_js %}
    <script>
async function apiLogin(username, password) {
    const messageDiv = document.getElementById('message');

    try {
        const response = await fetch('{{ api_url }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
                username: username,
                password: password // Enviar la contraseña directamente
            })
        });

        const data = await response.json();

        if (response.ok) {
            messageDiv.style.color = 'green';
            messageDiv.textContent = data.msg;
            // Esperar 2 segundos antes de redirigir
            setTimeout(() => {
                window.location.href = "{{ url_for('core.dashboard') }}";
            }, 1000);
            
        } else {
            messageDiv.style.color = 'red';
            messageDiv.textContent = data.msg;
        }
    } catch (error) {
        console.error('Error durante el inicio de sesión:', error);
        messageDiv.style.color = 'red';
        messageDiv.textContent = 'Ocurrió un error. Por favor, intenta de nuevo más tarde.';
    }
}

// Manejar el evento de envío del formulario
document.getElementById('loginForm').addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevenir el comportamiento por defecto del formulario

    // Obtener los valores del formulario
    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value;

    // Validar campos (opcional)
    if (!username || !password) {
        const messageDiv = document.getElementById('message');
        messageDiv.style.color = 'red';
        messageDiv.textContent = 'Por favor, completa ambos campos.';
        return;
    }

    // Llamar a la función de inicio de sesión
    await apiLogin(username, password);
});
    </script>
{% endblock %}
```

=== File: ./core/templates/home.j2 ===
```jinja-html
{% extends "base.j2" %}
{% set data_menu = { 
"menu": [
{"name": "Home", "url": url_for('core.index') },
]
} %}
{# "name": "Project description", "url": url_for('about') #},

{% set app_home = "True" %}
{% set css_code = "<style>
body {
    background: url('/img/bg_home.webp') no-repeat center center fixed !important;
}
main > div {
    background: transparent !important;
}
</style>" %}

{% block content %}
<div class="flex justify-center items-center home p-4">
    <div class="w-3/4 p-8 rounded-lg bg-white/20" style="background-color: #fff8f8cc;">
        <img class="max-w-full h-auto block mx-auto" src="/img/logo.png" alt="TecnoAgro">
        <h1 class="text-1xl p-4 text-center mb-4 font-semibold text-gray-800">by TecnoAgro</h1>
        <p class="text-lg text-center text-gray-600 mb-8 max-w-2xl mx-auto leading-relaxed">
            Nutrición inteligente para tus cultivos, optimizando recursos desde el aire hasta la raíz.
        </p>
        <div class="text-center">
            <a href="{{ url_for('core.login') }}" class="inline-block bg-gray-800 text-white px-6 py-3 rounded-md 
                hover:bg-gray-900 transition-colors duration-200 text-lg">
                {% if is_user_authenticated %} Dashboard {% else %} Iniciar sesión {% endif %}
            </a>
            <a href="https://tecnovant.net/es/contacto/" class="inline-block bg-blue-700 text-white px-6 py-3 rounded-md 
                hover:bg-gray-900 transition-colors duration-200 text-lg" target="_blank">
                Contacto
            </a>
        </div>
    </div>
</div>
{% endblock %}



```

=== File: ./core/templates/text/about_text.j2 ===
```jinja-html
<div class="exported-note">
    <div class="exported-note-title">Tecnoagro</div>
    <div id="rendered-md">
        <h1 id="tecnoagro">TecnoAgro</h1>
        <p>Sistema de Gestión de Nutrición Foliar en Cultivos</p>
        <h2 id="1-introducción">1. Introducción</h2>
        <pre class="jop-noMdConv">En este documento se describe la estructura y las relaciones de la base de datos 
dise&ntilde;ada para FlaskSK, un proyecto base de Flask con modularidad y control de 
acceso. La base de datos est&aacute; dise&ntilde;ada para soportar la gesti&oacute;n de usuarios, 
roles, permisos y m&oacute;dulos, proporcionando una base s&oacute;lida para el desarrollo 
de funcionales adicionales escalables y seguras.</pre>
        <h3 id="descripción-del-software-tecnoagro"><strong>Descripción del Software: TecnoAgro</strong></h3>
        <p><strong>TecnoAgro</strong> es un sistema especializado en la gestión de la nutrición foliar para cultivos,
            diseñado para ayudar a los agricultores a optimizar el uso de nutrientes y mejorar la producción. Cómo
            insumo se ingresan los datos obtenidos a partir de imágenes de drones procesadas externamente y
            complementadas con información ingresada manualmente.</p>
        <p>El sistema recibe estos datos a través de una API y un formulario de ingreso, los analiza y los almacena para
            generar recomendaciones personalizadas basadas en parámetros locales de nutrientes. Su enfoque permite una
            toma de decisiones precisa, mejorando la eficiencia en el uso de recursos y la productividad agrícola.</p>
        <h2 id="2-arquitectura-del-software">2. Arquitectura del Software</h2>
        <p>La arquitectura del sistema se basa en un diseño modular y escalable, utilizando el patrón MVC
            (Modelo-Vista-Controlador) con una arquitectura RESTful para separar la lógica de negocio, la presentación y
            el acceso a datos.</p>
        <h3 id="modelo-model">Modelo (Model)</h3>
        <p>Base de datos : Se utiliza <strong>Flask-SQLAlchemy</strong> para interactuar con la base de datos MySQL. Las
            tablas y relaciones se definen como clases Python, siguiendo el patrón de Active Record.</p>
        <p><strong>Migraciones</strong> : Flask-Migrate se usa para gestionar cambios en el esquema de la base de datos
            (creación, actualización, etc.).</p>
        <h3 id="vista-view">Vista (View)</h3>
        <p><strong>Templating</strong></p>
        <ul>
            <li><strong>Jinja2</strong> se utiliza para generar HTML dinámico. Las plantillas están organizadas de forma
                modular, reutilizando componentes comunes como headers y footers para mantener la consistencia y
                facilitar el mantenimiento.</li>
        </ul>
        <p><strong>Frontend</strong></p>
        <ul>
            <li><strong>Tailwind CSS</strong> se integra para estilizar la interfaz, proporcionando un diseño responsivo
                y moderno.</li>
            <li><strong>JavaScript</strong> interactúa con los endpoints de la API, permitiendo una experiencia de
                usuario dinámica y fluida.</li>
        </ul>
        <h3 id="controlador-controller">Controlador (Controller)</h3>
        <ul>
            <li><strong>Rutas:</strong> Se definen en archivos separados utilizando <strong>Blueprints</strong> de
                Flask. Esto modulariza la aplicación, promoviendo un código limpio y organizado.</li>
            <li><strong>Lógica de negocio:</strong> Se maneja en funciones independientes, asegurando la separación de
                responsabilidades siguiendo los principios SOLID.</li>
        </ul>
        <p><strong>Seguridad</strong> y <strong>Validaciones</strong></p>
        <ul>
            <li><strong>Werkzeug</strong>: Implementación segura de hash de contraseñas.</li>
            <li><strong>Marshmallow</strong>: Librería para serialización y validación de datos, garantizando la
                integridad de los datos antes de su almacenamiento.</li>
        </ul>
        <h3 id="manejo-de-apis">Manejo de APIs</h3>
        <ul>
            <li><strong>Endpoints:</strong> Se implementan como rutas específicas en Flask, devolviendo respuestas en
                formato JSON para ser consumidas por clientes como el frontend web o aplicaciones móviles.</li>
            <li><strong>Autenticación:</strong> Se utiliza <strong>flask-jwt-extended</strong> para gestionar la
                autenticación basada en tokens, garantizando un acceso seguro a los recursos protegidos. Se Implementa
                JWT (JSON Web Tokens) para autenticación de usuarios. Gestiona tokens de acceso y actualización, con
                funcionalidades como:
                <ul>
                    <li>Login</li>
                    <li>Logout</li>
                    <li>Refresh token</li>
                    <li>Protección de rutas con <code class="inline-code">@jwt_required()</code></li>
                </ul>
            </li>
        </ul>
        <p>La estructura del proyecto sigue patrones de diseño modernos, con módulos separados para:</p>
        <ul>
            <li>Modelos de datos (<code class="inline-code">model.py</code>)</li>
            <li>Rutas y vistas (<code class="inline-code">routes.py</code>)</li>
            <li>Endpoints (<code class="inline-code">api_routes.py</code>)</li>
            <li>Funcionalidades auxiliares (<code class="inline-code">helper.py</code>)</li>
        </ul>
        <p>El código incluye manejadores de errores, logging y excepciones, asegurando una buena practica para la
            depuración y monitoreo.<br>
            Se utiliza el Micro framework <strong>Flask</strong> para desarrollar aplicación web en Python y Blueprints
            para modularizar la aplicación.</p>

        <div class="joplin-editable">
            <pre class="joplin-source" data-joplin-language="mermaid" data-joplin-source-open="```mermaid&#10;"
                data-joplin-source-close="&#10;```&#10;">graph TD
    A[Usuario] --&gt;|Interacción Web| B[Frontend]
    A --&gt; C[Clientes Externos]
    C--&gt; |Consumo API| K[Endpoints REST]
    B --&gt; D[JavaScript]
    B --&gt; E[Tailwind CSS]
    B --&gt; F[Jinja2 Templates]
    F --&gt; G[Blueprints]
    G --&gt; H[Controladores]
    H --&gt; I[Lógica de Negocio]
    I --&gt; J[Modelo]
    D --&gt; K
    K --&gt; H
    K --&gt; L[Autenticación]
</pre>

            <pre class="mermaid">graph TD
    A[Usuario] --&gt;|Interacción Web| B[Frontend]
    A --&gt; C[Clientes Externos]
    C--&gt; |Consumo API| K[Endpoints REST]
    B --&gt; D[JavaScript]
    B --&gt; E[Tailwind CSS]
    B --&gt; F[Jinja2 Templates]
    F --&gt; G[Blueprints]
    G --&gt; H[Controladores]
    H --&gt; I[Lógica de Negocio]
    I --&gt; J[Modelo]
    D --&gt; K
    K --&gt; H
    K --&gt; L[Autenticación]
</pre>
        </div>

        <div class="joplin-editable">
            <pre class="joplin-source" data-joplin-language="mermaid" data-joplin-source-open="```mermaid&#10;"
                data-joplin-source-close="&#10;```&#10;">sequenceDiagram
    participant Usuario
    participant Frontend
    participant JS
    participant Controller
    participant LogicaNegocio
    participant Modelo
    participant BaseDatos
    participant API
    participant Autenticacion

    Usuario-&gt;&gt;Frontend: Carga página web
    Frontend-&gt;&gt;Controller: Solicita recurso para renderizar
    Controller-&gt;&gt;LogicaNegocio: Procesa lógica
    LogicaNegocio-&gt;&gt;Modelo: Accede a datos
    Modelo-&gt;&gt;BaseDatos: Consulta/Actualiza datos
    BaseDatos--&gt;&gt;Modelo: Retorna datos
    Modelo--&gt;&gt;LogicaNegocio: Datos procesados
    LogicaNegocio--&gt;&gt;Controller: Resultado
    Controller--&gt;&gt;Frontend: Renderiza plantilla con Jinja2
    Frontend--&gt;&gt;Usuario: Muestra página

    Usuario-&gt;&gt;Frontend: Interactúa con la página (acciones)
    Frontend-&gt;&gt;JS: Ejecuta scripts
    JS-&gt;&gt;API: Solicita datos (usando endpoints REST)
    API-&gt;&gt;Autenticacion: Verifica token
    Autenticacion--&gt;&gt;API: Acceso autorizado
    API-&gt;&gt;LogicaNegocio: Procesa solicitud API
    LogicaNegocio-&gt;&gt;Modelo: Accede a datos
    Modelo-&gt;&gt;BaseDatos: Consulta/Actualiza datos
    BaseDatos--&gt;&gt;Modelo: Retorna datos
    Modelo--&gt;&gt;LogicaNegocio: Datos procesados
    LogicaNegocio--&gt;&gt;API: Resultado en JSON
    API--&gt;&gt;JS: Responde con JSON
    JS--&gt;&gt;Frontend: Actualiza UI con datos
    Frontend--&gt;&gt;Usuario: Muestra datos actualizados
</pre>

            <pre class="mermaid">sequenceDiagram
    participant Usuario
    participant Frontend
    participant JS
    participant Controller
    participant LogicaNegocio
    participant Modelo
    participant BaseDatos
    participant API
    participant Autenticacion

    Usuario-&gt;&gt;Frontend: Carga página web
    Frontend-&gt;&gt;Controller: Solicita recurso para renderizar
    Controller-&gt;&gt;LogicaNegocio: Procesa lógica
    LogicaNegocio-&gt;&gt;Modelo: Accede a datos
    Modelo-&gt;&gt;BaseDatos: Consulta/Actualiza datos
    BaseDatos--&gt;&gt;Modelo: Retorna datos
    Modelo--&gt;&gt;LogicaNegocio: Datos procesados
    LogicaNegocio--&gt;&gt;Controller: Resultado
    Controller--&gt;&gt;Frontend: Renderiza plantilla con Jinja2
    Frontend--&gt;&gt;Usuario: Muestra página

    Usuario-&gt;&gt;Frontend: Interactúa con la página (acciones)
    Frontend-&gt;&gt;JS: Ejecuta scripts
    JS-&gt;&gt;API: Solicita datos (usando endpoints REST)
    API-&gt;&gt;Autenticacion: Verifica token
    Autenticacion--&gt;&gt;API: Acceso autorizado
    API-&gt;&gt;LogicaNegocio: Procesa solicitud API
    LogicaNegocio-&gt;&gt;Modelo: Accede a datos
    Modelo-&gt;&gt;BaseDatos: Consulta/Actualiza datos
    BaseDatos--&gt;&gt;Modelo: Retorna datos
    Modelo--&gt;&gt;LogicaNegocio: Datos procesados
    LogicaNegocio--&gt;&gt;API: Resultado en JSON
    API--&gt;&gt;JS: Responde con JSON
    JS--&gt;&gt;Frontend: Actualiza UI con datos
    Frontend--&gt;&gt;Usuario: Muestra datos actualizados
</pre>
        </div>
        <p>Descripción del Diagrama:</p>
        <p><strong>Carga Inicial de la Página Web:</strong></p>
        <ol>
            <li>El usuario carga la página web.</li>
            <li>El frontend solicita recursos al controlador para renderizar la página.</li>
            <li>El controlador procesa la solicitud a través de la lógica de negocio.</li>
            <li>La lógica de negocio interactúa con el modelo para acceder a la base de datos.</li>
            <li>Los datos se procesan y se renderizan en una plantilla Jinja2.</li>
            <li>El frontend muestra la página generada al usuario.<br>
                <strong>Interacciones Posteriores mediante JavaScript y API:</strong>
            </li>
            <li>El usuario interactúa con la página (por ejemplo, haciendo clic en un botón).</li>
            <li>El frontend ejecuta scripts JavaScript que realizan solicitudes a los endpoints de la API.</li>
            <li>Las solicitudes a la API incluyen tokens de autenticación que son verificados por flask-jwt-extended.
            </li>
            <li>Tras la verificación, la API procesa la solicitud a través de la lógica de negocio.</li>
            <li>La lógica de negocio accede a los datos mediante el modelo y la base de datos.</li>
            <li>Los datos procesados se retornan en formato JSON desde la API al JavaScript.</li>
            <li>JavaScript actualiza la interfaz de usuario con los nuevos datos recibidos.</li>
        </ol>
        <h3 id="resumen-de-componentes-clave">Resumen de Componentes Clave</h3>
        <p><strong>Templating</strong>: Jinja2 organiza plantillas de forma modular.<br>
            <strong>Frontend</strong>: Utiliza Tailwind CSS para estilos y JavaScript para interacciones dinámicas con
            la API.<br>
            <strong>Controladores</strong>: Gestionados mediante Blueprints para modularizar rutas.<br>
            <strong>Lógica de Negocio</strong>: Separada en funciones independientes siguiendo principios SOLID.<br>
            <strong>Manejo de APIs</strong>: Endpoints REST seguros con autenticación basada en tokens mediante
            flask-jwt-extended.
        </p>
        <h2 id="3-requisitos-de-la-herramienta">3. Requisitos de la herramienta</h2>
        <h4 id="requisitos-funcionales">Requisitos Funcionales</h4>
        <ol>
            <li>Gestión de usuarios y autenticación
                <ul>
                    <li>Creación de usuario admin.</li>
                    <li>Inicio de sesión</li>
                    <li>Registro de usuarios y asociación a fincas</li>
                    <li>Gestión de permisos por usuario y finca</li>
                </ul>
            </li>
            <li>Ingreso de datos
                <ul>
                    <li>Formulario para ingreso manual de datos
                        <ul>
                            <li><em><strong>A futuro</strong></em>: Integración con API externa para recepción de datos
                                procesados de imágenes de drones</li>
                            <li>Importación y exportación de datos a CSV</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>Análisis y almacenamiento de datos
                <ul>
                    <li>Procesamiento de datos recibidos</li>
                    <li>Almacenamiento en la base de datos</li>
                </ul>
            </li>
            <li>Generación de recomendaciones
                <ul>
                    <li>Análisis de datos almacenados</li>
                    <li>Generación de recomendaciones personalizadas basadas en parámetros locales de nutrientes</li>
                </ul>
            </li>
            <li>Reportes y visualizaciones
                <ul>
                    <li>Generación de reportes de estado</li>
                    <li>Creación de gráficas de seguimiento</li>
                    <li>Generación de pronósticos</li>
                    <li>Análisis de antagonismo entre nutrientes</li>
                </ul>
            </li>
            <li>Gestión de fincas y lotes
                <ul>
                    <li>Creación y edición de fincas</li>
                    <li>Gestión de lotes por finca</li>
                </ul>
            </li>
            <li>Gestión de productos y precios
                <ul>
                    <li>Mantenimiento de catálogo de productos</li>
                    <li>Actualización de precios</li>
                </ul>
            </li>
        </ol>
        <h4 id="requisitos-no-funcionales">Requisitos No Funcionales</h4>
        <ol>
            <li>Seguridad
                <ol>
                    <li>Implementación de autenticación JWT</li>
                    <li>Encriptación de datos sensibles</li>
                    <li>Protección contra ataques comunes (SQL injection, XSS, CSRF)</li>
                </ol>
            </li>
            <li>Rendimiento
                <ol>
                    <li>Tiempo de respuesta menor a 2 segundos para operaciones comunes</li>
                    <li>Capacidad para manejar al menos 1000 usuarios concurrentes</li>
                </ol>
            </li>
            <li>Escalabilidad
                <ol>
                    <li>Diseño modular que permita la fácil adición de nuevas funcionalidades</li>
                    <li>Capacidad de escalar horizontalmente</li>
                </ol>
            </li>
            <li>Usabilidad
                <ol>
                    <li>Interfaz de usuario intuitiva y responsiva</li>
                    <li>Compatibilidad con navegadores modernos</li>
                </ol>
            </li>
            <li>Mantenibilidad
                <ol>
                    <li>Código bien documentado y siguiendo estándares de codificación</li>
                    <li>Uso de patrones de diseño para facilitar futuras modificaciones</li>
                </ol>
            </li>
            <li>Disponibilidad
                <ol>
                    <li>Tiempo de actividad del sistema de al menos 99.9%</li>
                </ol>
            </li>
            <li>Interoperabilidad
                <ol>
                    <li><em><strong>A futuro:</strong></em> Integración fluida con la API externa de procesamiento de
                        imágenes</li>
                    <li>Capacidad para exportar datos en formatos estándar (CSV, JSON)</li>
                </ol>
            </li>
        </ol>
        <h2 id="4-diseño-de-la-base-de-datos">4. Diseño de la Base de Datos</h2>
        <p>El diseño de la base de datos se ha normalizado y optimizado para asegurar la eficiencia en la gestión de
            datos y evitar redundancias. Se han agregado tablas adicionales para manejar las relaciones entre usuarios,
            fincas y lotes.</p>
        <h3 id="1-modelo-de-permisos">1. <strong>Modelo de permisos</strong></h3>
        <p>Se utiliza un diseño de &quot;Permissions Based Access Control&quot; (PBAC), que es muy flexible y escalable.
        </p>
        <p><strong>Diagrama de la Base de Datos:</strong></p>

        <div class="joplin-editable">
            <pre class="joplin-source" data-joplin-language="mermaid" data-joplin-source-open="```mermaid&#10;"
                data-joplin-source-close="&#10;```&#10;">erDiagram
    USERS {
        int id PK
        string username
        string email
        string full_name
        string password_hash
        json profile_data
        datetime created_at
        datetime updated_at
        boolean active
    }
    ROLES {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    PERMISSIONS {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    ACTIONS {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    CLIENTS {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    MODULES {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    MODULE_PERMISSION {
        int module_id FK
        int permission_id FK
    }
    USERS ||--o{ USER_ROLE : has
    ROLES ||--o{ USER_ROLE : has
    ROLES ||--o{ ROLE_PERMISSION : has
    PERMISSIONS ||--o{ ROLE_PERMISSION : has
    PERMISSIONS ||--o{ PERMISSION_ACTION : has
    ACTIONS ||--o{ PERMISSION_ACTION : has
    CLIENTS ||--o{ CLIENT_USER : has
    USERS ||--o{ CLIENT_USER : has
    MODULES ||--o{ MODULE_PERMISSION : has
    PERMISSIONS ||--o{ MODULE_PERMISSION : has
</pre>

            <pre class="mermaid">erDiagram
    USERS {
        int id PK
        string username
        string email
        string full_name
        string password_hash
        json profile_data
        datetime created_at
        datetime updated_at
        boolean active
    }
    ROLES {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    PERMISSIONS {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    ACTIONS {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    CLIENTS {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    MODULES {
        int id PK
        string name
        string description
        datetime created_at
        datetime updated_at
    }
    MODULE_PERMISSION {
        int module_id FK
        int permission_id FK
    }
    USERS ||--o{ USER_ROLE : has
    ROLES ||--o{ USER_ROLE : has
    ROLES ||--o{ ROLE_PERMISSION : has
    PERMISSIONS ||--o{ ROLE_PERMISSION : has
    PERMISSIONS ||--o{ PERMISSION_ACTION : has
    ACTIONS ||--o{ PERMISSION_ACTION : has
    CLIENTS ||--o{ CLIENT_USER : has
    USERS ||--o{ CLIENT_USER : has
    MODULES ||--o{ MODULE_PERMISSION : has
    PERMISSIONS ||--o{ MODULE_PERMISSION : has
</pre>
        </div>
        <h3 id="explicación-de-la-base-de-datos-y-sus-relaciones">Explicación de la Base de Datos y sus Relaciones</h3>
        <h4 id="tabla-users">Tabla <code class="inline-code">USERS</code></h4>
        <ul>
            <li><strong>Descripción</strong>: Representa a los usuarios del sistema.</li>
            <li><strong>Campos</strong>:
                <ul>
                    <li><code class="inline-code">id</code>: Identificador único del usuario (PK).</li>
                    <li><code class="inline-code">username</code>: Nombre de usuario (único y no nulo).</li>
                    <li><code class="inline-code">email</code>: Correo electrónico del usuario (único y no nulo).</li>
                    <li><code class="inline-code">full_name</code>: Nombre completo del usuario (no nulo).</li>
                    <li><code class="inline-code">password_hash</code>: Hash de la contraseña del usuario.</li>
                    <li><code class="inline-code">profile_data</code>: Datos adicionales del perfil del usuario en
                        formato JSON.</li>
                    <li><code class="inline-code">created_at</code>: Fecha y hora de creación del usuario.</li>
                    <li><code class="inline-code">updated_at</code>: Fecha y hora de la última actualización del
                        usuario.</li>
                    <li><code class="inline-code">active</code>: Indica si el usuario está activo.</li>
                </ul>
            </li>
        </ul>
        <h4 id="tabla-roles">Tabla <code class="inline-code">ROLES</code></h4>
        <ul>
            <li><strong>Descripción</strong>: Representa los roles en el sistema.</li>
            <li><strong>Campos</strong>:
                <ul>
                    <li><code class="inline-code">id</code>: Identificador único del rol (PK).</li>
                    <li><code class="inline-code">name</code>: Nombre del rol (único y no nulo).</li>
                    <li><code class="inline-code">description</code>: Descripción del rol.</li>
                    <li><code class="inline-code">created_at</code>: Fecha y hora de creación del rol.</li>
                    <li><code class="inline-code">updated_at</code>: Fecha y hora de la última actualización del rol.
                    </li>
                </ul>
            </li>
        </ul>
        <h4 id="tabla-permissions">Tabla <code class="inline-code">PERMISSIONS</code></h4>
        <ul>
            <li><strong>Descripción</strong>: Representa los permisos en el sistema.</li>
            <li><strong>Campos</strong>:
                <ul>
                    <li><code class="inline-code">id</code>: Identificador único del permiso (PK).</li>
                    <li><code class="inline-code">name</code>: Nombre del permiso (no nulo).</li>
                    <li><code class="inline-code">description</code>: Descripción del permiso.</li>
                    <li><code class="inline-code">created_at</code>: Fecha y hora de creación del permiso.</li>
                    <li><code class="inline-code">updated_at</code>: Fecha y hora de la última actualización del
                        permiso.</li>
                </ul>
            </li>
        </ul>
        <h4 id="tabla-actions">Tabla <code class="inline-code">ACTIONS</code></h4>
        <ul>
            <li><strong>Descripción</strong>: Representa las acciones que se pueden realizar.</li>
            <li><strong>Campos</strong>:
                <ul>
                    <li><code class="inline-code">id</code>: Identificador único de la acción (PK).</li>
                    <li><code class="inline-code">name</code>: Nombre de la acción (no nulo).</li>
                    <li><code class="inline-code">description</code>: Descripción de la acción.</li>
                    <li><code class="inline-code">created_at</code>: Fecha y hora de creación de la acción.</li>
                    <li><code class="inline-code">updated_at</code>: Fecha y hora de la última actualización de la
                        acción.</li>
                </ul>
            </li>
        </ul>
        <h4 id="tabla-clients">Tabla <code class="inline-code">CLIENTS</code></h4>
        <ul>
            <li><strong>Descripción</strong>: Representa a los clientes u organizaciones en el sistema.</li>
            <li><strong>Campos</strong>:
                <ul>
                    <li><code class="inline-code">id</code>: Identificador único del cliente (PK).</li>
                    <li><code class="inline-code">name</code>: Nombre del cliente (no nulo).</li>
                    <li><code class="inline-code">description</code>: Descripción del cliente.</li>
                    <li><code class="inline-code">created_at</code>: Fecha y hora de creación del cliente.</li>
                    <li><code class="inline-code">updated_at</code>: Fecha y hora de la última actualización del
                        cliente.</li>
                </ul>
            </li>
        </ul>
        <h4 id="tabla-modules">Tabla <code class="inline-code">MODULES</code></h4>
        <ul>
            <li><strong>Descripción</strong>: Representa los módulos del sistema.</li>
            <li><strong>Campos</strong>:
                <ul>
                    <li><code class="inline-code">id</code>: Identificador único del módulo (PK).</li>
                    <li><code class="inline-code">name</code>: Nombre del módulo (único y no nulo).</li>
                    <li><code class="inline-code">description</code>: Descripción del módulo.</li>
                    <li><code class="inline-code">created_at</code>: Fecha y hora de creación del módulo.</li>
                    <li><code class="inline-code">updated_at</code>: Fecha y hora de la última actualización del módulo.
                    </li>
                </ul>
            </li>
        </ul>
        <h4 id="tabla-module_permission">Tabla <code class="inline-code">MODULE_PERMISSION</code></h4>
        <ul>
            <li><strong>Descripción</strong>: Tabla de relación entre módulos y permisos.</li>
            <li><strong>Campos</strong>:
                <ul>
                    <li><code class="inline-code">module_id</code>: Identificador del módulo (FK).</li>
                    <li><code class="inline-code">permission_id</code>: Identificador del permiso (FK).</li>
                </ul>
            </li>
        </ul>
        <h4 id="relaciones">Relaciones</h4>
        <ul>
            <li><strong>USERS - ROLES</strong>: Relación many-to-many a través de la tabla <code
                    class="inline-code">user_role</code>.</li>
            <li><strong>USERS - CLIENTS</strong>: Relación many-to-many a través de la tabla <code
                    class="inline-code">client_user</code>.</li>
            <li><strong>ROLES - PERMISSIONS</strong>: Relación many-to-many a través de la tabla <code
                    class="inline-code">role_permission</code>.</li>
            <li><strong>PERMISSIONS - ACTIONS</strong>: Relación many-to-many a través de la tabla <code
                    class="inline-code">permission_action</code>.</li>
            <li><strong>MODULES - PERMISSIONS</strong>: Relación many-to-many a través de la tabla <code
                    class="inline-code">module_permission</code>.</li>
        </ul>
        <h3 id="notas">Notas</h3>
        <ul>
            <li>Las tablas de asociación (<code class="inline-code">user_role</code>, <code
                    class="inline-code">client_user</code>, <code class="inline-code">role_permission</code>, <code
                    class="inline-code">permission_action</code>, <code class="inline-code">module_permission</code>) se
                utilizan para manejar las relaciones many-to-many entre las entidades.</li>
            <li>Los campos <code class="inline-code">created_at</code> y <code class="inline-code">updated_at</code> en
                todas las tablas permiten el seguimiento de la creación y actualización de los registros.</li>
            <li>La tabla <code class="inline-code">USERS</code> incluye un campo <code
                    class="inline-code">password_hash</code> para almacenar de forma segura las contraseñas.</li>
            <li>La tabla <code class="inline-code">USERS</code> también incluye un campo <code
                    class="inline-code">profile_data</code> en formato JSON para almacenar datos adicionales del perfil
                del usuario.</li>
        </ul>
        <h3 id="modelo-de-base-de-datos-para-el-sistema-de-gestión-de-nutrición-foliar">Modelo de Base de Datos para el
            Sistema de Gestión de Nutrición Foliar</h3>
        <h4 id="funcionalidad-y-beneficios">Funcionalidad y Beneficios</h4>
        <p>El modelo de base de datos propuesto para el sistema de gestión de nutrición foliar está diseñado para
            almacenar y gestionar datos relacionados con el análisis de suelos, análisis foliares, aplicaciones de
            nutrientes, objetivos nutricionales, producción, productos y recomendaciones. Este modelo asegura la
            integridad y consistencia de los datos, minimiza la redundancia y facilita la generación de informes y
            recomendaciones precisas.</p>

        <div class="joplin-editable">
            <pre class="joplin-source" data-joplin-language="mermaid" data-joplin-source-open="```mermaid&#10;"
                data-joplin-source-close="&#10;```&#10;">erDiagram
    USERS ||--o{ FARM : owns
    FARM ||--o{ LOT : has
    LOT ||--o{ LOT_CROP : has
    LOT ||--o{ COMMON_ANALYSIS : has
    LOT ||--o{ NUTRIENT_APPLICATION : has
    LOT ||--o{ PRODUCTION : has
    LOT ||--o{ RECOMMENDATION : has
    CROP ||--o{ LOT_CROP : has
    COMMON_ANALYSIS ||--o{ SOIL_ANALYSIS : has
    COMMON_ANALYSIS ||--o{ LEAF_ANALYSIS : has
    CROP ||--o{ OBJECTIVE : has
    PRODUCT ||--o{ PRODUCT_CONTRIBUTION : has
    PRODUCT ||--o{ PRODUCT_PRICE : has

    USERS {
        int id PK
        string username
        string email
    }
    FARM {
        int id PK
        string name
        int user_id FK
    }
    LOT {
        int id PK
        string name
        float area
        int farm_id FK
    }
    CROP {
        int id PK
        string name
    }
    LOT_CROP {
        int id PK
        int lot_id FK
        int crop_id FK
        date start_date
        date end_date
    }
    COMMON_ANALYSIS {
        int id PK
        date date
        int lot_id FK
        float protein
        float rest
        int rest_days
        int month
    }
    SOIL_ANALYSIS {
        int id PK
        int common_analysis_id FK
        float energy
        int grazing
    }
    LEAF_ANALYSIS {
        int id PK
        int common_analysis_id FK
        float nitrogen
        float phosphorus
        float potassium
        float calcium
        float magnesium
        float copper
        float iron
        float zinc
        float manganese
        float boron
        float molybdenum
        float silicon
        float sulfur
    }
    NUTRIENT_APPLICATION {
        int id PK
        date date
        int lot_id FK
        float nitrogen
        float phosphorus
        float potassium
        float calcium
        float magnesium
        float iron
        float zinc
        float manganese
        float boron
        float molybdenum
        float copper
        float silicon
        float sulfur
    }
    OBJECTIVE {
        int id PK
        int crop_id FK
        float nitrogen
        float phosphorus
        float potassium
        float calcium
        float magnesium
        float copper
        float iron
        float zinc
        float manganese
        float boron
        float molybdenum
        float silicon
        float sulfur
        string objective
        int rest_days
        float protein
    }
    PRODUCTION {
        int id PK
        date date
        int lot_id FK
        float area
        float production_kg
        int bags
        string harvest
        int month
        string variety
        float price_per_kg
        float protein_65dde
        float discount
    }
    PRODUCT {
        int id PK
        string name
        text description
    }
    PRODUCT_CONTRIBUTION {
        int id PK
        int product_id FK
        float n
        float p
        float k
        float ca
        float mg
        float fe
        float zn
        float mn
        float b
        float mo
        float cu
        float si
        float s
    }
    PRODUCT_PRICE {
        int id PK
        int product_id FK
        float price
        string supplier
        date start_date
        date end_date
    }
    RECOMMENDATION {
        int id PK
        int lot_id FK
        date date
        text recommendation
        boolean applied
    }
</pre>

            <pre class="mermaid">erDiagram
    USERS ||--o{ FARM : owns
    FARM ||--o{ LOT : has
    LOT ||--o{ LOT_CROP : has
    LOT ||--o{ COMMON_ANALYSIS : has
    LOT ||--o{ NUTRIENT_APPLICATION : has
    LOT ||--o{ PRODUCTION : has
    LOT ||--o{ RECOMMENDATION : has
    CROP ||--o{ LOT_CROP : has
    COMMON_ANALYSIS ||--o{ SOIL_ANALYSIS : has
    COMMON_ANALYSIS ||--o{ LEAF_ANALYSIS : has
    CROP ||--o{ OBJECTIVE : has
    PRODUCT ||--o{ PRODUCT_CONTRIBUTION : has
    PRODUCT ||--o{ PRODUCT_PRICE : has

    USERS {
        int id PK
        string username
        string email
    }
    FARM {
        int id PK
        string name
        int user_id FK
    }
    LOT {
        int id PK
        string name
        float area
        int farm_id FK
    }
    CROP {
        int id PK
        string name
    }
    LOT_CROP {
        int id PK
        int lot_id FK
        int crop_id FK
        date start_date
        date end_date
    }
    COMMON_ANALYSIS {
        int id PK
        date date
        int lot_id FK
        float protein
        float rest
        int rest_days
        int month
    }
    SOIL_ANALYSIS {
        int id PK
        int common_analysis_id FK
        float energy
        int grazing
    }
    LEAF_ANALYSIS {
        int id PK
        int common_analysis_id FK
        float nitrogen
        float phosphorus
        float potassium
        float calcium
        float magnesium
        float copper
        float iron
        float zinc
        float manganese
        float boron
        float molybdenum
        float silicon
        float sulfur
    }
    NUTRIENT_APPLICATION {
        int id PK
        date date
        int lot_id FK
        float nitrogen
        float phosphorus
        float potassium
        float calcium
        float magnesium
        float iron
        float zinc
        float manganese
        float boron
        float molybdenum
        float copper
        float silicon
        float sulfur
    }
    OBJECTIVE {
        int id PK
        int crop_id FK
        float nitrogen
        float phosphorus
        float potassium
        float calcium
        float magnesium
        float copper
        float iron
        float zinc
        float manganese
        float boron
        float molybdenum
        float silicon
        float sulfur
        string objective
        int rest_days
        float protein
    }
    PRODUCTION {
        int id PK
        date date
        int lot_id FK
        float area
        float production_kg
        int bags
        string harvest
        int month
        string variety
        float price_per_kg
        float protein_65dde
        float discount
    }
    PRODUCT {
        int id PK
        string name
        text description
    }
    PRODUCT_CONTRIBUTION {
        int id PK
        int product_id FK
        float n
        float p
        float k
        float ca
        float mg
        float fe
        float zn
        float mn
        float b
        float mo
        float cu
        float si
        float s
    }
    PRODUCT_PRICE {
        int id PK
        int product_id FK
        float price
        string supplier
        date start_date
        date end_date
    }
    RECOMMENDATION {
        int id PK
        int lot_id FK
        date date
        text recommendation
        boolean applied
    }
</pre>
        </div>
        <h3 id="beneficios-del-modelo">Beneficios del Modelo</h3>
        <ol>
            <li><strong>Integridad de Datos</strong>: Las relaciones entre las tablas aseguran que los datos estén
                consistentes y no se produzcan redundancias.</li>
            <li><strong>Normalización</strong>: El modelo sigue las reglas de normalización (1NF, 2NF, 3NF) para evitar
                redundancias y mejorar la eficiencia.</li>
            <li><strong>Facilidad de Consulta</strong>: Las relaciones definidas permiten realizar consultas complejas
                de manera eficiente, facilitando la generación de informes y recomendaciones.</li>
            <li><strong>Escalabilidad</strong>: El modelo es modular y fácil de extender para incluir nuevas
                funcionalidades o tablas en el futuro.</li>
            <li><strong>Seguridad</strong>: La estructura del modelo, junto con las prácticas de SQLAlchemy y Flask,
                asegura la prevención de ataques como la inyección SQL y el desbordamiento de memoria.</li>
        </ol>
        <p>Este modelo y sus relaciones proporcionan una base sólida para el desarrollo del sistema de gestión de
            nutrición foliar, asegurando la integridad y consistencia de los datos, y facilitando la implementación de
            nuevas funcionalidades en el futuro.</p>
    </div>
</div>
```

=== File: ./core/templates/logout.j2 ===
```jinja-html
{% extends "base.j2" %}

{% block title %}Logout{% endblock %}

{% block extra_js %}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        fetch('/api/core/logout', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = '{{ url_for("core.index") }}';
                } else {
                    console.error('Error al cerrar sesión');
                }
            })
            .catch(error => console.error('Error de red:', error));
    });
</script>
{% endblock %}
```

=== File: ./core/templates/dashboard/welcome.j2 ===
```jinja-html
{% extends "base.j2" %}


{% block content %}
<div class="container">
    <div class="row">
        <div class="col-md-12">
        {% include "dashboard/vars/welcome_text.j2" %}
    </div>
</div>
{% endblock %}
```

=== File: ./core/templates/dashboard/vars/welcome_text.j2 ===
```jinja-html
<h1 class="text-3xl font-bold">Dashboard - <span class="text-2xl font-bold"> Hola {{ username }} </span></h1>
</div>
<div class="col-md-12">
    
    <p>¡Bienvenido a la aplicación de gestión de productos!</p>
    <h1 class="text-3xl font-bold">Bienvenido a TecnoAgro</h1>

    <p>TecnoAgro es un sistema innovador diseñado para ayudar a los agricultores a optimizar el uso de
        nutrientes y mejorar la producción de sus cultivos. Nuestro sistema utiliza tecnologías avanzadas para
        analizar datos de suelos, foliares y aplicaciones de nutrientes, y proporciona recomendaciones
        personalizadas para mejorar la nutrición de sus cultivos.</p>

    <h3 class="text-2xl font-bold">Nuestro objetivo</h3>

    <p>En TecnoAgro, nuestro objetivo es proporcionar a los agricultores herramientas efectivas y fáciles de
        usar para mejorar la productividad y la sostenibilidad de sus cultivos. Nuestro sistema está diseñado
        para ser escalable, seguro y fácil de usar, y está respaldado por un equipo de expertos en agronomía y
        tecnología.</p>

    <h3 class="text-2xl font-bold">Características del sistema</h3>

    <ul class="list-disc pl-5">
        <li>Análisis de datos de suelos y foliares</li>
        <li>Recomendaciones personalizadas para la aplicación de nutrientes</li>
        <li>Gestión de fincas y lotes</li>
        <li>Registro de producción y seguimiento de resultados</li>
        <li>Integración con API externas para la recepción de datos procesados de imágenes de drones</li>
        <li>Autenticación segura y autorización de acceso</li>
    </ul>
</div>
```

=== File: ./core/templates/dashboard/vars/_menu.j2 ===
```jinja-html

```

=== File: ./core/templates/dashboard/profile.j2 ===
```jinja-html
{% extends "base.j2" %}
{% set dashboard = true %}
{% from "settings/_ui_class.j2" import base_button_classes, input_bg_color, border_color, hover_bg_color,
focus_ring_color, button_bg_color, delete_button_bg_color, input_focus_bg_color, text_color %}
{% set data_menu = {
"menu": [
{"name": "Home", "url": url_for('core.index') },
{"name": "Logout", "url": url_for('core.logout') },
{"name": "Profile", "url": url_for('core.profile') }
]
} %}
{% set title = "Dashboard" %}
{% block content %}

<div class="mx-auto max-w-8xl py-6 sm:px-6 lg:px-8">
    <!-- Encabezado del Perfil -->
    <div class="relative mb-8">
        <!-- Imagen de portada -->
        <div class="h-48 bg-gradient-to-r from-blue-600 to-purple-600 rounded-t-lg"></div>

        <!-- Avatar -->
        <div class="absolute -bottom-10 left-4">
            <img src="/img/avatar.png" alt="Avatar" class="w-32 h-32 rounded-full border-4 border-white">
            {# <button class="mt-2 w-24 {{ base_button_classes }} {{ button_bg_color }} text-white {{ focus_ring_color }}">
                Subir Foto
            </button> #}
        </div>

        <!-- Nombre y título -->
        <div class="absolute -bottom-10 left-40">
            <h1 class="text-2xl font-bold {{ text_color }}">{{ full_name }}</h1>
            <p class="text-lg {{ text_color }}">{{ username }}</p>
        </div>
    </div>

    <!-- Sección Perfil de Usuario -->
    <div class="bg-white rounded-lg shadow p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Perfil de Usuario</h2>
        <form id="profileForm">
            <!-- Campos del formulario -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-medium {{ text_color }}">{{ username }}</label>
                    <input type="text" id="username"
                        class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }}" disabled
                        value="{{ username }}">
                </div>
                <div>
                    <label class="block text-sm font-medium {{ text_color }}">{{ full_name }}</label>
                    <input type="text" id="name"
                        class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }}"
                        value="{{ full_name }}">
                    <p class="text-ls {{ text_color }}">Rol: {{ role }} </p>
                    <p class="text-ls {{ text_color }}">Cliente: {{ client }}</p>
                </div>
                <!-- Otros campos -->
                <div>
                    <label class="block text-sm font-medium {{ text_color }}">{{ email }}</label>
                    <input type="email" id="email"
                        class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }}" value="{{ email }}">
                </div>
                <!-- Agrega los demás campos según las secciones -->
            </div>
            <button type="submit" class="{{ base_button_classes }} {{ button_bg_color }} text-white mt-4">Actualizar
                Perfil</button>
        </form>

    </div>

    <!-- Sección Cambio de Contraseña -->
    <div class="bg-white rounded-lg shadow p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Cambiar Contraseña</h2>
        <form id="passwordForm">
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium {{ text_color }}">Contraseña Actual</label>
                    <input type="password" class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }}">
                </div>
                <div>
                    <label class="block text-sm font-medium {{ text_color }}">Nueva Contraseña</label>
                    <input type="password" class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }}">
                </div>
                <div>
                    <label class="block text-sm font-medium {{ text_color }}">Confirmar Contraseña</label>
                    <input type="password" class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }}">
                </div>
                <button type="submit" class="{{ base_button_classes }} {{ button_bg_color }} text-white">Actualizar
                    Contraseña</button>
            </div>
        </form>
    </div>

    <!-- Sección Notificaciones -->
    <div class="bg-white rounded-lg shadow p-6">
        <h2 class="text-xl font-semibold mb-4">Notificaciones</h2>
        <div class="space-y-4">
            <div class="space-y-2">
                <h3 class="text-sm font-medium {{ text_color }}">Preferencias de Correo</h3>
                <div class="space-y-1">
                    <label class="flex items-center">
                        <input type="checkbox" class="h-4 w-4 text-blue-600">
                        <span class="ml-2 text-sm {{ text_color }}">Relativas a la cuenta</span>
                    </label>
                    <!-- Otros checkboxes -->
                </div>
            </div>
            <div>
                <button class="{{ base_button_classes }} {{ button_bg_color }} text-white">Actualizar
                    Preferencias</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% block extra_js %}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Funcionalidad para editar
        document.getElementById('editButton').addEventListener('click', function () {
            const form = document.getElementById('profileForm');
            const inputs = form.querySelectorAll('input');
            inputs.forEach(input => {
                if (input.id !== 'username') input.removeAttribute('disabled');
            });
            this.style.display = 'none';
            document.getElementById('saveButton').style.display = 'inline-block';
        });

        // Funcionalidad para guardar
        document.getElementById('saveButton').addEventListener('click', function (e) {
            e.preventDefault();
            const formData = new FormData(document.getElementById('profileForm'));
            fetch('/api/update-profile', {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    alert('Perfil actualizado correctamente');
                }
            });
        });
    });
</script>
{% endblock %}
```

=== File: ./core/templates/dashboard/users.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}

{# identificadores de entidad #}
{% set entity_name = "Usuarios" %}
{% set entity_name_lower = "usuario" %}
{% set show_select_box = True %}

{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Nombre de Usuario", "Nombre Completo", "Correo Electrónico", "Rol", "Cliente", "Estado"] %}
{% set item_fields = ["id", "username", "full_name", "email", "role", "org", 'active' ] %}


{# formulario de editar y add #}
{% set form_fields = {
    'username': {'type': 'text', 'label': 'Nombre de usuario', 'required': True, 'disabled_in_edit': True},
    'full_name': {'type': 'text', 'label': 'Nombre completo', 'required': True},
    'email': {'type': 'email', 'label': 'Correo electrónico', 'required': True},
    'role': {'type': 'select', 'label': 'Roles', 'options': {'Administrador': 'administrator', 'Reseller': 'reseller', 'Org Admin': 'org_admin','Org Editor': 'org_editor', 'Usuario Básico': 'org_viewer'}, 'required': True, 'new_value': False},    
    'organization_id': {'type': 'select', 'label': 'Cliente', 'options': org_dict, 'required': True, 'new_value': True},
    'password': {'type': 'password', 'label': 'Clave', 'required': True},
    'password_confirm': {'type': 'password', 'label': 'Confirmar Clave', 'required': True}
} %}

{# entregado desde el endpoint #}

{# api de consumo #}
{% set api_url = url_for('core_api.user_view') %}

```

=== File: ./core/templates/dashboard/not_authorized.j2 ===
```jinja-html
{% extends "base.j2" %}

{% block content %}
<div class="flex justify-center items-center home p-4">
<div class="text-center">
    <h1 class="text-8xl font-extrabold text-red-600 tracking-wider">
      NO AUTORIZADO
    </h1>
    <p class="mt-4 text-xl text-gray-600">
      No tienes permiso para acceder a esta página.
    </p>
    <button class="mt-8 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
      <a href="{{ url_for('core.login') }}">Volver</a>
    </button>
  </div>
  </div>
  
{% endblock %}



```

=== File: ./core/templates/dashboard/clients.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}

{# identificadores de entidad #}
{% set entity_name = "Clientes" %}
{% set entity_name_lower = "cliente" %}
{% set show_select_box = True %}

{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Nombre del Cliente", "Descripción", "Reseller"] %}
{% set item_fields = ["id", "name", "description", "reseller" ] %}


{# formulario de editar y add #}
{% set form_fields = {
    'name': {'type': 'text', 'label': 'Nombre del Cliente', 'required': True, 'disabled_in_edit': True},
    'description': {'type': 'text', 'label': 'Descripción', 'required': True},
    'reseller_id': {'type': 'select', 'label': 'Reseller', 'options': reseller_dict, 'required': True, 'new_value': False},
} %}

{# entregado desde el endpoint #}

{# api de consumo #}
{% set api_url = url_for('core_api.org_view') %}



```

=== File: ./core/templates/installer.j2 ===
```jinja-html
{% extends "base.j2" %}

{% block content %}
<div class="container mx-auto px-4 py-8 max-w-2xl">
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">Configuración del Sistema</h1>
        
        <!-- Formulario de configuración inicial -->
        <form id="installForm" method="POST" class="{% if status.completed %}hidden{% endif %}">
            <div class="mb-4">
                <label class="flex items-center space-x-2 mb-4 cursor-pointer">
                    <input type="checkbox" 
                           id="toggleCreds" 
                           name="use_custom_creds"
                           class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                    <span class="text-gray-700">Usar credenciales personalizadas</span>
                </label>
                
                <div id="credentialsSection" class="hidden space-y-4 pl-6 border-l-2 border-blue-200">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Usuario Admin</label>
                        <input type="text"
                               name="admin_username" 
                               placeholder="admin"
                               class="w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                               pattern="[A-Za-z0-9]{3,20}"
                               title="Solo letras y números (3-20 caracteres)">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Contraseña Admin</label>
                        <input type="password" 
                               name="admin_password" 
                               placeholder="admin123"
                               minlength="8"
                               class="w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                               required>
                        <p class="text-xs text-gray-500 mt-1">Mínimo 8 caracteres</p>
                    </div>
                </div>
            </div>
            
            <div class="mb-6">
                <label class="flex items-center space-x-2 cursor-pointer">
                    <input type="checkbox" 
                           name="create_demo" 
                           value="true"
                           checked
                           class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                    <span class="text-gray-700">Crear datos de demostración</span>
                </label>
            </div>
            
            <button type="submit" 
                    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors
                           disabled:opacity-50 disabled:cursor-not-allowed"
                    id="submitBtn">
                Iniciar Instalación
            </button>
        </form>

        <!-- Progreso de la instalación -->
        <div id="installationProgress" class="{% if not status.completed %}hidden{% endif %}">
            <div class="space-y-4">
                {% for step in status.steps %}
                <div id="step-{{ loop.index0 }}" 
                     class="flex items-center p-3 rounded-md border transition-colors duration-300
                            {% if step.status == 'in_progress' %}bg-blue-50 border-blue-200
                            {% elif step.status == 'completed' %}bg-green-50 border-green-200
                            {% elif step.status == 'failed' %}bg-red-50 border-red-200
                            {% else %}bg-gray-50 border-gray-200{% endif %}">
                    <div class="ml-3 flex-1 min-w-0">
                        <div class="flex justify-between items-center">
                            <p class="text-sm font-medium text-gray-700 truncate">{{ step.name }}</p>
                            {% if step.status == 'completed' %}
                                <svg class="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                </svg>
                            {% elif step.status == 'failed' %}
                                <svg class="h-5 w-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                                </svg>
                            {% endif %}
                        </div>
                        {% if step.error %}
                        <p class="text-sm text-red-600 mt-1 truncate">{{ step.error }}</p>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('installForm');
    const progress = document.getElementById('installationProgress');
    const toggleCreds = document.getElementById('toggleCreds');
    const credentialsSection = document.getElementById('credentialsSection');
    
    // Toggle credenciales personalizadas
    toggleCreds.addEventListener('change', (e) => {
        credentialsSection.classList.toggle('hidden', !e.target.checked);
        if (!e.target.checked) {
            form.querySelector('[name="admin_username"]').value = 'admin';
            form.querySelector('[name="admin_password"]').value = 'admin123';
        }
    });

    // Manejo del formulario
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = document.getElementById('submitBtn');
        submitBtn.disabled = true;
        
        try {
            progress.classList.remove('hidden');
            form.classList.add('hidden');
            
            const response = await fetch("{{ url_for('core.install') }}", {
                method: 'POST',
                body: new FormData(form),
                headers: { 'Accept': 'application/json' }
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                handleErrors(data);
                return;
            }
            
            if (data.success) {
                window.location.href = data.redirect;
            }
        } catch (error) {
            console.error('Installation Error:', error);
            showGlobalError('Error de conexión con el servidor');
        } finally {
            submitBtn.disabled = false;
        }
    });

    function handleErrors(data) {
        // Actualizar estados de los pasos
        if (data.status?.steps) {
            data.status.steps.forEach((step, index) => {
                const stepElement = document.getElementById(`step-${index}`);
                if (!stepElement) return;
                
                stepElement.className = `flex items-center p-3 rounded-md border ${
                    step.status === 'in_progress' ? 'bg-blue-50 border-blue-200' :
                    step.status === 'completed' ? 'bg-green-50 border-green-200' :
                    step.status === 'failed' ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200'
                }`;
                
                const errorElement = stepElement.querySelector('p.text-red-600');
                if (errorElement) {
                    errorElement.textContent = step.error || '';
                }
            });
        }
        
        if (data.error) {
            showGlobalError(data.error);
        }
    }

    function showGlobalError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'mt-4 p-4 bg-red-50 border border-red-200 rounded-md';
        errorDiv.innerHTML = `
            <p class="text-red-600 font-medium">Error crítico:</p>
            <p class="text-red-600 mt-1">${message}</p>
        `;
        progress.parentNode.insertBefore(errorDiv, progress.nextSibling);
    }
});
</script>
{% endblock %}
```

=== File: ./core/models.py ===
```python
"""
User model roles, permissions and actions
module for Yet Another Flask Survival Kit (YAFSK)
Author: Johnny De Castro
Email: j@jdcastro.co
Copyright (c) 2024 - 2025 Johnny De Castro.
All rights reserved.

Licensed under the Apache License, Version 2.0
http://www.apache.org/licenses/LICENSE-2.0
"""

# Python standard library imports
from datetime import datetime
from enum import Enum
from functools import lru_cache
from threading import Timer
import time, weakref, uuid
from typing import List


# Third party imports
from werkzeug.security import check_password_hash, generate_password_hash
from sqlalchemy.orm import joinedload

# Local application imports
from app.extensions import db

__doc__ = """
Documentation of the model:
This SQLAlchemy model implements a role and permission-based access control system, designed to manage users, their roles, permissions, and associated actions within a reseller schema. It also includes models for clients (organizations), reseller limits, and system modules.

Permission Management:
The roles, actions, and permissions model is managed statically with enumerations.
The definition of roles, actions, and permissions is done using enums to make the structure very clear and easy to maintain.
Changes to permissions or roles can be managed centrally in the enums and associated dictionaries.
"""


# 1. Enumeraciones (Enums):
class RoleEnum(Enum):
    """RoleEnum: Defines the predefined roles within the system
    (administrator, reseller, organization administrator, organization editor, organization viewer).
    """

    ADMINISTRATOR = ("administrator", "Administrador")
    RESELLER = ("reseller", "Revendedor")
    ORG_ADMIN = ("org_admin", "Administrador de Organización")
    ORG_EDITOR = ("org_editor", "Editor de Organización")
    ORG_VIEWER = ("org_viewer", "Visor de Organización")

    def __init__(self, id, description):
        self.id = id
        self.description = description

    @property
    def value(self):
        """
        Devuelve el valor del rol.
        """
        return self.id


class ActionEnum(Enum):
    """ActionEnum: Define las acciones posibles
    (crear, leer, actualizar, eliminar, administrar)."""

    CREATE = "create"
    READ = "read"
    UPDATE = "update"
    DELETE = "delete"
    MANAGE = "manage"


class PermissionEnum(Enum):
    """PermissionEnum: Define los permisos disponibles
    (gestión completa, gestión de organización, gestión de contenido, informes, ajustes del sistema, informes limitados).
    """

    FULL_MANAGEMENT = "full_management"
    ORG_MANAGEMENT = "org_management"
    CONTENT_MANAGEMENT = "content_management"
    REPORTING = "reporting"
    SYSTEM_SETTINGS = "system_settings"
    LIMITED_REPORTS = "limited_reports"


# Definir permisos por rol
ROLE_PERMISSIONS = {
    RoleEnum.ADMINISTRATOR: [PermissionEnum.FULL_MANAGEMENT],
    RoleEnum.RESELLER: [PermissionEnum.ORG_MANAGEMENT],
    RoleEnum.ORG_ADMIN: [PermissionEnum.CONTENT_MANAGEMENT, PermissionEnum.REPORTING],
    RoleEnum.ORG_EDITOR: [PermissionEnum.REPORTING],
    RoleEnum.ORG_VIEWER: [PermissionEnum.REPORTING],
}
# Definir acciones permitidas por permiso
PERMISSION_ACTIONS = {
    PermissionEnum.FULL_MANAGEMENT: [action for action in ActionEnum],
    PermissionEnum.ORG_MANAGEMENT: [
        ActionEnum.CREATE,
        ActionEnum.READ,
        ActionEnum.UPDATE,
        ActionEnum.DELETE,
    ],
    PermissionEnum.CONTENT_MANAGEMENT: [
        ActionEnum.CREATE,
        ActionEnum.READ,
        ActionEnum.UPDATE,
    ],
    PermissionEnum.REPORTING: [ActionEnum.READ],
}

# tables
user_organization = db.Table(
    "user_organization",
    db.Column("user_id", db.String(36), db.ForeignKey("users.id"), primary_key=True),
    db.Column(
        "organization_id",
        db.Integer,
        db.ForeignKey("organizations.id", ondelete="CASCADE"),
        primary_key=True,
    ),
    db.Index("ix_user_organization_user_id", "user_id"),
    db.Index("ix_user_organization_organization_id", "organization_id"),
    # "Tabla de relación entre usuarios y organizaciones.",
)


def short_uuid():
    return hex(uuid.uuid4().int & 0xFFFFFFFF)[2:].upper()  # 8 caracteres hexadecimales


# Clases
class User(db.Model):
    """Modelo que representa a los usuarios del sistema.
    Gestiona la información personal, credenciales de acceso, roles,
    y la pertenencia a organizaciones (clientes).
    """

    __tablename__ = "users"
    id = db.Column(
        db.String(8),
        primary_key=True,
        unique=True,
        default=short_uuid,
        doc="Clave primaria única del usuario en formato UUID.",
    )
    username = db.Column(
        db.String(80),
        unique=True,
        nullable=False,
        index=True,
        doc="Nombre de usuario (String, único, no nulo, indexado). Utilizado para el login.",
    )
    email = db.Column(
        db.String(120),
        unique=True,
        nullable=False,
        index=True,
        doc="Dirección de correo electrónico (String, único, no nulo, indexado).",
    )
    full_name = db.Column(
        db.String(128),
        nullable=False,
        doc="Nombre completo del usuario (String, no nulo).",
    )
    password_hash = db.Column(
        db.String(255),
        nullable=False,
        doc="Hash de la contraseña (String). Almacena la contraseña de forma segura.",
    )
    profile_data = db.Column(
        db.JSON,
        nullable=False,
        default=dict,
        doc="Datos adicionales del perfil (JSON, valor por defecto: diccionario vacío). Permite almacenar información extra específica del usuario.",
    )
    created_at = db.Column(
        db.DateTime,
        default=datetime.utcnow,
        doc="Fecha de creación del usuario (DateTime).",
    )
    updated_at = db.Column(
        db.DateTime,
        default=datetime.utcnow,
        onupdate=datetime.utcnow,
        doc="Fecha de última actualización del usuario (DateTime). Se actualiza automáticamente.",
    )
    active = db.Column(
        db.Boolean,
        default=True,
        doc="Estado de la cuenta (Boolean, valor por defecto: True). Indica si la cuenta está activa o inactiva.",
    )
    role = db.Column(
        db.Enum(RoleEnum),
        nullable=False,
        default=RoleEnum.ORG_VIEWER,
        doc="Rol del usuario (Enum, no nulo, valor por defecto: ORG_VIEWER). Define el rol del usuario en el sistema.",
    )
    # Relaciones
    reseller_packages = db.relationship(
        "ResellerPackage", backref="reseller", lazy="dynamic"
    )

    organizations = db.relationship(
        "Organization", secondary=user_organization, backref="users", lazy="dynamic"
    )

    def __repr__(self):
        """Representación en cadena del objeto User.
        Returns:
            str: Representación en cadena del usuario.
        """
        return f"<User {self.username}>"

    def set_password(self, password):
        """
        Establece un hash seguro para la contraseña del usuario.
        Args:
            password (str): La contraseña en texto plano.
        Raises:
            ValueError: Si la contraseña no cumple con los requisitos de seguridad.
        """
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        """
        Verifica si la contraseña proporcionada coincide con el hash almacenado.
        Args:
            password (str): La contraseña en texto plano a verificar.
        Returns:
            bool: True si la contraseña coincide, False en caso contrario.
        """
        return check_password_hash(self.password_hash, password)

    def has_permission(self, permission_name, action_name, client_id=None):
        """
        Verifica si el usuario tiene un permiso específico y opcionalmente dentro de un cliente específico.
        Args:
            permission_name (str): Nombre del permiso a verificar (ej: 'full_management').
            action_name (str): Nombre de la acción a verificar (ej: 'create').
            client_id (int, optional): ID del cliente para verificar el permiso dentro de ese cliente. Defaults to None.
        Returns:
            bool: True si el usuario tiene el permiso y la acción especificados, False en caso contrario.
        """
        try:
            perm_enum = PermissionEnum(permission_name)
            action_enum = ActionEnum(action_name)

            # Verificar si el permiso está asignado al rol del usuario
            if perm_enum in ROLE_PERMISSIONS.get(self.role, []):
                # Verificar si la acción está permitida para ese permiso
                if action_enum in PERMISSION_ACTIONS.get(perm_enum, []):
                    if client_id:
                        return self.client_id == client_id or self.is_admin()
                    return True
        except ValueError:
            # Si alguno de los valores no está en las enumeraciones, retornar False
            return False
        return False

    def is_admin(self):
        """
        Verifica si el usuario tiene el rol de administrador.
        Returns:
            bool: True si el usuario tiene el rol de administrador, False en caso contrario.
        """
        return self.role == RoleEnum.ADMINISTRATOR

    def is_reseller(self):
        """
        Verifica si el usuario tiene el rol de reseller.
        Returns:
            bool: True si el usuario tiene el rol de reseller, False en caso contrario.
        """
        return self.role == RoleEnum.RESELLER

    def is_org_manager(self):
        """
        Verifica si es un administrador de organización.
        Returns:
            bool: True si es un administrador de organización, False en caso contrario.
        """
        return self.role == RoleEnum.ORG_ADMIN

    def is_client_user(self, client_id):
        """
        Verifica si el usuario pertenece a un cliente específico.
        Args:
            client_id (int): El ID del cliente a verificar.
        Returns:
            bool: True si el usuario pertenece al cliente, False en caso contrario.
        """
        return self.client_id == client_id

    def have_role(self, role):
        """
        Verifica si el usuario tiene un rol específico.
        Args:
            role (RoleEnum): El rol a verificar.
        Returns:
            bool: True si el usuario tiene el rol especificado, False en caso contrario.
        """
        return self.role == role

    def get_role(self):
        """Mostrar el nombre descriptivo del rol"""
        return self.role.description

    @classmethod
    def get_by_username(self, username):
        """
        Obtiene un usuario por su nombre de usuario.
        Args:
            username (str): Nombre de usuario.
        Returns:
            User or None: El usuario si existe, None en caso contrario.
        """
        return self.query.filter_by(username=username).first()

    @classmethod
    # @lru_cache(maxsize=32)
    def get_by_email(self, email):
        """
        Obtiene un usuario por su correo electrónico.
        Args:
            email (str): Correo electrónico.
        Returns:
            User or None: El usuario si existe, None en caso contrario.
        """
        return self.query.filter_by(email=email).first()

    def assign_organization(self, organization_id):
        """
        Asigna una organización a este usuario.
        Args:
            organization_id (int): ID de la organización a asignar.
        """
        organization = Organization.query.get(organization_id)
        if organization:
            self.organizations.append(organization)
            db.session.commit()

    def unassign_organization(self, organization_id):
        """
        Desasigna una organización de este usuario.
        Args:
            organization_id (int): ID de la organización a desasignar.
        """
        organization = Organization.query.get(organization_id)
        if organization in self.organizations:
            self.organizations.remove(organization)
            db.session.commit()


class Organization(db.Model):
    """Modelo que representa a los clientes u organizaciones en el sistema."""

    __tablename__ = "organizations"
    id = db.Column(
        db.Integer, primary_key=True, doc="Clave primaria única del cliente."
    )
    name = db.Column(
        db.String(100), nullable=False, doc="Nombre del cliente (String, no nulo)."
    )
    description = db.Column(
        db.String(255),
        doc="Descripción del cliente. Proporciona información adicional sobre el cliente u organización.",
    )
    profile_data = db.Column(
        db.JSON,
        default=dict,
        doc="Datos adicionales del cliente (JSON, valor por defecto: diccionario vacío). Permite almacenar información extra específica del cliente.",
    )
    reseller_id = db.Column(
        db.Integer,
        db.ForeignKey("reseller_packages.id", ondelete="SET NULL"),
        nullable=True,
        index=True,
        doc="Relación opcional con el paquete de reseller",
    )
    created_at = db.Column(
        db.DateTime, default=datetime.utcnow, doc="Fecha de creación del cliente."
    )
    updated_at = db.Column(
        db.DateTime,
        default=datetime.utcnow,
        onupdate=datetime.utcnow,
        doc="Fecha de última actualización del cliente.",
    )
    active = db.Column(
        db.Boolean,
        default=True,
        doc="Estado del cliente (Boolean, valor por defecto: True). Indica si el cliente está activo o inactivo.",
    )
    # Relación con ResellerPackage
    reseller_package = db.relationship("ResellerPackage", backref="organizations")

    def __repr__(self):
        """Representación en cadena del objeto Organization.
        Returns:
            str: Representación en cadena del cliente.
        """
        return f"<Organization {self.name}>"

    @property
    def get_reseller(self):
        """
        Obtiene el usuario reseller asociado a la organización, si existe.
        Returns:
            User or None: El usuario reseller si existe, None en caso contrario
        """
        if self.reseller_package:
            return User.query.get(self.reseller_package.reseller_id)
        return None

    def get_users(self):
        """
        Devuelve los ID de los usuarios asociados a este cliente.
        Returns:
            list: Lista de IDs de usuarios.
        """
        return [user.id for user in self.users]


class ResellerPackage(db.Model):
    __tablename__ = "reseller_packages"
    id = db.Column(
        db.Integer,
        primary_key=True,
        doc="Clave primaria única del paquete de reseller.",
    )
    reseller_id = db.Column(
        db.String(8),
        db.ForeignKey("users.id"),
        nullable=False,
        doc="ID del usuario reseller (UUID).",
    )

    max_clients = db.Column(
        db.Integer,
        default=5,
        nullable=False,
        doc="Número máximo de clientes permitidos en este paquete de reseller.",
    )
    current_clients = db.Column(
        db.Integer,
        default=0,
        nullable=False,
        doc="Total de clientes asignados hasta el momento a ese reseller.",
    )

    # Constraint a nivel de base de datos
    __table_args__ = (
        db.CheckConstraint("current_clients <= max_clients", name="check_client_limit"),
    )

    def add_client(self):
        """
        Verifica si el reseller puede crear más clientes.
        Returns:
            bool: True si puede crear más clientes, False en caso contrario.
        """
        return self.current_clients < self.max_clients

    def increase_client(self):
        """
        Incrementa el contador de clientes.
        """
        self.current_clients += 1
        db.session.commit()

    def decrease_client(self):
        """
        Decrementa el contador de clientes.
        """
        if self.current_clients > 0:
            self.current_clients -= 1
            db.session.commit()

    def get_available_slots(self):
        """
        Obtiene el número de espacios disponibles para nuevos clientes.
        Returns:
            int: Número de espacios disponibles
        """
        return max(0, self.max_clients - self.current_clients)

    def assign_client(self, organization):
        """
        Asigna un cliente a este reseller si hay espacios disponibles.
        Args:
            client (Client): Cliente a asignar
        Returns:
            bool: True si se asignó correctamente, False en caso contrario
        """
        if not self.add_client():
            return False

        organization.reseller_id = self.id
        self.increase_client()
        return True

    def unassign_client(self, organizarion):
        """
        Desasigna un cliente de este reseller.
        Args:
            client (Client): Cliente a desasignar
        Returns:
            bool: True si se desasignó correctamente, False en caso contrario
        """
        if not self.reseller_id == organizarion.reseller_id:
            return False

        organizarion.reseller_package_id = None
        self.decrease_client()
        return True

    def get_all_users_clients(self):
        """
        Obtiene el listado de todos los usuarios que son parte de los clientes de este reseller.

        Returns:
            list: Lista de usuarios asociados a los clientes del reseller.
        """
        users = []
        for organization in self.organizations:
            users.append(organization.users)
        return users


# Funciones de utilidad.
# Funciones de utilidad adicionales


@lru_cache(maxsize=128)
def check_permission(user_id, permission_name, action_name, client_id=None):
    """
    Verifica permisos de forma centralizada y cacheada.
    Args:
        user_id: (int): ID del usuario
        permission_name (str): Nombre del permiso a verificar (ej: 'full_management')
        action_name (str): Nombre de la acción a verificar (ej: 'create')
        client_id (int): ID de la organización (opcional)

    Returns:
        bool: True si el usuario tiene el permiso, False en caso contrario

    """
    user = User.query.get(user_id)
    if not user:
        return False

    return user.has_permission(permission_name, action_name, client_id)


def verify_user_credentials(username, password):
    """
    Verifica las credenciales de un usuario de forma segura.

    Args:
        username (str): Nombre de usuario
        password (str): Contraseña en texto plano

    Returns:
        User or None: El usuario si las credenciales son correctas, None en caso contrario
    """
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password) and user.active:
        return user
    return None


def verify_user_in_organization(user_id: str, org_id: int) -> bool:
    """
    Verifica si un usuario pertenece a una organización específica.

    Args:
        user_id (str): ID del usuario (UUID en formato string).
        org_id (int): ID de la organización.

    Returns:
        bool: True si el usuario pertenece a la organización o tiene permisos especiales,
              False en caso contrario.
    """
    # Obtener el usuario por su ID
    user = User.query.get(user_id)
    if not user:
        return False  # El usuario no existe, retorna False

    # Si el usuario es administrador, tiene acceso implícito a todas las organizaciones
    if user.is_admin():
        return True

    # Verificar si el usuario es un reseller y la organización pertenece a su paquete
    if user.is_reseller():
        # Obtener el paquete del reseller asociado al usuario
        reseller_package = ResellerPackage.query.filter_by(reseller_id=user_id).first()
        if reseller_package:
            # Verificar si la organización está en las organizaciones del paquete del reseller
            organization = Organization.query.filter_by(
                id=org_id, reseller_id=reseller_package.id
            ).first()
            if organization:
                return True  # La organización pertenece al reseller

    # Verificar si el usuario está directamente asociado a la organización
    # Usamos la relación 'organizations' del modelo User
    return any(org.id == org_id for org in user.organizations)


def get_clients_for_user(user_id: str):
    """
    Obtiene el listado de clientes asignados a un usuario específico.
    Args:
        user_id (str): ID del usuario (UUID en formato string).
    Returns:
        list: Lista de organizaciones asignadas al usuario.
    """
    # Obtener el usuario por su ID
    user = User.query.get(user_id)
    if not user:
        return []
    # Si el usuario es administrador, obtener todas las organizaciones
    if user.is_admin():
        return Organization.query.all()
    # Si el usuario es reseller, obtener las organizaciones asignadas a su paquete
    if user.is_reseller():
        reseller_package = (
            ResellerPackage.query.options(joinedload(ResellerPackage.organizations))
            .filter_by(reseller_id=user_id)
            .first()
        )
        if reseller_package:
            return reseller_package.organizations
    # Si el usuario no es administrador ni reseller, obtener las organizaciones a las que está directamente asignado
    return (
        User.query.filter_by(id=user_id)
        .options(joinedload(User.organizations))
        .first()
        .organizations
    )

```

=== File: ./core/controller.py ===
```python
# Python standard library imports
from functools import wraps

# Third party imports
from flask import (
    request,
    jsonify,
    redirect,
    url_for,
    render_template,
    current_app,
    Response,
    stream_with_context,
)
from flask.views import MethodView
from flask_jwt_extended import (
    jwt_required,
    get_jwt_identity,
    get_jwt,
    verify_jwt_in_request,
    create_access_token,
    create_refresh_token,
    get_csrf_token,
    set_access_cookies,
    set_refresh_cookies,
    unset_jwt_cookies,
)
from werkzeug.exceptions import BadRequest, NotFound, Forbidden, Unauthorized
from sqlalchemy import inspect
from sqlalchemy.exc import IntegrityError

# Local application imports
from app.extensions import db
from .models import (
    User,
    Organization,
    ResellerPackage,
    RoleEnum,
    # PermissionEnum,
    # ActionEnum,
    verify_user_in_organization,
)


def login_required(fn):
    """Decorador para revisar si el usuario está autenticado."""

    @wraps(fn)
    def wrapper(*args, **kwargs):
        try:
            verify_jwt_in_request()
        except Exception:
            return redirect(url_for("core.login"))
        return fn(*args, **kwargs)

    return wrapper


# Decorador personalizado para permisos
def check_permission(required_roles=None, resource_owner_check=False):
    """🎍 Decorador que verifica roles y permisos del usuario basado en el JWT.

    Args:
        required_roles (list, optional): Lista de roles requeridos (ej: ["administrator", "reseller"]).
        resource_owner_check (bool): Si True, verifica que el usuario sea dueño del recurso o tenga permisos superiores.

    Raises:
        Forbidden: Si el usuario no tiene los permisos necesarios.
    """
    if required_roles is None:
        required_roles = []

    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            claims = get_jwt()
            user_role = claims.get("rol")
            user_id = claims.get("id")

            # Verificar si el rol del usuario está en los roles requeridos
            if required_roles and user_role not in required_roles:
                raise Forbidden("Insufficient permissions for this action.")

            # Si se requiere verificación de propietario
            if resource_owner_check:
                resource_id = kwargs.get("user_id") or kwargs.get("org_id")
                if resource_id:
                    user = User.query.get(user_id)
                    if not user:
                        raise NotFound("User not found.")

                    # Administradores tienen acceso total
                    if user_role == RoleEnum.ADMINISTRATOR.value:
                        return f(*args, **kwargs)

                    # Verificar si el usuario es el propietario del recurso o tiene permisos superiores
                    if user_id != resource_id and not user.is_reseller():
                        raise Forbidden("You can only modify your own resources.")

            return f(*args, **kwargs)

        return decorated_function

    return decorator


def check_resource_access(resource, claims):
    """
    Verifica si un usuario tiene acceso a un recurso específico basado en su rol y claims.
    
    Args:
        resource: El recurso al que se intenta acceder (debe tener un atributo org_id)
        claims: Diccionario con información del usuario (rol, user_id, org_id)
    
    Returns:
        bool: True si el usuario tiene acceso, False en caso contrario
    
    Raises:
        ValueError: Si los claims no contienen la información necesaria
    """
    user_role = claims.get("rol")
    if not user_role:
        return False

    # Caso del rol ADMINISTRATOR: acceso total
    if user_role == RoleEnum.ADMINISTRATOR.value:
        return True
    
    # Caso del rol RESELLER: acceso a recursos de organizaciones en su paquete
    if user_role == RoleEnum.RESELLER.value:
        reseller_org_id = claims.get("org_id")
        if not reseller_org_id:
            return False
        reseller_package = ResellerPackage.query.filter_by(reseller_id=reseller_org_id).first()
        if not reseller_package:
            return False
        resource_org_id = getattr(resource, "org_id", None)
        if resource_org_id is None:
            return False
        return any(org.id == resource_org_id for org in reseller_package.organizations)
    
    # Caso de roles organizacionales: ORG_ADMIN, ORG_EDITOR, ORG_VIEWER
    if user_role in (RoleEnum.ORG_ADMIN.value, RoleEnum.ORG_EDITOR.value, RoleEnum.ORG_VIEWER.value):
        user_id = claims.get("user_id")
        if not user_id:
            return False
        user = User.query.get(user_id)
        if not user:
            return False
        resource_org_id = getattr(resource, "org_id", None)
        if resource_org_id is None:
            return False
        return any(org.id == resource_org_id for org in user.organizations)
    
    return False


class LoginView(MethodView):
    """Handle user authentication"""

    def post(self):
        """User login endpoint
        :param str username: Registered username
        :param str password: Account password
        :status 200: Successful login
        :status 400: Invalid request data
        :status 401: Authentication failure
        """
        try:
            data = request.get_json()
            if not data:
                return jsonify({"msg": "Missing request data"}), 400

            username = data.get("username", "").strip()
            password = data.get("password", "").strip()

            if not username or not password:
                return jsonify({"msg": "Credentials required"}), 400

            user = User.get_by_username(username)
            if self._invalid_credentials(user, password):
                return jsonify({"msg": "Invalid credentials"}), 401

            claims = self._build_claims(user)
            tokens = self._generate_tokens(str(user.id), claims)
            response = self._build_response(tokens, claims)

            return response

        except Exception as e:
            print(f"Login error: {str(e)}")
            return jsonify({"msg": "Invalid request"}), 400

    def _invalid_credentials(self, user, password):
        """Validate user credentials"""
        return not user or not user.check_password(password) or not user.active

    def _build_claims(self, user):
        """Construct JWT claims payload"""
        claims = {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "organizations": [
                {"id": org.id, "name": org.name} for org in user.organizations
            ],
            "rol": user.role.value,
        }

        if user.role == RoleEnum.RESELLER:
            reseller_package = user.reseller_packages.first()
            if reseller_package:
                claims["reseller_organizations"] = [
                    {"id": org.id, "name": org.name}
                    for org in reseller_package.organizations
                ]
        return claims

    def _generate_tokens(self, identity, claims):
        """Generate JWT tokens"""
        return (
            create_access_token(identity=identity, additional_claims=claims),
            create_refresh_token(identity=identity, additional_claims=claims),
        )

    def _build_response(self, tokens, claims):
        """Build final response with cookies"""
        access_token, refresh_token = tokens
        response = jsonify(
            {
                "access_csrf": get_csrf_token(access_token),
                "refresh_csrf": get_csrf_token(refresh_token),
                "additional_claims": claims,
                "msg": "Authentication successful",
            }
        )
        set_access_cookies(response, access_token)
        set_refresh_cookies(response, refresh_token)
        return response


class RefreshView(MethodView):
    """Handle token refresh operations"""

    @jwt_required(refresh=True)
    def post(self):
        """Refresh access token endpoint
        :status 200: Token refreshed successfully
        :status 401: Invalid or expired refresh token
        """
        try:
            current_user = get_jwt_identity()
            jwt_data = get_jwt()

            user = User.query.get(current_user)
            if not user or not user.active:
                return jsonify({"msg": "Invalid token"}), 401

            new_claims = self._update_claims(
                jwt_data.get("additional_claims", {}), user
            )
            new_access_token = create_access_token(
                identity=current_user, additional_claims=new_claims
            )

            response = jsonify(
                {
                    "access_csrf": get_csrf_token(new_access_token),
                    "additional_claims": new_claims,
                    "msg": "Token refreshed",
                }
            )
            set_access_cookies(response, new_access_token)

            return response

        except Exception as e:
            print(f"Refresh error: {str(e)}")
            return jsonify({"msg": "Token refresh failed"}), 401

    def _update_claims(self, existing_claims, user):
        """Update JWT claims with fresh user data"""
        updated_claims = existing_claims.copy()

        # Actualizar datos sensibles a cambios
        updated_claims.update(
            {
                "username": user.username,
                "email": user.email,
                "rol": user.role.value,
                "organizations": [
                    {"id": org.id, "name": org.name} for org in user.organizations
                ],
            }
        )

        # Actualizar organizaciones de reseller si corresponde
        if user.role == RoleEnum.RESELLER:
            reseller_package = user.reseller_packages.first()
            if reseller_package:
                updated_claims["reseller_organizations"] = [
                    {"id": org.id, "name": org.name}
                    for org in reseller_package.organizations
                ]

        return updated_claims


# Vista para usuarios
class UserView(MethodView):
    """Clase para gestionar operaciones CRUD sobre usuarios."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, user_id=None):
        """
        Obtiene una lista de usuarios o un usuario específico.

        Args:
            user_id (str, optional): ID del usuario a consultar.

        Returns:
            JSON: Lista de usuarios o detalles de un usuario específico.
        """
        if user_id:
            return self._get_user(user_id)
        return self._get_user_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea un nuevo usuario.

        Returns:
            JSON: Detalles del usuario creado.
        """
        data = request.get_json()
        if not data or not all(
            k in data for k in ("username", "email", "full_name", "password", "role")
        ):
            raise BadRequest("Missing required fields.")

        return self._create_user(data)

    @check_permission(resource_owner_check=True)
    def put(self, user_id):
        """
        Actualiza un usuario existente.

        Args:
            user_id (str): ID del usuario a actualizar.

        Returns:
            JSON: Detalles del usuario actualizado.
        """
        data = request.get_json()
        if not data or not user_id:
            raise BadRequest("Missing user_id or data.")

        return self._update_user(user_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, user_id=None):
        """
        Elimina un usuario existente.

        Args:
            user_id (str): ID del usuario a eliminar.

        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        if data and "ids" in data:
            return self._delete_user(user_ids=data["ids"])
        if user_id:
            return self._delete_user(user_id=user_id)
        raise BadRequest("Missing user_id.")

    # Métodos auxiliares
    def _get_user_list(self):
        """Obtiene una lista de todos los usuarios activos."""
        claims = get_jwt()
        user_role = claims.get("rol")
        user_id = claims.get("id")

        if user_role == RoleEnum.ADMINISTRATOR.value:
            users = User.query.filter_by(active=True).all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=user_id
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            users = []
            for org in reseller_package.organizations:
                users.extend(org.users)
        else:
            raise Forbidden("Only administrators and resellers can list users.")

        return jsonify([self._serialize_user(user) for user in users]), 200

    def _get_user(self, user_id):
        """Obtiene los detalles de un usuario específico."""
        user = User.query.get_or_404(user_id)
        claims = get_jwt()
        if not self._has_access(user, claims):
            raise Forbidden("You do not have access to this user.")
        return jsonify(self._serialize_user(user)), 200

    def _create_user(self, data):
        """Crea un nuevo usuario con los datos proporcionados."""
        if User.query.filter_by(username=data["username"]).first():
            raise BadRequest("Username already exists.")
        if User.query.filter_by(email=data["email"]).first():
            raise BadRequest("Email already exists.")
        ROLE_MAP = {
            "reseller": RoleEnum.RESELLER,
            "administrator": RoleEnum.ADMINISTRATOR,
            "org_admin": RoleEnum.ORG_ADMIN,
            "org_editor": RoleEnum.ORG_EDITOR,
            "org_viewer": RoleEnum.ORG_VIEWER,
        }
        role = ROLE_MAP.get(data["role"].lower())
        if role is None:
            raise BadRequest("Invalid role.")
        user = User(
            username=data["username"],
            email=data["email"],
            full_name=data["full_name"],
            role=role,
        )
        if "organization_id" in data:
            organization_id = data["organization_id"]
            user.assign_organization(organization_id)
        user.set_password(data["password"])
        db.session.add(user)
        db.session.commit()
        return jsonify(self._serialize_user(user)), 201

    def _update_user(self, user_id, data):
        """Actualiza los datos de un usuario existente."""
        user = User.query.get_or_404(user_id)
        if "username" in data and data["username"] != user.username:
            if User.query.filter_by(username=data["username"]).first():
                raise BadRequest("Username already exists.")
            user.username = data["username"]
        if "email" in data and data["email"] != user.email:
            if User.query.filter_by(email=data["email"]).first():
                raise BadRequest("Email already exists.")
            user.email = data["email"]
        if "full_name" in data:
            user.full_name = data["full_name"]
        if "password" in data:
            user.set_password(data["password"])
        ROLE_MAP = {
            "reseller": RoleEnum.RESELLER,
            "administrator": RoleEnum.ADMINISTRATOR,
            "org_admin": RoleEnum.ORG_ADMIN,
            "org_editor": RoleEnum.ORG_EDITOR,
            "org_viewer": RoleEnum.ORG_VIEWER,
        }
        if "role" in data:
            claims = get_jwt()
            if claims.get("rol") == RoleEnum.ADMINISTRATOR.value:
                role = ROLE_MAP.get(data["role"].lower())
                if role is None:
                    raise BadRequest("Invalid role.")
                user.role = role
            else:
                raise Forbidden("Only administrators can change roles.")
        if "organization_id" in data:
            organization_id = data["organization_id"]
            user = User.query.get(user_id)
            if user:
                # Desasignar organización anterior si corresponde
                if user.organizations:
                    for org in user.organizations:
                        user.unassign_organization(org.id)
                # Asignar nueva organización
                user.assign_organization(organization_id)

        db.session.commit()
        return jsonify(self._serialize_user(user)), 200

    def _delete_user(self, user_id=None, user_ids=None):
        """Elimina un usuario marcándolo como inactivo."""
        claims = get_jwt()

        if user_id and user_ids:
            raise BadRequest("Solo se puede especificar user_id o user_ids, no ambos.")

        if user_id:
            user = User.query.get_or_404(user_id)
            user.active = False  # no se borra al usuario, solo se inactiva.
            db.session.commit()
            return jsonify({"message": "User deleted successfully"}), 200

        if user_ids:
            deleted_users = []
            for user_id in user_ids:
                user = User.query.get(user_id)
                if not user:
                    continue
                user.active = False
                deleted_users.append(user.username)
                db.session.commit()
                deleted_users_str = ", ".join(deleted_users)
            return (
                jsonify({"message": f"Users {deleted_users_str} deleted successfully"}),
                200,
            )

        if not deleted_users:
            return (
                jsonify(
                    {"error": "No users were deleted due to permission restrictions"}
                ),
                403,
            )

    def _has_access(self, user, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        user_role = claims.get("rol")
        user_id = claims.get("id")

        if user_role == RoleEnum.ADMINISTRATOR.value:
            return True
        if user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=user_id
            ).first()
            return any(
                org.id in [o.id for o in reseller_package.organizations]
                for org in user.organizations
            )
        return user_id == user.id

    def _serialize_user(self, user):
        """Serializa un objeto User a un diccionario."""
        return {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "full_name": user.full_name,
            "role": user.role.value,
            "active": user.active,
            "org": next((org.name for org in user.organizations.all()), ""),
            "created_at": user.created_at.isoformat(),
            "updated_at": user.updated_at.isoformat(),
        }


# Vista para organizaciones
class OrgView(MethodView):
    """Clase para gestionar operaciones CRUD sobre organizaciones."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, org_id=None):
        """
        Obtiene una lista de organizaciones o una organización específica.

        Args:
            org_id (int, optional): ID de la organización a consultar.

        Returns:
            JSON: Lista de organizaciones o detalles de una organización específica.
        """
        if org_id:
            return self._get_organization(org_id)
        return self._get_org_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea una nueva organización.

        Returns:
            JSON: Detalles de la organización creada.
        """
        data = request.get_json()
        if not data or not all(k in data for k in ("name", "reseller_id")):
            raise BadRequest("Missing required fields.")

        return self._create_organization(data)

    @check_permission(resource_owner_check=True)
    def put(self, org_id):
        """
        Actualiza una organización existente.

        Args:
            org_id (int): ID de la organización a actualizar.

        Returns:
            JSON: Detalles de la organización actualizada.
        """
        data = request.get_json()
        if not data or not org_id:
            raise BadRequest("Missing org_id or data.")

        return self._update_organization(org_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, org_id=None):
        """
        Elimina una o varias organizaciones existentes.

        Args:
            org_id (int, optional): ID de la organización a eliminar.

        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        if data and "ids" in data:
            return self._delete_organization(org_ids=data["ids"])
        if org_id:
            return self._delete_organization(org_id=org_id)
        raise BadRequest("Missing org_id or ids.")

    # Métodos auxiliares
    def _get_org_list(self):
        """Obtiene una lista de todas las organizaciones activas."""
        claims = get_jwt()
        user_role = claims.get("rol")
        user_id = claims.get("id")

        if user_role == RoleEnum.ADMINISTRATOR.value:
            orgs = Organization.query.filter_by(active=True).all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=user_id
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            orgs = reseller_package.organizations
        else:
            user = User.query.get(user_id)
            orgs = user.organizations

        return jsonify([self._serialize_organization(org) for org in orgs]), 200

    def _get_organization(self, org_id):
        """Obtiene los detalles de una organización específica."""
        org = Organization.query.get_or_404(org_id)
        claims = get_jwt()
        if not self._has_access(org, claims):
            raise Forbidden("You do not have access to this organization.")
        return jsonify(self._serialize_organization(org)), 200

    def _create_organization(self, data):
        """Crea una nueva organización con los datos proporcionados."""
        org = Organization(
            name=data["name"],
            description=data.get("description", ""),
        )
        if "reseller_id" in data:
            claims = get_jwt()
            if claims.get("rol") == RoleEnum.ADMINISTRATOR.value:
                reseller_user = User.query.get(data["reseller_id"])
                if reseller_user:
                    reseller_package = ResellerPackage.query.filter_by(
                        reseller_id=reseller_user.id
                    ).first()
                    if reseller_package:
                        if reseller_package.add_client():
                            if org.reseller_id:
                                old_reseller_package = ResellerPackage.query.get(
                                    org.reseller_id
                                )
                                old_reseller_package.decrease_client()
                            org.reseller_id = reseller_package.id
                            reseller_package.increase_client()
                        else:
                            raise BadRequest(
                                "Reseller has reached the maximum number of clients."
                            )
                    else:
                        raise BadRequest(
                            "The reseller does not have a reseller package."
                        )
                else:
                    pass
            else:
                raise Forbidden("Only administrators can change reseller assignments.")
        db.session.add(org)
        db.session.commit()
        return jsonify(self._serialize_organization(org)), 201

    def _update_organization(self, org_id, data):
        """Actualiza los datos de una organización existente."""
        org = Organization.query.get_or_404(org_id)
        if "name" in data and data["name"]:
            org.name = data["name"]
        if "description" in data and data["description"] is not None:
            org.description = data["description"]
        if "reseller_id" in data:
            claims = get_jwt()
            if claims.get("rol") == RoleEnum.ADMINISTRATOR.value:
                reseller_user = User.query.get(data["reseller_id"])
                if reseller_user:
                    reseller_package = ResellerPackage.query.filter_by(
                        reseller_id=reseller_user.id
                    ).first()
                    if reseller_package:
                        if reseller_package.add_client():
                            if org.reseller_id:
                                old_reseller_package = ResellerPackage.query.get(
                                    org.reseller_id
                                )
                                old_reseller_package.decrease_client()
                            org.reseller_id = reseller_package.id
                            reseller_package.increase_client()
                        else:
                            raise BadRequest(
                                "Reseller has reached the maximum number of clients."
                            )
                    else:
                        raise BadRequest(
                            "The reseller does not have a reseller package."
                        )
                else:
                    pass
            else:
                raise Forbidden("Only administrators can change reseller assignments.")
        db.session.commit()
        return jsonify(self._serialize_organization(org)), 200

    def _delete_organization(self, org_id=None, org_ids=None):
        """
        Elimina una o varias organizaciones marcándolas como inactivas.

        Args:
            org_id (int, optional): ID de la organización a eliminar.
            org_ids (list, optional): Lista de IDs de organizaciones a eliminar.

        Returns:
            JSON: Mensaje de confirmación.
        """
        if org_id and org_ids:
            raise BadRequest("Solo se puede especificar org_id o org_ids, no ambos.")

        claims = get_jwt()
        user_role = claims.get("rol")
        user_id = claims.get("id")

        if org_id:
            org = Organization.query.get_or_404(org_id)
            if not self._has_access(org, claims):
                raise Forbidden("You do not have access to this organization.")
            org.active = False
            if org.reseller_id:
                reseller_package = ResellerPackage.query.get(org.reseller_id)
                if reseller_package:
                    reseller_package.decrease_client()
            db.session.commit()
            return jsonify({"message": "Organization deleted successfully"}), 200

        if org_ids:
            deleted_orgs = []
            for org_id in org_ids:
                org = Organization.query.get(org_id)
                if not org:
                    continue
                if not self._has_access(org, claims):
                    continue
                org.active = False
                if org.reseller_id:
                    reseller_package = ResellerPackage.query.get(org.reseller_id)
                    if reseller_package:
                        reseller_package.decrease_client()
                deleted_orgs.append(org.name)

            if not deleted_orgs:
                return (
                    jsonify(
                        {
                            "error": "No organizations were deleted due to permission restrictions"
                        }
                    ),
                    403,
                )

            db.session.commit()
            deleted_orgs_str = ", ".join(deleted_orgs)
            return (
                jsonify(
                    {
                        "message": f"Organizations {deleted_orgs_str} deleted successfully"
                    }
                ),
                200,
            )

        raise BadRequest("Missing org_id or org_ids.")

    def _has_access(self, org, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        user_role = claims.get("rol")
        user_id = claims.get("id")

        if user_role == RoleEnum.ADMINISTRATOR.value:
            return True
        if user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=user_id
            ).first()
            return reseller_package and org.reseller_id == reseller_package.id
        return verify_user_in_organization(user_id, org.id)

    def _serialize_organization(self, org):
        """Serializa un objeto Organization a un diccionario."""
        return {
            "id": org.id,
            "name": org.name,
            "description": org.description,
            "reseller_id": org.get_reseller.id if org.get_reseller else "",
            "reseller": org.get_reseller.full_name if org.get_reseller else "",
            "active": org.active,
            "created_at": org.created_at.isoformat(),
            "updated_at": org.updated_at.isoformat(),
        }


class InstallationView(MethodView):
    """Application installation system with improved error handling and transaction management."""

    def __init__(self):
        self.status = {
            "current_step": 0,
            "steps": [
                {
                    "name": "Verificando pre-instalación",
                    "status": "pending",
                    "error": None,
                },
                {"name": "Creando tablas", "status": "pending", "error": None},
                {
                    "name": "Creando usuario administrador",
                    "status": "pending",
                    "error": None,
                },
                {
                    "name": "Creando organizaciones base",
                    "status": "pending",
                    "error": None,
                },
                {"name": "Generando datos demo", "status": "pending", "error": None},
            ],
            "completed": False,
        }

    def get(self):
        """Render installation progress page."""

        return render_template("installer.j2", status=self.status)

    def _execute_step(self, step_index, func, *args):
        """Execute a single installation step with status tracking."""
        self._update_step(step_index, "in_progress")
        try:
            func(*args)
            self._update_step(step_index, "completed")
        except Exception as e:
            self._update_step(step_index, "failed", str(e))
            raise

    def _update_step(self, step_index, status, error=None):
        """Update installation progress status."""
        self.status["steps"][step_index]["status"] = status
        self.status["steps"][step_index]["error"] = error
        self.status["current_step"] = step_index

    def _check_pre_installation(self):
        """Verify system is already installed."""
        inspector = inspect(db.engine)
        if (
            inspector.has_table("users")
            and User.query.filter_by(role=RoleEnum.ADMINISTRATOR).first()
        ):
            raise Exception("El sistema ya está instalado")
        return True

    def _create_tables(self):
        """Create database schema."""
        try:
            db.create_all()
        except Exception as e:
            raise Exception("Error creando tablas: Verifica la conexión a BD") from e

    def _create_admin_user(self, form_data):
        """Create initial administrator account with validated credentials."""
        credentials = {
            "username": form_data.get("admin_username", "merlin").strip(),
            "password": form_data.get("admin_password", "Strong_Pass123!").strip(),
            "use_custom": "use_custom_creds" in form_data,
        }

        if credentials["use_custom"]:
            if not credentials["username"]:
                raise ValueError("Nombre de usuario requerido")
            if len(credentials["password"]) < 8:
                raise ValueError("La contraseña debe tener mínimo 8 caracteres")

        if User.get_by_username(credentials["username"]):
            raise ValueError(f'Usuario {credentials["username"]} ya existe')

        email = f"{credentials['username']}@system.local"
        if User.get_by_email(email):
            raise ValueError(f"Email {email} ya registrado")

        admin = User(
            username=credentials["username"],
            email=email,
            full_name=f"Admin ({credentials['username']})",
            role=RoleEnum.ADMINISTRATOR,
            active=True,
        )
        admin.set_password(credentials["password"])
        db.session.add(admin)
        db.session.flush()

    def _create_base_organizations(self):
        """Create default system organizations."""
        default_org = {
            "name": "Organización Principal",
            "description": "Organización principal",
            "reseller_id": None,
        }

        if Organization.query.filter_by(name=default_org["name"]).first():
            raise ValueError(f'Organización {default_org["name"]} ya existe')

        db.session.add(Organization(**default_org))
        db.session.flush()

    def _create_demo_data(self):
        """Generate sample data with reseller and organization users."""
        try:
            # Crear usuario reseller
            reseller_data = {
                "username": "demo_reseller",
                "email": "reseller@demo.local",
                "full_name": "Reseller Demo",
                "role": RoleEnum.RESELLER,
                "password": "SecureResellerPass123!",
            }

            if User.get_by_username(reseller_data["username"]):
                raise ValueError(f"User {reseller_data['username']} already exists")

            reseller = User(
                **{k: v for k, v in reseller_data.items() if k != "password"}
            )
            reseller.set_password(reseller_data["password"])
            db.session.add(reseller)
            db.session.flush()

            # Crear paquete de reseller
            reseller_package = ResellerPackage(
                reseller_id=reseller.id, max_clients=15, current_clients=0
            )
            db.session.add(reseller_package)
            db.session.flush()

            # Crear organización demo
            demo_org = Organization(
                name="Organización Demo",
                description="Cliente de demostración",
                profile_data={"demo": True},
            )
            db.session.add(demo_org)
            db.session.flush()

            if not reseller_package.assign_client(demo_org):
                raise RuntimeError("Failed to assign organization to reseller")

            # Crear usuarios de organización
            org_users = [
                {
                    "username": "org_admin",
                    "email": "admin@org.demo",
                    "role": RoleEnum.ORG_ADMIN,
                    "password": "OrgAdminSecure123!",
                },
                {
                    "username": "org_editor",
                    "email": "editor@org.demo",
                    "role": RoleEnum.ORG_EDITOR,
                    "password": "EditorSecure123!",
                },
                {
                    "username": "demo_viewer",
                    "email": "viewer@org.demo",
                    "role": RoleEnum.ORG_VIEWER,
                    "password": "ViewerSecure123!",
                },
            ]

            for user_data in org_users:
                if User.get_by_username(user_data["username"]):
                    raise ValueError(f"User {user_data['username']} already exists")

                user = User(
                    username=user_data["username"],
                    email=user_data["email"],
                    full_name=f"{user_data['role'].description} Demo",
                    role=user_data["role"],
                    active=True,
                )
                user.set_password(user_data["password"])
                user.organizations.append(demo_org)
                db.session.add(user)

            db.session.flush()

        except IntegrityError as e:
            current_app.logger.error(f"Demo data integrity error: {str(e)}")
            raise RuntimeError("Duplicate demo data detected") from e

    def post(self):
        """Handle installation process with transactional integrity."""
        try:
            db.session.begin_nested()

            self._execute_step(0, self._check_pre_installation)
            self._execute_step(1, self._create_tables)
            self._execute_step(2, self._create_admin_user, request.form)
            self._execute_step(3, self._create_base_organizations)

            if request.form.get("create_demo") == "true":
                self._execute_step(4, self._create_demo_data)

            from app.modules.foliage.helpers import initialize_nutrients

            initialize_nutrients()

            db.session.commit()
            self.status["completed"] = True
            return jsonify(
                {
                    "success": True,
                    "redirect": url_for("core.login"),
                    "status": self.status,
                }
            )

        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f"Installation failed: {str(e)}", exc_info=True)
            return (
                jsonify({"success": False, "error": str(e), "status": self.status}),
                500,
            )

```

=== File: ./__init__.py ===
```python
"""🚀 Started file app"""

# Python standard library imports
import os
import logging
from importlib import import_module

# Third party imports
from flask import Flask

# Local application imports
from .config import Config
from .extensions import jwt, db, migrate, cache
from .helpers.error_handler import setup_logging, error_handler
from .helpers.mail import mail
from .helpers.helpers_functions import merge_dicts, inject_user


def init_extensions(app):
    """
    Initialize Flask extensions.

    Args:
        app (Flask): The Flask application instance.
    """
    mail.init_app(app)
    jwt.init_app(app)
    db.init_app(app)
    migrate.init_app(app, db)
    cache.init_app(app)


def register_blueprints(app):
    """
    Register Flask Blueprints from the configuration.

    Args:
        app (Flask): The Flask application instance.
    """
    if Config.CORE == True:
        try:
            from app.core import core, core_api
            app.register_blueprint(core)
            app.register_blueprint(core_api)
        except ImportError as e:
            logging.error(f"Failed to import core module: {e}")

    for module in Config.MODULES:
        module_name = f"app.modules.{module}"
        try:
            module_obj = import_module(module_name)
            blueprint_web = getattr(module_obj, module)
            app.register_blueprint(blueprint_web)

            # Verificar si existe el blueprint MODULE_api
            if hasattr(module_obj, f"{module}_api"):
                blueprint_api = getattr(module_obj, f"{module}_api")
                app.register_blueprint(blueprint_api)
        except ImportError as e:
            logging.error(f"Failed to import module {module_name}: {e}")
        except AttributeError as e:
            logging.error(f"Blueprint {module} not found in module {module_name}: {e}")



def configure_logging():
    """✍🏼 Configure application logging.

    Returns:
        logging.Logger: The configured logger instance.
    """
    logging.getLogger("mail").setLevel(logging.DEBUG)
    return setup_logging()


def create_app():
    """🌟 Factory function to create and configure the Flask application.

    Returns:
        Flask: The configured Flask application instance.
    """
    app = Flask(__name__, static_folder=None)
    app.config.from_object(Config)

    # Set template folder based on config theme
    theme = Config.THEME
    template_folder = os.path.join(app.root_path, "templates", theme)
    app.template_folder = template_folder

    # Initialize extensions and blueprints
    init_extensions(app)
    register_blueprints(app)

    # Configure logging and error handling
    logger = configure_logging()
    error_handler(app, logger)

    # flask url for user refresh token, is very important, the route most be exist
    app.config["JWT_REFRESH_COOKIE_PATH"] = "/api/core/refresh"

    # from app.core.controller import initialize_system

    # @app.before_request
    # def before_request():
    #     db.create_all()
    #     initialize_system()

    @app.context_processor
    def inject_debug():
        return dict(DEBUG=app.config["DEBUG"])

    app.jinja_env.filters["merge"] = merge_dicts
    app.jinja_env.filters["merge_dicts"] = merge_dicts

    @app.context_processor
    def inject_context():
        """Agrega múltiples funciones al contexto de Jinja2."""
        context = {}
        context.update(inject_user())
        return context

    ###############################################################
    """
    List all the routes in the application for debugging and api documentation purposes
    """
    from .helpers.route_lister import RouteLister
    from flask import render_template

    view = RouteLister.as_view("list_routes")
    app.add_url_rule("/list_endpoints", view_func=view)

    @app.route("/about")
    def about():
        """Página: Información general del proyecto
        :param None: No requiere parámetros
        :status 200: Retorna el contenido
        """
        context = {
            "title": "About Us",
            "description": "Descripción general del proyecto.",
            "author": "Johnny De Castro",
            "site_title": "Descripción",
        }

        return render_template("router_lister.j2", **context)

    ###############################################################

    return app

```

=== File: ./extensions.py ===
```python
__doc__ = """El objetivo de este archivo  es la carga de los módulos en un archivo independiente para evitar la carga circular de los mismos.
"""
# Third party imports
from flask_jwt_extended import JWTManager
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_caching import Cache

# Local application imports
jwt = JWTManager()
db = SQLAlchemy()
migrate = Migrate()
cache = Cache()

```

=== File: ./modules/foliage/models.py ===
```python
from app.extensions import db, cache
from app.core.models import User
from datetime import datetime
from marshmallow import Schema, fields, validates, ValidationError
from enum import Enum

leaf_analysis_nutrients = db.Table(
    "leaf_analysis_nutrients",
    db.Column(
        "leaf_analysis_id",
        db.Integer,
        db.ForeignKey("leaf_analyses.id"),
        primary_key=True,
    ),
    db.Column(
        "nutrient_id", db.Integer, db.ForeignKey("nutrients.id"), primary_key=True
    ),
    db.Column("value", db.Float, nullable=False),
    db.Column("created_at", db.DateTime, default=datetime.utcnow),
)

nutrient_application_nutrients = db.Table(
    "nutrient_application_nutrients",
    db.Column(
        "nutrient_application_id",
        db.Integer,
        db.ForeignKey("nutrient_applications.id"),
        primary_key=True,
    ),
    db.Column(
        "nutrient_id", db.Integer, db.ForeignKey("nutrients.id"), primary_key=True
    ),
    db.Column("quantity", db.Float, nullable=True),
    db.Column("created_at", db.DateTime, default=datetime.utcnow),
)

objective_nutrients = db.Table(
    "objective_nutrients",
    db.Column(
        "objective_id", db.Integer, db.ForeignKey("objectives.id"), primary_key=True
    ),
    db.Column(
        "nutrient_id", db.Integer, db.ForeignKey("nutrients.id"), primary_key=True
    ),
    db.Column("target_value", db.Float, nullable=True),
    db.Column("created_at", db.DateTime, default=datetime.utcnow),
)

product_contribution_nutrients = db.Table(
    "product_contribution_nutrients",
    db.Column(
        "product_contribution_id",
        db.Integer,
        db.ForeignKey("product_contributions.id"),
        primary_key=True,
    ),
    db.Column(
        "nutrient_id", db.Integer, db.ForeignKey("nutrients.id"), primary_key=True
    ),
    db.Column("contribution", db.Float, nullable=True),
    db.Column("created_at", db.DateTime, default=datetime.utcnow),
)


class NutrientCategory(Enum):
    MACRONUTRIENT = "Macronutrient"
    MICRONUTRIENT = "Micronutrient"


class Farm(db.Model):
    """Modelo que representa una granja"""

    __tablename__ = "farms"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    org_id = db.Column(db.Integer, db.ForeignKey("organizations.id"), nullable=False)
    organization = db.relationship("Organization", backref="farms")
    lots = db.relationship("Lot", back_populates="farm", lazy="dynamic")
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    __table_args__ = (
        db.Index("ix_farms_org_id", "org_id"),
        db.Index("ix_farms_org_id_name", "org_id", "name"),
    )

    def __repr__(self):
        return f"<Farm {self.name}>"


class Lot(db.Model):
    """Model representing a lot in a farm"""

    __tablename__ = "lots"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    area = db.Column(db.Float, nullable=False)
    farm_id = db.Column(db.Integer, db.ForeignKey("farms.id"), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    farm = db.relationship("Farm", back_populates="lots")
    lot_crops = db.relationship("LotCrop", back_populates="lot", lazy="dynamic")
    common_analyses = db.relationship(
        "CommonAnalysis", back_populates="lot", lazy="dynamic"
    )
    nutrient_applications = db.relationship(
        "NutrientApplication", back_populates="lot", lazy="dynamic"
    )
    productions = db.relationship("Production", back_populates="lot", lazy="dynamic")
    recommendations = db.relationship(
        "Recommendation", back_populates="lot", lazy="dynamic"
    )
    __table_args__ = (
        db.Index("ix_lots_farm_id", "farm_id"),
        db.Index("ix_lots_area", "area"),
    )

    def __repr__(self):
        return f"<Lot {self.name}>"
    
    @property
    def organization(self):
        return self.farm.organization if self.farm else None
      

class Crop(db.Model):
    """Model representing a crop"""

    # cultivos
    __tablename__ = "crops"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    lot_crops = db.relationship("LotCrop", back_populates="crop", lazy="dynamic")
    objectives = db.relationship("Objective", back_populates="crop", lazy="dynamic")

    def __repr__(self):
        return f"<Crop {self.name}>"


class LotCrop(db.Model):
    """Model representing the relationship between a lot and a crop"""

    __tablename__ = "lot_crops"
    id = db.Column(db.Integer, primary_key=True)
    lot_id = db.Column(db.Integer, db.ForeignKey("lots.id"), nullable=False)
    crop_id = db.Column(db.Integer, db.ForeignKey("crops.id"), nullable=False)
    start_date = db.Column(db.Date, nullable=False)
    end_date = db.Column(db.Date)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    lot = db.relationship("Lot", back_populates="lot_crops")
    crop = db.relationship("Crop", back_populates="lot_crops")
    __table_args__ = (
        db.Index("ix_lot_crops_lot_id", "lot_id"),
        db.Index("ix_lot_crops_start_date", "start_date"),
    )

    def __repr__(self):
        return f"<LotCrop {self.id}>"
    
    @property
    def organization(self):
        return self.lot.organization if self.lot else None

class CommonAnalysis(db.Model):
    """Model representing a common analysis"""

    __tablename__ = "common_analyses"
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)
    lot_id = db.Column(db.Integer, db.ForeignKey("lots.id"), nullable=False)
    protein = db.Column(db.Float)
    rest = db.Column(db.Float)
    rest_days = db.Column(db.Integer)
    energy = db.Column(db.Float)
    yield_estimate = db.Column(db.Float)  # for aforo
    month = db.Column(db.Integer)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    lot = db.relationship("Lot", back_populates="common_analyses")
    soil_analysis = db.relationship(
        "SoilAnalysis", uselist=False, back_populates="common_analysis"
    )
    leaf_analysis = db.relationship(
        "LeafAnalysis", uselist=False, back_populates="common_analysis"
    )
    __table_args__ = (
        db.Index("ix_common_analyses_lot_id", "lot_id"),
        db.Index("ix_common_analyses_date", "date"),
    )

    def __repr__(self):
        return f"<CommonAnalysis {self.id}>"
    
    @property
    def organization(self):
        return self.lot.farm.organization if self.lot and self.lot.farm else None

    @property
    def farm_name(self):
        return self.lot.farm.name
    
    @property
    def lot_name(self):
        return self.lot.name
    


class SoilAnalysis(db.Model):
    """Model representing a soil analysis"""

    __tablename__ = "soil_analyses"
    id = db.Column(db.Integer, primary_key=True)
    common_analysis_id = db.Column(
        db.Integer, db.ForeignKey("common_analyses.id"), nullable=False
    )
    energy = db.Column(db.Float)
    grazing = db.Column(db.Integer)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    common_analysis = db.relationship("CommonAnalysis", back_populates="soil_analysis")

    def __repr__(self):
        return f"<SoilAnalysis {self.id}>"
   
    
class Nutrient(db.Model):
    """Model representing a nutrient"""

    __tablename__ = "nutrients"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False, unique=True)
    symbol = db.Column(db.String(10), nullable=False, unique=True)
    unit = db.Column(db.String(20), nullable=False)
    description = db.Column(db.Text)
    category = db.Column(db.Enum(NutrientCategory))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    leaf_analyses = db.relationship(
        "LeafAnalysis", secondary=leaf_analysis_nutrients, back_populates="nutrients"
    )

    applications = db.relationship(
        "NutrientApplication",
        secondary=nutrient_application_nutrients,
        back_populates="nutrients",
    )

    objectives = db.relationship(
        "Objective", secondary=objective_nutrients, back_populates="nutrients"
    )

    product_contributions = db.relationship(
        "ProductContribution",
        secondary=product_contribution_nutrients,
        back_populates="nutrients",
    )

    def __repr__(self):
        return f"<Nutrient {self.name} ({self.symbol})>"


class LeafAnalysis(db.Model):
    """Model representing a leaf analysis"""

    __tablename__ = "leaf_analyses"
    id = db.Column(db.Integer, primary_key=True)
    common_analysis_id = db.Column(
        db.Integer, db.ForeignKey("common_analyses.id"), nullable=False
    )
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    common_analysis = db.relationship("CommonAnalysis", back_populates="leaf_analysis")
    nutrients = db.relationship(
        "Nutrient", secondary=leaf_analysis_nutrients, back_populates="leaf_analyses"
    )

    def __repr__(self):
        return f"<LeafAnalysis {self.id}>"
    
    @property
    def organization(self):
        return self.common_analysis.organization if self.common_analysis else None

    @property
    def farm_name(self):
        return self.common_analysis.lot.farm.name if self.common_analysis else None

    @property
    def lot_name(self):
        return self.common_analysis.lot.name if self.common_analysis else None

    
class Recommendation(db.Model):
    """Model representing a recommendation for a lot"""

    __tablename__ = "recommendations"
    id = db.Column(db.Integer, primary_key=True)
    lot_id = db.Column(db.Integer, db.ForeignKey("lots.id"), nullable=False)
    crop_id = db.Column(db.Integer, db.ForeignKey("crops.id"), nullable=False)
    date = db.Column(db.Date, nullable=False)
    author = db.Column(db.String(100))
    title = db.Column(db.String(255), nullable=False)
    limiting_nutrient_id = db.Column(db.String(255), nullable=False)
    automatic_recommendations = db.Column(db.Text)  # Recomendaciones automáticas (puede ser JSON)
    text_recommendations = db.Column(db.Text)      # Recomendaciones en texto libre
    optimal_comparison = db.Column(db.Text)        # Comparación con niveles óptimos (puede ser JSON)
    minimum_law_analyses = db.Column(db.Text)      # Análisis legal mínimo (puede ser JSON)
    soil_analysis_details = db.Column(db.Text)     # Detalles del análisis de suelo (puede ser JSON)
    foliar_analysis_details = db.Column(db.Text)   # Detalles del análisis foliar (puede ser JSON)
    applied = db.Column(db.Boolean, default=False)
    active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # Relaciones
    lot = db.relationship("Lot", back_populates="recommendations")
    crop = db.relationship("Crop")

    __table_args__ = (
        db.Index("ix_recommendations_lot_id", "lot_id"),
        db.Index("ix_recommendations_date", "date"),
    )

    def __repr__(self):
        return f"<Recommendation {self.id}>"
    
    @property
    def organization(self):
        return self.lot.farm.organization if self.lot and self.lot.farm else None


class NutrientApplication(db.Model):
    """Model representing a nutrient application"""

    __tablename__ = "nutrient_applications"
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)
    lot_id = db.Column(db.Integer, db.ForeignKey("lots.id"), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    lot = db.relationship("Lot", back_populates="nutrient_applications")
    nutrients = db.relationship(
        "Nutrient",
        secondary=nutrient_application_nutrients,
        back_populates="applications",
    )

    def __repr__(self):
        return f"<NutrientApplication {self.id}>"
    
    @property
    def organization(self):
        return self.lot.farm.organization if self.lot and self.lot.farm else None


class Objective(db.Model):
    """Model representing nutrient objectives for a crop"""

    __tablename__ = "objectives"
    id = db.Column(db.Integer, primary_key=True)
    crop_id = db.Column(db.Integer, db.ForeignKey("crops.id"), nullable=False)
    target_value = db.Column(db.Float, nullable=False)
    protein = db.Column(db.Float)
    rest = db.Column(db.Float)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    crop = db.relationship("Crop", back_populates="objectives")
    nutrients = db.relationship(
        "Nutrient", secondary=objective_nutrients, back_populates="objectives"
    )

    def __repr__(self):
        return f"<Objective {self.id}>"


class Production(db.Model):
    """Model representing production from a lot"""

    __tablename__ = "productions"
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)
    lot_id = db.Column(db.Integer, db.ForeignKey("lots.id"), nullable=False)
    area = db.Column(db.Float)
    production_kg = db.Column(db.Float)
    bags = db.Column(db.Integer)
    harvest = db.Column(db.String(100))
    month = db.Column(db.Integer)
    variety = db.Column(db.String(100))
    price_per_kg = db.Column(db.Float)
    protein_65dde = db.Column(db.Float)
    discount = db.Column(db.Float)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    lot = db.relationship("Lot", back_populates="productions")
    __table_args__ = (
        db.Index("ix_productions_lot_id", "lot_id"),
        db.Index("ix_productions_date", "date"),
    )

    def __repr__(self):
        return f"<Production {self.id}>"
    
    @property
    def organization(self):
        return self.lot.farm.organization if self.lot and self.lot.farm else None


class Product(db.Model):
    """Model representing a product"""

    __tablename__ = "products"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    product_contributions = db.relationship(
        "ProductContribution", back_populates="product", lazy="dynamic"
    )
    product_prices = db.relationship(
        "ProductPrice", back_populates="product", lazy="dynamic"
    )

    def __repr__(self):
        return f"<Product {self.name}>"


class ProductContribution(db.Model):
    """Model representing nutrient contributions of a product"""

    __tablename__ = "product_contributions"
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey("products.id"), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    product = db.relationship("Product", back_populates="product_contributions")
    nutrients = db.relationship(
        "Nutrient",
        secondary=product_contribution_nutrients,
        back_populates="product_contributions",
    )

    def __repr__(self):
        return f"<ProductContribution {self.id}>"


class ProductPrice(db.Model):
    """Model representing prices of a product"""

    __tablename__ = "product_prices"
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey("products.id"), nullable=False)
    price = db.Column(db.Float, nullable=False)
    supplier = db.Column(db.String(100))
    start_date = db.Column(db.Date, nullable=False)
    end_date = db.Column(db.Date)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(
        db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    product = db.relationship("Product", back_populates="product_prices")
    __table_args__ = (
        db.Index("ix_product_prices_product_id", "product_id"),
        db.Index("ix_product_prices_start_date", "start_date"),
    )

    def __repr__(self):
        return f"<ProductPrice {self.id}>"


# Validación de nutrientes
class NutrientValueSchema(Schema):
    value = fields.Float(required=True)

    @validates("value")
    def validate_value(self, value):
        if value < 0:
            raise ValidationError("El valor del nutriente no puede ser negativo.")


# Ejemplo de uso de validación
def validate_nutrient_value(value):
    schema = NutrientValueSchema()
    try:
        schema.load({"value": value})
    except ValidationError as err:
        raise ValueError(f"Valor del nutriente inválido: {err}")


# Ejemplo de uso con caching
@cache.cached(timeout=3600, key_prefix="view_%s" % __name__)
def get_all_users():
    return User.query.options(db.joinedload(User.farms)).all()



# Example query optimization using joinedload
# def get_lot_details(lot_id):
#     return Lot.query.options(
#         db.joinedload(Lot.farm),
#         db.joinedload(Lot.lot_crops),
#         db.joinedload(Lot.common_analyses),
#         db.joinedload(Lot.nutrient_applications),
#         db.joinedload(Lot.productions),
#         db.joinedload(Lot.recommendations),
#     ).get(lot_id)


# Example of using subqueryload for more complex relationships
def get_lot_with_crops(lot_id):
    return Lot.query.options(
        db.joinedload(Lot.farm), db.subqueryload(Lot.lot_crops).joinedload(LotCrop.crop)
    ).get(lot_id)
```

=== File: ./modules/foliage/__init__.py ===
```python
from flask import Blueprint

foliage = Blueprint(
    "foliage", __name__, url_prefix="/dashboard/foliage", template_folder="templates"
)
foliage_api = Blueprint("foliage_api", __name__, url_prefix="/api/foliage")

from . import web_routes, api_routes

```

=== File: ./modules/foliage/web_routes.py ===
```python
# Third party imports
from flask_jwt_extended import get_jwt_identity, jwt_required
from flask import render_template, url_for, request, jsonify

# Local application imports
from . import foliage as web
from .controller import (
    NutrientView,
    FarmView,
    LotView,
    CropView,
    ObjectiveView,
    ProductView,
    ProductContributionView,
    ProductPriceView,
    CommonAnalysisView, 
    LotCropView,
    LeafAnalysisView, 
    SoilAnalysisView,
    NutrientApplicationView, 
    ProductionView
)
from .models import Farm, Crop, Nutrient, Product, Lot, LotCrop, CommonAnalysis
from app.core.models import get_clients_for_user
from app.core.controller import login_required

def get_dashboard_menu():
    """Define el menu superior en los templates"""
    return {
        "menu": [
            {"name": "Home", "url": url_for("core.index")},
            {"name": "Logout", "url": url_for("core.logout")},
            {"name": "Profile", "url": url_for("core.profile")},
        ]
    }

# 👌
@web.route("/nutrientes")
@login_required
def nutrientes():
    """
    Página: Renderiza la vista de nutrientes
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de nutrientes",
        "description": "Administración de nutrientes.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    nutrient_view = NutrientView()
    response = nutrient_view._get_nutrient_list()
    items = response.get_json()
    status_code = response.status_code
    assigned_org = get_clients_for_user(user_id)
    org_dict = {org.name: org.id for org in assigned_org}
    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "nutrients.j2",
            items=items,
            org_dict=org_dict,
            **context,
            request=request,
        ),
        200,
    )

# 👌
@web.route("/farms")
@login_required
def amd_farms():
    """
    Página: Renderiza la vista de Fincas
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de Fincas",
        "description": "Administración de Fincas.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    farm_view = FarmView()
    response = farm_view._get_farm_list()
    items = response.get_json()
    status_code = response.status_code
    assigned_org = get_clients_for_user(user_id)
    org_dict = {org.name: org.id for org in assigned_org}
    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "farms.j2",
            items=items,
            org_dict=org_dict,
            **context,
            request=request,
        ),
        200,
    )

# 👌
@web.route("/lots")
@login_required
def amd_lots(filter_value=None):
    """
    Página: Renderiza la vista de lotes
    """
    context = {
        "dashboard": True,
        "title": "Gestión de lotes",
        "description": "Administración de lotes.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    lot_view = LotView()
    filter_value = request.args.get("filter_value")
    if filter_value:
        filter_value = int(filter_value)
        response = lot_view._get_lot_list(filter_by=filter_value)
    else:
        response = lot_view._get_lot_list()

    items = response.get_json()
    status_code = response.status_code
    filter_field = "farm_id"
    farms = Farm.query.all()
    filter_options = farms
    select_url = url_for("foliage.amd_lots")
    if filter_value:
        filter_value = int(filter_value)
        farms = Farm.query.filter_by(id=filter_value).all()
    farms_dic = {farm.name: farm.id for farm in farms}
    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "lots.j2",
            items=items,
            farms_dic=farms_dic,
            **context,
            request=request,
            filter_field=filter_field,
            filter_options=filter_options,
            filter_value=filter_value,
            select_url=select_url,
        ),
        200,
    )

# 👌
@web.route("/crops")
@login_required
def amd_crops():
    """
    Página: Renderiza la vista de cultivos
    """
    context = {
        "dashboard": True,
        "title": "Gestión de cultivos",
        "description": "Administración de cultivos.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    crop_view = CropView()
    response = crop_view._get_crop_list()
    items = response.get_json()
    status_code = response.status_code

    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "crops.j2",
            items=items,
            **context,
            request=request,
        ),
        200,
    )

# 👌
@web.route("/lot_crops")
@login_required
def amd_lot_crops():
    """
    Página: Renderiza la vista de lotes de cultivos
    """
    context = {
        "dashboard": True,
        "title": "Gestión de lotes de cultivos",
        "description": "Administración de lotes de cultivos.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }

    # Instanciar la vista de LotCrop
    lot_crop_view = LotCropView()
    
    # Obtener el valor del filtro desde los argumentos de la solicitud
    filter_value = request.args.get("filter_value")
    filter_field = "farm_id"
    farms = Farm.query.all()
    filter_options = farms

    # Obtener las relaciones LotCrop con filtro opcional por farm_id
    if filter_value:
        filter_value = int(filter_value)
        # Modificar LotCropView para aceptar un filtro por farm_id si es necesario
        # Por ahora, filtramos manualmente después de obtener la lista
        response = lot_crop_view._get_lot_crop_list()
        items = response.get_json()
        # Filtrar los items por farm_id
        items = [item for item in items if item["organization_id"] == filter_value]
        status_code = 200  # Simulamos que el filtro manual es exitoso
    else:
        response = lot_crop_view._get_lot_crop_list()
        items = response.get_json()
        status_code = response.status_code

    # Obtener lots y crops para el formulario, aplicando el filtro si existe
    if filter_value:
        lots = Lot.query.join(Farm).filter(Farm.id == filter_value).all()
    else:
        lots = Lot.query.all()
    lots_dic = {lot.name: lot.id for lot in lots}

    crops = Crop.query.all()  # Los cultivos no necesitan filtrarse por farm_id
    crop_dic = {crop.name: crop.id for crop in crops}

    if status_code != 200:
        return render_template("error.j2"), status_code

    return (
        render_template(
            "lot_crops.j2",
            items=items,
            filter_value=filter_value,
            filter_field=filter_field,
            filter_options=filter_options,
            lots_dic=lots_dic,
            crop_dic=crop_dic,
            **context,
            request=request,
        ),
        200,
    )

# 👌
@web.route("/objectives")
@login_required
def amd_objectives():
    """
    Página: Renderiza la vista de objetivos
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de objetivos",
        "description": "Administración de objetivos.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }

    # Instantiate the view and get objectives
    objective_view = ObjectiveView()
    response = objective_view._get_objective_list()
    items = response.get_json()
    status_code = response.status_code

    # Get organizations and crops for the dropdown
    assigned_org = get_clients_for_user(user_id)
    org_dict = {org.name: org.id for org in assigned_org}
    crops = Crop.query.all()
    crop_options = {crop.name: crop.id for crop in crops}

    # Define form fields
    nutrient_ids = Nutrient.query.all()
    form_fields = {
        "crop_id": {
            "type": "select",
            "label": "Cultivo",
            "options": crop_options,
            "required": True,
        },
        "target_value": {
            "type": "number",
            "label": "Valor objetivo general",
            "required": True,
            "placeholder": "Ej: 100.0",
        },
        "protein": {
            "type": "number",
            "label": "Proteína",
            "required": False,
            "placeholder": "Ej: 20.5",
        },
        "rest": {
            "type": "number",
            "label": "Descanso",
            "required": False,
            "placeholder": "Ej: 15.0",
        },
    }

    # Add nutrient fields dynamically
    for nutrient in nutrient_ids:
        form_fields[f"nutrient_{nutrient.id}"] = {
            "type": "number",
            "label": f"Valor objetivo de {nutrient.name} ({nutrient.symbol})",
            "required": False,  # Optional, as not all nutrients may be set
            "placeholder": f"Ej: 10.5 ({nutrient.unit})",
        }

    # base_headers = ["ID", "Cultivo", "Valor Objetivo", "Proteína", "Descanso", "Fecha de Creación", "Fecha de Actualización"]
    # nutrient_headers = [f"{nutrient.name} ({nutrient.symbol})" for nutrient in nutrient_ids]
    # table_headers = base_headers + nutrient_headers
    # base_fields = ["id", "crop_name", "target_value", "protein", "rest", "created_at", "updated_at"]
    # nutrient_fields = [f"nutrient_{nutrient.id}" for nutrient in nutrient_ids]
    # item_fields = base_fields + nutrient_fields

    if status_code != 200:
        return render_template("error.j2"), status_code

    return (
        render_template(
            "objectives.j2",
            items=items,
            org_dict=org_dict,
            crops=crops,  # Pass crops for reference if needed
            nutrient_ids=nutrient_ids,  # Pass nutrients for reference
            form_fields=form_fields,
            request=request,
            **context,
        ),
        200,
    )

# 👌
@web.route("/products")
@login_required
def amd_products():
    """
    Página: Renderiza la vista de productos
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de productos",
        "description": "Administración de productos.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    product_view = ProductView()
    response = product_view._get_product_list()
    items = response.get_json()
    status_code = response.status_code
    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "products.j2",
            items=items,
            **context,
            request=request,
        ),
        200,
    )

# 👌
@web.route("/product_contributions")
@login_required
def amd_product_contributions():
    """
    Página: Renderiza la vista de contribuciones de productos
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de contribuciones de productos",
        "description": "Administración de contribuciones de productos.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    # Instantiate the view and get product contributions
    product_contribution_view = ProductContributionView()
    response = product_contribution_view._get_product_contribution_list()
    items = response.get_json()
    status_code = response.status_code
    # Get products for the dropdown
    products = Product.query.all()
    product_options = {product.name: product.id for product in products}
    # Define form fields
    nutrient_ids = Nutrient.query.all()
    form_fields = {
        "product_id": {
            "type": "select",
            "label": "Producto",
            "options": product_options,
            "required": True,
        },
    }
    # Add nutrient fields dynamically
    for nutrient in nutrient_ids:
        form_fields[f"nutrient_{nutrient.id}"] = {
            "type": "number",
            "label": f"Contribución de {nutrient.name} ({nutrient.symbol})",
            "required": False,  # Optional, as not all nutrients may be set
            "placeholder": f"Ej: 10.5 ({nutrient.unit})",
        }
    # base_headers = ["ID", "Producto", "Fecha de Creación", "Fecha de Actualización"]
    # nutrient_headers = [f"{nutrient.name} ({nutrient.symbol})" for nutrient in nutrient_ids]
    # table_headers = base_headers + nutrient_headers
    # base_fields = ["id", "product_name", "created_at", "updated_at"]
    # nutrient_fields = [f"nutrient_{nutrient.id}" for nutrient in nutrient_ids]
    # item_fields = base_fields + nutrient_fields
    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "product_contributions.j2",
            items=items,
            products=products,  # Pass products for reference if needed
            nutrient_ids=nutrient_ids,  # Pass nutrients for reference
            form_fields=form_fields,
            request=request,
            **context,
        ),
        200,
    )

# 👌
@web.route("/product_prices")
@login_required
def amd_product_prices():
    """
    Página: Renderiza la vista de precios de productos
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de precios de productos",
        "description": "Administración de precios de productos.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    product_price_view = ProductPriceView()
    response = product_price_view._get_product_price_list()
    items = response.get_json()
    status_code = response.status_code
    products = Product.query.all()
    product_options = {product.name: product.id for product in products}
    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "product_prices.j2",
            items=items,
            product_options=product_options,
            **context,
            request=request,
        ),
        200,
    )

# 👌
@web.route("/common_analyses")
@login_required
def amd_common_analyses():
    """
    Página: Renderiza la vista de análisis comunes
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de análisis comunes",
        "description": "Administración de análisis comunes.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    common_analysis_view = CommonAnalysisView()
    filter_value = request.args.get("filter_value")
    if filter_value:
        filter_value = int(filter_value)
        response = common_analysis_view._get_common_analysis_list(filter_by=filter_value)
    else:
        response = common_analysis_view._get_common_analysis_list()
        
    items = response.get_json()
    status_code = response.status_code
    # if filter_value:
    #     lots = LotCrop.query.join(Lot).join(Farm).filter(Farm.id == filter_value).all()
    # else:
    #     lots = LotCrop.query.all()
    # lots_dic = {f"{lot.lot.name} - {lot.crop.name}": lot.id for lot in lots}
    
    if filter_value:
        lots = Lot.query.join(Farm).filter(Farm.id == filter_value).all()
    else:
        lots = Lot.query.all()
    lots_dic = {lot.name: lot.id for lot in lots}
    
    filter_field = "farm_id"
    farms = Farm.query.all()
    filter_options = farms
    
    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "common_analyses.j2", 
            items=items, 
            lots_dic=lots_dic, 
            filter_field=filter_field,
            filter_options=filter_options,
            filter_value=filter_value,
            **context, 
            request=request,
        ),
        200,
    )
    


# 👌✍🏼
@web.route("/leaf_analyses")
@jwt_required()
def amd_leaf_analyses():
    """
    Página: Renderiza la vista de análisis de hojas
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de análisis foliares",
        "description": "Administración de análisis foliares.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    
    # Get data
    leaf_analysis_view = LeafAnalysisView()
    filter_value = request.args.get("filter_value")
    if filter_value:
        filter_value = int(filter_value)
        response = leaf_analysis_view._get_leaf_analysis_list(filter_by=filter_value)
    else:
        response = leaf_analysis_view._get_leaf_analysis_list()
    filter_field = "farm_id"
    farms = Farm.query.all()
    filter_options = farms
    items = response.get_json()
    status_code = response.status_code
    
    # Get CommonAnalysisView
    analisis_comun_id = request.args.get("analisis_comun_id")
    if filter_value:
        common_analyses = CommonAnalysis.query.join(Lot, CommonAnalysis.lot_id == Lot.id).filter(Lot.farm_id == filter_value).all()
    else:
        common_analyses = CommonAnalysis.query.all()

    # Actualizar el diccionario common_analysis_options
    if analisis_comun_id:
        common_analysis_options = {int(analisis_comun_id): int(analisis_comun_id)}
    else:
        common_analysis_options = {common_analysis.id: common_analysis.id for common_analysis in common_analyses}
    
    
    # Define form fields
    nutrient_ids = Nutrient.query.all()
    form_fields = {
        "common_analysis_id": {
            "type": "select",
            "label": "Análisis común",
            "options": common_analysis_options,
            "required": True,
        },
    }
    
    # Add nutrient fields dynamically
    for nutrient in nutrient_ids:
        form_fields[f"nutrient_{nutrient.id}"] = {
            "type": "number",
            "label": f"Valor de {nutrient.name} ({nutrient.symbol})",
            "required": False,
            "placeholder": f"Ej: 10.5 ({nutrient.unit})",
        }
    if status_code != 200:
        return render_template("error.j2"), status_code
        
    return render_template(
        "leaf_analyses.j2",
        items=items,
        nutrient_ids=nutrient_ids,
        form_fields=form_fields,
        filter_field=filter_field,
        filter_options=filter_options,
        filter_value=filter_value,
        **context,
        request=request,
    ), 200
    
# 👌
@web.route("/soil_analyses")
@jwt_required()
def amd_soil_analyses():
    """
    Página: Renderiza la vista de análisis de suelos
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de análisis de suelos",
        "description": "Administración de análisis de suelos.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    soil_analysis_view = SoilAnalysisView()
    filter_value = request.args.get("filter_value")
    if filter_value:
        filter_value = int(filter_value)
        response = soil_analysis_view._get_soil_analysis_list(filter_by=filter_value)
    else:
        response = soil_analysis_view._get_soil_analysis_list()

    items = response.get_json()
    status_code = response.status_code
    
    filter_field = "farm_id"
    farms = Farm.query.all()
    filter_options = farms
    
    # Get CommonAnalysisView
    analisis_comun_id = request.args.get("analisis_comun_id")
    if filter_value:
        common_analyses = CommonAnalysis.query.join(Lot, CommonAnalysis.lot_id == Lot.id).filter(Lot.farm_id == filter_value).all()
    else:
        common_analyses = CommonAnalysis.query.all()

    # Actualizar el diccionario common_analysis_options
    if analisis_comun_id:
        common_analysis_options = {int(analisis_comun_id): int(analisis_comun_id)}
    else:
        common_analysis_options = {common_analysis.id: common_analysis.id for common_analysis in common_analyses}

    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "soil_analyses.j2", 
            items=items, 
            filter_field=filter_field,
            filter_options=filter_options,
            filter_value=filter_value,
            common_analysis_options=common_analysis_options,
            **context, 
            request=request,
        ),
        200,
    )

# 👌
@web.route("/nutrient_applications")
@jwt_required()
def amd_nutrient_applications():
    """
    Página: Renderiza la vista de aplicaciones de nutrientes
    """
    filter_value = request.args.get("filter_value")
    context = {
        "dashboard": True,
        "title": "Gestión de aplicaciones de nutrientes",
        "description": "Administración de aplicaciones de nutrientes.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }

    nutrient_application_view = NutrientApplicationView()
    if filter_value:
        filter_value = int(filter_value)
        response = nutrient_application_view._get_nutrient_application_list(filter_by=filter_value)
    else:
        response = nutrient_application_view._get_nutrient_application_list()

    status_code = response.status_code
    items = response.get_json()

    if status_code != 200:
        return render_template("error.j2"), status_code

    lots = Lot.query.join(Farm).filter(Farm.org_id == filter_value).all() if filter_value else Lot.query.all()
    lots_dic = {lot.name: lot.id for lot in lots}

    filter_field = "farm_id"
    farms = Farm.query.all()
    filter_options = farms

    # Define form fields
    nutrient_ids = Nutrient.query.all()
    form_fields = {
        'date': {
            'type': 'date', 
            'label': 'Fecha de aplicación', 
            'required': True
        },
        'lot_id': {
            'type': 'select', 
            'label': 'Lote', 
            'options': lots_dic, 
            'required': True, 
            'new_value': False
        },
    }

    # Add nutrient fields dynamically
    for nutrient in nutrient_ids:
        form_fields[f"nutrient_{nutrient.id}"] = {
            "type": "number",
            "label": f"Valor de {nutrient.name} ({nutrient.symbol})",
            "required": False,
            "placeholder": f"Ej: 10.5 ({nutrient.unit})",
        }

    return (
        render_template(
            "nutrient_applications.j2", 
            items=items, 
            lots_dic=lots_dic,
            filter_field=filter_field,
            filter_options=filter_options,
            filter_value=filter_value,
            form_fields=form_fields,
            **context, 
            request=request,
        ),
        status_code,
    )
    
@web.route("/productions")
@jwt_required()
def amd_productions():
    """
    Página: Renderiza la vista de producciones
    """
    user_id = get_jwt_identity()
    context = {
        "dashboard": True,
        "title": "Gestión de producciones",
        "description": "Administración de producciones.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "data_menu": get_dashboard_menu(),
    }
    production_view = ProductionView()
    response = production_view._get_production_list()
    items = response.get_json()
    status_code = response.status_code

    if status_code != 200:
        return render_template("error.j2"), status_code
    return (
        render_template(
            "productions.j2",
            items=items, 
            **context, 
            request=request,
        ),
        200,
    )

```

=== File: ./modules/foliage/schemas.py ===
```python
from marshmallow import Schema, fields, validates, ValidationError
from app.core.schemas import OrganizationSchema

class NutrientSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True)
    symbol = fields.Str(required=True)
    unit = fields.Str(required=True)
    org_id = fields.Int()
    description = fields.Str(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class FarmSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True)
    org_id = fields.Int(required=True)
    org_name = fields.Str(dump_only=True)
    lots = fields.List(fields.Str(), dump_only=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class LotSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True)
    area = fields.Float(required=True)
    farm_id = fields.Int(required=True)
    farm_name = fields.Method("get_farm_name", dump_only=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

    def get_farm_name(self, obj):
        return getattr(obj.farm, 'name', '')

class CropSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class LotCropSchema(Schema):
    id = fields.Int(dump_only=True)
    lot_id = fields.Int(required=True)
    crop_id = fields.Int(required=True)
    start_date = fields.Date(required=True)
    end_date = fields.Date(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class CommonAnalysisSchema(Schema):
    id = fields.Int(dump_only=True)
    date = fields.Date(required=True)
    lot_id = fields.Int(required=True)
    protein = fields.Float(allow_none=True)
    rest = fields.Float(allow_none=True)
    rest_days = fields.Int(allow_none=True)
    month = fields.Int(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class SoilAnalysisSchema(Schema):
    id = fields.Int(dump_only=True)
    common_analysis_id = fields.Int(required=True)
    energy = fields.Float(allow_none=True)
    grazing = fields.Int(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class NutrientSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True)
    symbol = fields.Str(required=True)
    unit = fields.Str(required=True)
    description = fields.Str(allow_none=True)
    category = fields.Str()
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class LeafAnalysisSchema(Schema):
    id = fields.Int(dump_only=True)
    common_analysis_id = fields.Int(required=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class NutrientApplicationSchema(Schema):
    id = fields.Int(dump_only=True)
    date = fields.Date(required=True)
    lot_id = fields.Int(required=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ObjectiveSchema(Schema):
    id = fields.Int(dump_only=True)
    crop_id = fields.Int(required=True)
    target_value = fields.Float(required=True)
    protein = fields.Float(allow_none=True)
    rest = fields.Float(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ProductionSchema(Schema):
    id = fields.Int(dump_only=True)
    date = fields.Date(required=True)
    lot_id = fields.Int(required=True)
    area = fields.Float(allow_none=True)
    production_kg = fields.Float(allow_none=True)
    bags = fields.Int(allow_none=True)
    harvest = fields.Str(allow_none=True)
    month = fields.Int(allow_none=True)
    variety = fields.Str(allow_none=True)
    price_per_kg = fields.Float(allow_none=True)
    protein_65dde = fields.Float(allow_none=True)
    discount = fields.Float(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ProductSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True)
    description = fields.Str(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ProductContributionSchema(Schema):
    id = fields.Int(dump_only=True)
    product_id = fields.Int(required=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ProductPriceSchema(Schema):
    id = fields.Int(dump_only=True)
    product_id = fields.Int(required=True)
    price = fields.Float(required=True)
    supplier = fields.Str(allow_none=True)
    start_date = fields.Date(required=True)
    end_date = fields.Date(allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class RecommendationSchema(Schema):
    id = fields.Int(dump_only=True)
    lot_id = fields.Int(required=True)
    date = fields.Date(required=True)
    recommendation = fields.Str(required=True)
    applied = fields.Bool(missing=False)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)
```

=== File: ./modules/foliage/helpers.py ===
```python
from .models import Nutrient, NutrientCategory
from app.extensions import db

# Macronutrientes
macronutrients = [
    {
        "name": "Nitrógeno",
        "symbol": "N",
        "unit": "kg/ha",
        "description": "Esencial para el crecimiento vegetativo y el desarrollo de hojas",
        "category": NutrientCategory.MACRONUTRIENT,
    },
    {
        "name": "Fósforo",
        "symbol": "P",
        "unit": "kg/ha",
        "description": "Importante para el desarrollo de raíces y flores",
        "category": NutrientCategory.MACRONUTRIENT,
    },
    {
        "name": "Potasio",
        "symbol": "K",
        "unit": "kg/ha",
        "description": "Mejora la resistencia a enfermedades y el rendimiento",
        "category": NutrientCategory.MACRONUTRIENT,
    },
    {
        "name": "Calcio",
        "symbol": "Ca",
        "unit": "kg/ha",
        "description": "Fundamental para el desarrollo de células y paredes celulares",
        "category": NutrientCategory.MACRONUTRIENT,
    },
    {
        "name": "Magnesio",
        "symbol": "Mg",
        "unit": "kg/ha",
        "description": "Esencial para la fotosíntesis y el metabolismo energético",
        "category": NutrientCategory.MACRONUTRIENT,
    },
    {
        "name": "Azufre",
        "symbol": "S",
        "unit": "kg/ha",
        "description": "Importante para la formación de aminoácidos y enzimas",
        "category": NutrientCategory.MACRONUTRIENT,
    },
]

# Micronutrientes
micronutrients = [
    {
        "name": "Cobre",
        "symbol": "Cu",
        "unit": "g/ha",
        "description": "Actúa como cofactor en varias enzimas",
        "category": NutrientCategory.MICRONUTRIENT,
    },
    {
        "name": "Zinc",
        "symbol": "Zn",
        "unit": "g/ha",
        "description": "Importante para la regulación génica y el crecimiento",
        "category": NutrientCategory.MICRONUTRIENT,
    },
    {
        "name": "Manganeso",
        "symbol": "Mn",
        "unit": "g/ha",
        "description": "Participa en la fotosíntesis y el metabolismo de carbohidratos",
        "category": NutrientCategory.MICRONUTRIENT,
    },
    {
        "name": "Boro",
        "symbol": "B",
        "unit": "g/ha",
        "description": "Importante para la pared celular y el transporte de azúcares",
        "category": NutrientCategory.MICRONUTRIENT,
    },
    {
        "name": "Molibdeno",
        "symbol": "Mo",
        "unit": "g/ha",
        "description": "Esfuerzo en la fijación de nitrógeno y metabolismo del azufre",
        "category": NutrientCategory.MICRONUTRIENT,
    },
    {
        "name": "Cloro",
        "symbol": "Cl",
        "unit": "g/ha",
        "description": "Importante para la osmoregulación y el rendimiento",
        "category": NutrientCategory.MICRONUTRIENT,
    },
    {
        "name": "Hierro",
        "symbol": "Fe",
        "unit": "g/ha",
        "description": "Componente clave de las enzimas respiratorias",
        "category": NutrientCategory.MICRONUTRIENT,
    },
    {
        "name": "Silicio",
        "symbol": "Si",
        "unit": "kg/ha",
        "description": "Mejora la estructura de las plantas y su resistencia",
        "category": NutrientCategory.MICRONUTRIENT,
    },
]

def initialize_nutrients():
    """Initialize the nutrients table with default values"""
    # Verificar si ya existen nutrientes
    if Nutrient.query.count() == 0:
        
        try:
            # Add macronutrients
            for nutrient_data in macronutrients:
                nutrient = Nutrient(
                    name=nutrient_data["name"],
                    symbol=nutrient_data["symbol"],
                    unit=nutrient_data["unit"],
                    description=nutrient_data["description"],
                    category=nutrient_data["category"],
                )
                db.session.add(nutrient)

            # Add micronutrients
            for nutrient_data in micronutrients:
                nutrient = Nutrient(
                    name=nutrient_data["name"],
                    symbol=nutrient_data["symbol"],
                    unit=nutrient_data["unit"],
                    description=nutrient_data["description"],
                    category=nutrient_data["category"],
                )
                db.session.add(nutrient)

            db.session.commit()
            print("Nutrients initialized successfully")

        except Exception as e:
            db.session.rollback()
            print(f"Error initializing nutrients: {str(e)}")
    else:
        print("Nutrients already initialized")

```

=== File: ./modules/foliage/api_routes.py ===
```python
from . import foliage_api as api
from .controller import (
    FarmView,
    LotView,
    CropView,
    LotCropView,
    CommonAnalysisView,
    NutrientView,
    LeafAnalysisView,
    NutrientApplicationView,
    ObjectiveView,
    ProductView,
    ProductContributionView,
    ProductPriceView,
    SoilAnalysisView, 
    ProductionView
)

# 👌
farm_view = FarmView.as_view("farms_view")
api.add_url_rule("/farms/", view_func=farm_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/farms/<int:id>", view_func=farm_view, methods=["GET", "PUT", "DELETE"])

# 👌
lot_view = LotView.as_view("lots_view")
api.add_url_rule("/lots/", view_func=lot_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/lots/<int:id>", view_func=lot_view, methods=["GET", "PUT", "DELETE"])

# 👌
crop_view = CropView.as_view("crops_view")
api.add_url_rule("/crops/", view_func=crop_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/crops/<int:id>", view_func=crop_view, methods=["GET", "PUT", "DELETE"])


# 👌
nutrient_view = NutrientView.as_view("nutrients")
api.add_url_rule("/nutrients/", view_func=nutrient_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/nutrients/<int:id>", view_func=nutrient_view, methods=["GET", "PUT", "DELETE"])

# 👌
lot_crop_view = LotCropView.as_view("lot_crops")
api.add_url_rule("/lots_crops/", view_func=lot_crop_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/lots_crops/<int:id>", view_func=lot_crop_view, methods=["GET", "PUT", "DELETE"])


# 👌
objective_view = ObjectiveView.as_view("objectives")
api.add_url_rule("/objectives/", view_func=objective_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/objectives/<int:id>", view_func=objective_view, methods=["GET", "PUT", "DELETE"])

# 👌
product_view = ProductView.as_view("products")
api.add_url_rule("/products/", view_func=product_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/products/<int:id>", view_func=product_view, methods=["GET", "PUT", "DELETE"])

# 👌
product_contribution_view = ProductContributionView.as_view("product_contributions")
api.add_url_rule("/products_contributions/", view_func=product_contribution_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/products_contributions/<int:id>", view_func=product_contribution_view, methods=["GET", "PUT", "DELETE"])

# 👌
product_price_view = ProductPriceView.as_view("product_price_view")
api.add_url_rule("/product_prices/", view_func=product_price_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/product_prices/<int:id>", view_func=product_price_view, methods=["GET", "PUT", "DELETE"])

# 👌
common_analysis_view = CommonAnalysisView.as_view("common_analyses")
api.add_url_rule("/common_analyses/", view_func=common_analysis_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/common_analyses/<int:id>", view_func=common_analysis_view, methods=["GET", "PUT", "DELETE"])

# 👌
leaf_analysis_view = LeafAnalysisView.as_view("leaf_analyses")
api.add_url_rule("/leaf_analyses/", view_func=leaf_analysis_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/leaf_analyses/<int:id>", view_func=leaf_analysis_view, methods=["GET", "PUT", "DELETE"])

# 👌
soil_analysis_view = SoilAnalysisView.as_view("soil_analysis")
api.add_url_rule("/soil_analyses/", view_func=soil_analysis_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/soil_analyses/<int:id>", view_func=soil_analysis_view, methods=["GET", "PUT", "DELETE"])

# 👌
nutrient_application_view = NutrientApplicationView.as_view("nutrient_applications")
api.add_url_rule("/nutrient_applications/", view_func=nutrient_application_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/nutrient_applications/<int:id>", view_func=nutrient_application_view, methods=["GET", "PUT", "DELETE"])

# 
production_view = ProductionView.as_view("production_view")
api.add_url_rule("/production/", view_func=production_view, methods=["GET", "POST", "DELETE"])
api.add_url_rule("/production/<int:id>", view_func=nutrient_application_view, methods=["GET", "PUT", "DELETE"])

```

=== File: ./modules/foliage/templates/nutrients.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Nutrientes" %}
{% set entity_name_lower = "nutriente" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Nombre del nutriente", "Símbolo del nutriente", "Unidad del nutriente", "Descripción"] %}
{% set item_fields = ["id", "name", "symbol", "unit", "description"] %}

{# formulario de editar y add #}
{% set form_fields = {
    'name': {'type': 'text', 'label': 'Nombre del nutriente', 'required': True},
    'symbol': {'type': 'text', 'label': 'Símbolo del nutriente', 'required': True},
    'unit': {'type': 'text', 'label': 'Unidad del nutriente', 'required': True},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.nutrients') %}


```

=== File: ./modules/foliage/templates/farms.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Fincas" %}
{% set entity_name_lower = "finca" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Nombre de la finca", "Cliente", "Lotes", "Fecha de creación", "Fecha de actualización"] %}
{% set item_fields = ["id", "name", "org_name", "lots", "created_at", "updated_at"] %}

{# formulario de editar y add #}
{% set form_fields = {
    'name': {'type': 'text', 'label': 'Nombre de la finca', 'required': True},
    'org_id': {'type': 'select', 'label': 'Cliente', 'options': org_dict, 'required': True, 'new_value': False},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.farms_view') %}
```

=== File: ./modules/foliage/templates/lots.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Lotes" %}
{% set entity_name_lower = "lote" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Finca", "Nombre del lote", "Área del lote",  "Fecha de creación", "Fecha de actualización"] %}
{% set item_fields = ["id", "farm_name", "name", "area",  "created_at", "updated_at"] %}

{# formulario de editar y add #}
{% set form_fields = {
    'farm_id': {'type': 'select', 'label': 'Finca', 'options': farms_dic, 'required': True, 'new_value': False},
    'name': {'type': 'text', 'label': 'Nombre del lote', 'required': True},
    'area': {'type': 'number', 'label': 'Área del lote', 'required': True},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.lots_view') %}


```

=== File: ./modules/foliage/templates/crops.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Cultivos" %}
{% set entity_name_lower = "cultivo" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Nombre del cultivo", "Fecha de creación", "Fecha de actualización"] %}
{% set item_fields = ["id", "name", "created_at", "updated_at"] %}

{# formulario de editar y add #}
{% set form_fields = {
    'name': {'type': 'text', 'label': 'Nombre del cultivo', 'required': True},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.crops_view') %}
```

=== File: ./modules/foliage/templates/objectives.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Objetivos" %}
{% set entity_name_lower = "objetivo" %}
{% set show_select_box = False %}

{% set show_view_button = True %}
{# Mostrar la grid de ítems #}

{% set base_headers = ["ID", "Cultivo", "Valor Objetivo", "Proteína", "Descanso", "Fecha de Creación", "Fecha de Actualización"] %}
{% set nutrient_headers = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_headers = nutrient_headers + [nutrient.name] %}
{% endfor %}
{% set table_headers = base_headers + nutrient_headers %}

{% set base_fields = ["id", "crop_name", "target_value", "protein", "rest", "created_at", "updated_at"] %}
{% set nutrient_fields = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_fields = nutrient_fields + ["nutrient_" ~ nutrient.id] %}
{% endfor %}
{% set item_fields = base_fields + nutrient_fields %}


{# formulario de editar y add #}
{% for key, value in form_fields.items() %}
    {% if key != 'crop_id' %}
        {{ render_field(value, form[key]) }}
    {% else %}
        {{ render_field(value, form[key]) }}
    {% endif %}
{% endfor %}


{# api de consumo #}

{% set api_url = url_for('foliage_api.objectives') %}


{% block extra_js %}
{{ super() }} 
<script>
// Rellena el formulario con los datos del elemento seleccionado
function fillFormWithData(id) {
        const item = {{ items | tojson | safe }}.find(f => String(f.id) === String(id));
        if (item) {
            document.getElementById('{{ entity_name_lower }}Id').value = item.id;
            document.getElementById('crop_id').value = item.crop_id || '';
            document.getElementById('target_value').value = item.target_value || '';
            document.getElementById('protein').value = item.protein || '';
            document.getElementById('rest').value = item.rest || '';

            {# Rellenar los valores de nutrient_targets #}
            if (item.nutrient_targets) {
                item.nutrient_targets.forEach(target => {
                    const field = document.getElementById(`nutrient_${target.nutrient_id}`);
                    if (field) {
                        field.value = target.target_value || '';
                    }
                });
            }
        }
    }
</script>
{% endblock %}
```

=== File: ./modules/foliage/templates/products.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Productos" %}
{% set entity_name_lower = "producto" %}
{% set show_select_box = False %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Nombre", "Descripción", "Fecha de creación", "Fecha de actualización"] %}
{% set item_fields = ["id", "name", "description", "created_at", "updated_at"] %}

{# formulario de editar y add #}
{% set form_fields = {
    'name': {'type': 'text', 'label': 'Nombre', 'required': True},
    'description': {'type': 'text', 'label': 'Descripción', 'required': True},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.products') %}
```

=== File: ./modules/foliage/templates/product_contributions.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Contribuciones_productos" %}
{% set entity_name_lower = "contribucion_de_producto" %}
{% set show_select_box = False %}
{% set show_view_button = True %}
{# Mostrar la grid de ítems #}
{% set base_headers = ["ID", "Producto", "Fecha de Creación", "Fecha de Actualización"] %}
{% set nutrient_headers = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_headers = nutrient_headers + [nutrient.name] %}
{% endfor %}
{% set table_headers = base_headers + nutrient_headers %}
{% set base_fields = ["id", "product_name", "created_at", "updated_at"] %}
{% set nutrient_fields = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_fields = nutrient_fields + ["nutrient_" ~ nutrient.id] %}
{% endfor %}
{% set item_fields = base_fields + nutrient_fields %}
{# formulario de editar y add #}
{% for key, value in form_fields.items() %}
    {% if key != 'product_id' %}
        {{ render_field(value, form[key]) }}
    {% else %}
        {{ render_field(value, form[key]) }}
    {% endif %}
{% endfor %}
{# api de consumo #}
{% set api_url = url_for('foliage_api.product_contributions') %}

{% block extra_js %}
{{ super() }}
<script>
// Rellena el formulario con los datos del elemento seleccionado
function fillFormWithData(id) {
    const item = {{ items | tojson | safe }}.find(f => String(f.id) === String(id));
    if (item) {
        const productIdField = document.getElementById('product_id');
        if (productIdField) {
            productIdField.value = item.product_id || '';
        }

        // Para los campos de nutrientes
        item.nutrient_contributions.forEach(contribution => {
            const field = document.getElementById(`nutrient_${contribution.nutrient_id}`);
            if (field) {
                field.value = contribution.contribution || '';
            }
        });
    }
}
</script>
{% endblock %}


```

=== File: ./modules/foliage/templates/product_prices.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Precios_productos" %}
{% set entity_name_lower = "precio_de_producto" %}
{% set show_select_box = False %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Producto", "Precio", "Fecha de inicio", "Fecha de fin", "Fecha de creación", "Fecha de actualización"] %}
{% set item_fields = ["id", "product_name", "price", "start_date", "end_date", "created_at", "updated_at"] %}

{# formulario de editar y add #}
{% set form_fields = {
    'product_id': {'type': 'select', 'label': 'ID del producto', 'options': product_options, 'required': True},
    'price': {'type': 'number', 'label': 'Precio', 'required': True},
    'start_date': {'type': 'date', 'label': 'Fecha de inicio', 'required': True},
    'end_date': {'type': 'date', 'label': 'Fecha Final', 'required': True},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.product_price_view') %}
```

=== File: ./modules/foliage/templates/common_analyses.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Analisis_comunes" %}
{% set entity_name_lower = "analisis_comun" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Fecha de análisis", "Finca", "Lote", "Energía", "Proteínas", "Aforo", "Descanso", "Días de descanso", "Mes", "Fecha de creación", "Fecha de actualización"] %}
{% set item_fields = ["id", "date", "farm_name", "lot_name", "energy", "protein", "yield_estimate", "rest", "rest_days", "month", "created_at", "updated_at"] %}
{# formulario de editar y add #}
{% set form_fields = {
    'date': {'type': 'date', 'label': 'Fecha de análisis', 'required': True},
    'lot_id': {'type': 'select', 'label': 'Lote', 'options': lots_dic, 'required': True, 'new_value': False},
    'protein': {'type': 'number', 'label': 'Proteínas', 'required': True},
    'rest': {'type': 'number', 'label': 'Descanso', 'required': True},
    'rest_days': {'type': 'number', 'label': 'Días de descanso', 'required': True},
    'yield_estimate': {'type': 'number', 'label': 'Aforo', 'required': True},
    'month': {'type': 'number', 'label': 'Mes', "min": 1, "max": 12, 'required': True},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.common_analyses') %}

{% block extra_js %}
    {{ super() }}

    <script>
        // URLs para las nuevas acciones (ajusta estas rutas según tu aplicación)
        const foliarAnalysisUrl = "{{ url_for('foliage.amd_leaf_analyses') }}";
        const soilAnalysisUrl = "{{ url_for('foliage.amd_soil_analyses') }}";

        // Función para inyectar las nuevas opciones en el dropdown de acciones
        function injectCustomActions() {
            const dropdowns = document.querySelectorAll('[id^="dropdown-"]');
            dropdowns.forEach(dropdown => {
                const itemId = dropdown.id.replace('dropdown-', '');

                // Crear el enlace para "Añadir Análisis Foliar"
                const foliarLink = document.createElement('a');
                foliarLink.href = `${foliarAnalysisUrl}?analisis_comun_id=${itemId}`;
                foliarLink.className = "{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}";
                foliarLink.role = "menuitem";
                foliarLink.textContent = "Añadir Análisis Foliar";
                foliarLink.onclick = function(e) {
                    e.preventDefault();
                    window.location.href = this.href; // Redirige a la URL
                };

                // Crear el enlace para "Añadir Análisis de Suelo"
                const soilLink = document.createElement('a');
                soilLink.href = `${soilAnalysisUrl}?analisis_comun_id=${itemId}`;
                soilLink.className = "{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}";
                soilLink.role = "menuitem";
                soilLink.textContent = "Añadir Análisis de Suelo";
                soilLink.onclick = function(e) {
                    e.preventDefault();
                    window.location.href = this.href; // Redirige a la URL
                };

                // Insertar los nuevos enlaces en el dropdown (después de "Borrar")
                const dropdownMenu = dropdown.querySelector('.py-1');
                if (dropdownMenu) {
                    dropdownMenu.appendChild(foliarLink);
                    dropdownMenu.appendChild(soilLink);
                }
            });
        }

        // Ejecutar la inyección cuando el DOM esté completamente cargado
        document.addEventListener('DOMContentLoaded', injectCustomActions);
    </script>
{% endblock %}
```

=== File: ./modules/foliage/templates/lot_crops.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Lotes_de_cultivos" %}
{% set entity_name_lower = "lote_de_cultivo" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Finca", "Lote", "Cultivo", "Fecha de inicio", "Fecha final"] %}
{% set item_fields = ["id", "farm_name", "lot_name", "crop_name", "start_date", "end_date"] %}

{# formulario de editar y add #}
{% set form_fields = {
    'lot_id': {'type': 'select', 'label': 'Lote', 'options': lots_dic, 'required': True, 'new_value': False},
    'crop_id': {'type': 'select', 'label': 'Cultivo', 'options': crop_dic, 'required': True, 'new_value': False},
    'start_date': {'type': 'date', 'label': 'Fecha de inicio', 'required': True},
    'end_date': {'type': 'date', 'label': 'Finaliza', 'required': False},
    
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.lot_crops') %}
```

=== File: ./modules/foliage/templates/leaf_analyses.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "analisis_foliar" %}
{% set entity_name_lower = "analisis_foliar" %}
{% set show_select_box = False %}

{% set show_view_button = True %}
{# Mostrar la grid de ítems #}

{% set base_headers = ["ID", "ID del análisis común", "Finca", "Lote", "Fecha de creación", "Fecha de actualización"] %}
{% set nutrient_headers = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_headers = nutrient_headers + [nutrient.name] %}
{% endfor %}
{% set table_headers = base_headers + nutrient_headers %}

{% set base_fields = ["id", "common_analysis_id", "farm_name", "lot_name", "created_at", "updated_at"] %}

{% set nutrient_fields = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_fields = nutrient_fields + ["nutrient_" ~ nutrient.id] %}
{% endfor %}

{% set item_fields = base_fields + nutrient_fields %}

{# formulario de editar y add #}
{% for key, value in form_fields.items() %}
    {% if key != 'common_analysis_id' %}
        {{ render_field(value, form[key]) }}
    {% else %}
        {{ render_field(value, form[key]) }}
    {% endif %}
{% endfor %}

{# api de consumo #}

{% set api_url = url_for('foliage_api.leaf_analyses') %}

{#  **************************** #}
{% block extra_js %}
{{ super() }}
<script>
function fillFormWithData(id) {
    const item = {{ items | tojson | safe }}.find(f => String(f.id) === String(id));
    if (item) {
        document.getElementById('{{ entity_name_lower }}Id').value = item.id;
        document.getElementById('common_analysis_id').value = item.common_analysis_id || '';
        
        // Cambia nutrient_targets por nutrient_values
        if (item.nutrient_values) {
            item.nutrient_values.forEach(target => {
                const field = document.getElementById(`nutrient_${target.nutrient_id}`);
                if (field) {
                    field.value = target.value || ''; // Cambia target_value por value
                }
            });
        }
    }
}
</script>
{% endblock %}

```

=== File: ./modules/foliage/templates/soil_analyses.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Analisis_de_suelos" %}
{% set entity_name_lower = "analisis_de_suelo" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "ID del análisis común", "Energía", "Pastoreo", "Fecha de creación", "Fecha de actualización"] %}
{% set item_fields = ["id", "common_analysis_id", "energy", "grazing", "created_at", "updated_at"] %}

{# formulario de editar y add #}
{% set form_fields = {
    
     "common_analysis_id": {
            "type": "select",
            "label": "Análisis común",
            "options": common_analysis_options,
            "required": True,
        },
    'energy': {'type': 'text', 'label': 'Energía', 'required': True},
    'grazing': {'type': 'text', 'label': 'Pastoreo', 'required': True},
} %}
{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.nutrient_applications') %}
```

=== File: ./modules/foliage/templates/nutrient_applications.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Aplicacion_de_nutrientes" %}
{% set entity_name_lower = "aplicacion_nutriente" %}
{% set show_select_box = False %}

{% set show_view_button = True %}
{# Mostrar la grid de ítems #}

{% set base_headers = ["ID", "Fecha de aplicación", "Finca", "lote", "Fecha de creación", "Fecha de actualización"] %}
{% set nutrient_headers = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_headers = nutrient_headers + [nutrient.name] %}
{% endfor %}
{% set table_headers = base_headers + nutrient_headers %}

{% set base_fields = ["id", "date", "farm_name", "lot_name", "created_at", "updated_at"] %}
{% set nutrient_fields = [] %}
{% for nutrient in nutrient_ids %}
    {% set nutrient_fields = nutrient_fields + ["nutrient_" ~ nutrient.id] %}
{% endfor %}
{% set item_fields = base_fields + nutrient_fields %}


{# formulario de editar y add #}
{% for key, value in form_fields.items() %}
    {% if key != 'lot_id' %}
        {{ render_field(value, form[key]) }}
    {% else %}
        {{ render_field(value, form[key]) }}
    {% endif %}
{% endfor %}

{# entregado desde el endpoint #}
{# api de consumo #}
{% set api_url = url_for('foliage_api.nutrient_applications') %}

{% block extra_js %}
{{ super() }}
<script>
function fillFormWithData(id) {
    const item = {{ items | tojson | safe }}.find(f => String(f.id) === String(id));
    if (item) {
        document.getElementById('{{ entity_name_lower }}Id').value = item.id;
        document.getElementById('date').value = item.date || '';
        document.getElementById('lot_id').value = item.lot_id || '';
        
        if (item.nutrient_quantities) {
            item.nutrient_quantities.forEach(target => {
                const field = document.getElementById(`nutrient_${target.nutrient_id}`);
                if (field) {
                    field.value = target.quantity || ''; 
                }
            });
        }
    }
}
</script>
{% endblock %}
```

=== File: ./modules/foliage/templates/productions.j2 ===
```jinja-html
{% extends "layouts/crud_base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Producciones" %}
{% set entity_name_lower = "produccion" %}
{% set show_select_box = True %}
{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Finca", "Lote", "Fecha", "Área", "Producción (kg)", "Bultos", "Cosecha", "Mes", "Variedad", "Precio/Kg", "Proteína 65dde", "Descuento"] %}
{% set item_fields = ["id", "farm_name", "lot_name", "date", "area", "production_kg", "bags", "harvest", "month", "variety", "price_per_kg", "protein_65dde", "discount" ] %}

{# formulario de editar y add #}
{% set form_fields = {
    'lot_id': {'type': 'text', 'label': 'ID del lote', 'required': True},
    'date': {'type': 'date', 'label': 'Fecha', 'required': True},
    'area': {'type': 'number', 'label': 'Área', 'required': True},
    'production_kg': {'type': 'number', 'label': 'Producción (kg)', 'required': True},
    'bags': {'type': 'number', 'label': 'Bultos', 'required': True},
    'harvest':{'type': 'text', 'label': 'Cosecha', 'required': True},
    'month':{'type': 'number', 'label': 'Mes', 'required': True},
    'variety':{'type': 'text', 'label': 'Variedad', 'required': True},
    'price_per_kg':{'type': 'number', 'label': 'Precio/Kg', 'required': True},
    'protein_65dde':{'type': 'number', 'label': 'Proteína 65dde', 'required': True},
    'discount':{'type': 'number', 'label': 'Descuento', 'required': True},

} %}
{# entregado desde el endpoint #}
{# api de consumo #}

{% set api_url = url_for('foliage_api.production_view') %}

```

=== File: ./modules/foliage/controller.py ===
```python
# Python standard library imports
import json
from datetime import date, datetime

# Third party imports
from flask_jwt_extended import jwt_required, get_jwt
from flask import request, jsonify, Response
from flask.views import MethodView
from werkzeug.exceptions import BadRequest, NotFound, Forbidden, Unauthorized, Conflict
from sqlalchemy.orm import joinedload


# Local application imports
from app.extensions import db
from app.core.controller import check_permission, check_resource_access
from app.core.models import User, RoleEnum, ResellerPackage, Organization
from .models import (
    Farm,
    Lot,
    Crop,
    LotCrop,
    CommonAnalysis,
    NutrientApplication,
    Nutrient,
    LeafAnalysis,
    Objective,
    objective_nutrients,
    product_contribution_nutrients,
    leaf_analysis_nutrients,
    nutrient_application_nutrients,
    SoilAnalysis,
    Production,
    Product,
    ProductContribution,
    ProductPrice,
    Recommendation,
)

# helper

class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (date, datetime)):
            return obj.isoformat()
        return super().default(obj)

# Vista para granjas (farms)
# 👌
class FarmView(MethodView):
    """Clase para gestionar operaciones CRUD sobre granjas."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, farm_id=None):
        """
        Obtiene una lista de granjas o una granja específica.
        Args:
            farm_id (str, optional): ID de la granja a consultar.
        Returns:
            JSON: Lista de granjas o detalles de una granja específica.
        """
        if farm_id:
            return self._get_farm(farm_id)
        return self._get_farm_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea una nueva granja.
        Returns:
            JSON: Detalles de la granja creada.
        """
        data = request.get_json()
        if not data or not all(k in data for k in ("name", "org_id")):
            raise BadRequest("Missing required fields.")
        return self._create_farm(data)

    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Actualiza una granja existente.
        Args:
            farm_id (str): ID de la granja a actualizar.
        Returns:
            JSON: Detalles de la granja actualizada.
        """
        data = request.get_json()
        farm_id = data.get("id")
        if not data or not farm_id:
            raise BadRequest("Missing farm_id or data.")
        return self._update_farm(farm_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Elimina una granja existente.
        Args:
            farm_id (str): ID de la granja a eliminar.
        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        farm_id = id
        if data and "ids" in data:
            return self._delete_farm(farm_ids=data["ids"])
        if farm_id:
            return self._delete_farm(farm_id=farm_id)
        raise BadRequest("Missing farm_id.")

    # Métodos auxiliares
    def _get_farm_list(self):
        """Obtiene una lista de todas las granjas activas."""
        claims = get_jwt()
        
        farms = Farm.query.filter_by(active=True).all() if hasattr(Farm, "active") else Farm.query.all()
        accessible_farms = [farm for farm in farms if self._has_access(farm, claims)]
        
        if farms and not accessible_farms:
            raise Forbidden("You do not have access to any farms.")
        
        response_data = [self._serialize_farm(farm) for farm in farms]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_farm(self, farm_id):
        """Obtiene los detalles de una granja específica."""
        farm = Farm.query.get_or_404(farm_id)
        claims = get_jwt()
        if not self._has_access(farm, claims):
            raise Forbidden("You do not have access to this farm.")
        response_data = self._serialize_farm(farm)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_farm(self, data):
        """Crea una nueva granja con los datos proporcionados."""
        if hasattr(Farm, "active"):
            if Farm.query.filter_by(
                name=data["name"], org_id=data["org_id"], active=True
            ).first():
                raise BadRequest("Name already exists.")
        else:
            if Farm.query.filter_by(name=data["name"], org_id=data["org_id"]).first():
                raise BadRequest("Name already exists.")
        farm = Farm(
            name=data["name"],
            org_id=data["org_id"],
        )
        db.session.add(farm)
        db.session.commit()
        response_data = self._serialize_farm(farm)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_farm(self, farm_id, data):
        """Actualiza los datos de una granja existente."""
        farm = Farm.query.get_or_404(farm_id)
        if "name" in data and data["name"] != farm.name:
            if hasattr(Farm, "active"):
                if Farm.query.filter_by(
                    name=data["name"], org_id=farm.org_id, active=True
                ).first():
                    raise BadRequest("Name already exists.")
            else:
                if Farm.query.filter_by(name=data["name"], org_id=farm.org_id).first():
                    raise BadRequest("Name already exists.")
            farm.name = data["name"]
        if "org_id" in data:
            farm.org_id = data["org_id"]
        db.session.commit()
        response_data = self._serialize_farm(farm)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_farm(self, farm_id=None, farm_ids=None):
        """Elimina una granja marcándola como inactiva."""
        claims = get_jwt()
        if farm_id and farm_ids:
            raise BadRequest("Solo se puede especificar farm_id o farm_ids, no ambos.")
        if farm_id:
            farm = Farm.query.get_or_404(farm_id)
            if hasattr(farm, "active"):
                farm.active = False
            else:
                db.session.delete(farm)
            db.session.commit()
            return jsonify({"message": "Farm deleted successfully"}), 200
        if farm_ids:
            deleted_farms = []
            for farm_id in farm_ids:
                farm = Farm.query.get(farm_id)
                if not farm:
                    continue
                if hasattr(farm, "active"):
                    farm.active = False
                else:
                    db.session.delete(farm)
                deleted_farms.append(farm.name)
                db.session.commit()
            deleted_farms_str = ", ".join(deleted_farms)
            return (
                jsonify({"message": f"Farms {deleted_farms_str} deleted successfully"}),
                200,
            )
        if not deleted_farms:
            return (
                jsonify(
                    {"error": "No farms were deleted due to permission restrictions"}
                ),
                403,
            )

    def _has_access(self, farm, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        return check_resource_access(farm, claims)

    def _serialize_farm(self, farm):
        """Serializa un objeto Farm a un diccionario."""
        return {
            "id": farm.id,
            "name": farm.name,
            "org_id": farm.org_id,
            "org_name": farm.organization.name if farm.organization else "",
            "lots": [lot.name for lot in farm.lots],
            "created_at": farm.created_at.isoformat(),
            "updated_at": farm.updated_at.isoformat(),
        }


# Vista para lotes (lots)
# 👌
class LotView(MethodView):
    """Clase para gestionar operaciones CRUD sobre lotes."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, lot_id=None):
        """
        Obtiene una lista de lotes o un lote específico.
        Args:
            lot_id (str, optional): ID del lote a consultar.
        Returns:
            JSON: Lista de lotes o detalles de un lote específico.
        """
        if lot_id:
            return self._get_lot(lot_id)
        return self._get_lot_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea un nuevo lote.
        Returns:
            JSON: Detalles del lote creado.
        """
        data = request.get_json()
        if not data or not all(k in data for k in ("name", "area", "farm_id")):
            raise BadRequest("Missing required fields.")
        return self._create_lot(data)

    @check_permission(resource_owner_check=True)
    def put(self, id=None):
        """
        Actualiza un lote existente.
        Args:
            lot_id (str): ID del lote a actualizar.
        Returns:
            JSON: Detalles del lote actualizado.
        """
        data = request.get_json()
        lot_id = data.get("id")
        if not data or not lot_id:
            raise BadRequest("Missing lot_id or data.")
        return self._update_lot(lot_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Elimina un lote existente.
        Args:
            lot_id (str): ID del lote a eliminar.
        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        if data and "ids" in data:
            return self._delete_lot(lot_ids=data["ids"])
        if id:
            return self._delete_lot(lot_id=id)

        raise BadRequest("Missing lot_id.")

    # Métodos auxiliares
    def _get_lot_list(self, filter_by=None):
        """Obtiene una lista de lotes activos según el rol del usuario."""
        claims = get_jwt()
        user_role = claims.get("rol")
        user_id = claims.get("id")
        lots = []  # Lista de lotes que se devolverá
        if user_role == RoleEnum.ADMINISTRATOR.value:
            query = Lot.query
            if hasattr(Lot, "active"):
                query = query.filter_by(active=True)
            if filter_by:
                query = query.filter_by(farm_id=filter_by)
            lots = query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = (
                ResellerPackage.query.options(
                    joinedload(ResellerPackage.organizations).joinedload("lots")
                )
                .filter_by(reseller_id=user_id)
                .first()
            )
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            # Usamos un conjunto para evitar duplicados
            lots = {lot for org in reseller_package.organizations for lot in org.lots}
            # Convertimos a lista para la serialización final
            lots = list(lots)
        else:
            raise Forbidden("Only administrators and resellers can list lots.")
        # Serialización y respuesta
        response_data = [self._serialize_lot(lot) for lot in lots]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_lot(self, lot_id):
        """Obtiene los detalles de un lote específico."""
        lot = Lot.query.get_or_404(lot_id)
        claims = get_jwt()
        if not self._has_access(lot, claims):
            raise Forbidden("You do not have access to this lot.")
        response_data = self._serialize_lot(lot)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_lot(self, data):
        """Crea un nuevo lote con los datos proporcionados."""
        if hasattr(Lot, "active"):
            if Lot.query.filter_by(name=data["name"], active=True).first():
                raise BadRequest("Name already exists.")
        else:
            if Lot.query.filter_by(name=data["name"]).first():
                raise BadRequest("Name already exists.")
        lot = Lot(
            name=data["name"],
            area=data["area"],
            farm_id=data["farm_id"],
        )
        db.session.add(lot)
        db.session.commit()
        response_data = self._serialize_lot(lot)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_lot(self, lot_id, data):
        """Actualiza los datos de un lote existente."""
        lot = Lot.query.get_or_404(lot_id)
        if "name" in data and data["name"] != lot.name:
            if hasattr(Lot, "active"):
                if Lot.query.filter_by(name=data["name"], active=True).first():
                    raise BadRequest("Name already exists.")
            else:
                if Lot.query.filter_by(name=data["name"]).first():
                    raise BadRequest("Name already exists.")
            lot.name = data["name"]
        if "area" in data:
            lot.area = data["area"]
        if "farm_id" in data:
            lot.farm_id = data["farm_id"]
        db.session.commit()
        response_data = self._serialize_lot(lot)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_lot(self, lot_id=None, lot_ids=None):
        """Elimina un lote marcándolo como inactivo."""
        claims = get_jwt()
        if lot_id and lot_ids:
            raise BadRequest("Solo se puede especificar lot_id o lot_ids, no ambos.")
        if lot_id:
            lot = Lot.query.get_or_404(lot_id)
            if hasattr(lot, "active"):
                lot.active = False
            else:
                db.session.delete(lot)
            db.session.commit()
            return jsonify({"message": "Lot deleted successfully"}), 200
        if lot_ids:
            deleted_lots = []
            for lot_id in lot_ids:
                lot = Lot.query.get(lot_id)
                if not lot:
                    continue
                if hasattr(lot, "active"):
                    lot.active = False
                else:
                    db.session.delete(lot)
                deleted_lots.append(lot.name)
                db.session.commit()
                deleted_lots_str = ", ".join(deleted_lots)
            return (
                jsonify({"message": f"Lots {deleted_lots_str} deleted successfully"}),
                200,
            )
        if not deleted_lots:
            return (
                jsonify(
                    {"error": "No lots were deleted due to permission restrictions"}
                ),
                403,
            )

    def _has_access(self, lot, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        return check_resource_access(lot, claims)

    def _serialize_lot(self, lot):
        """Serializa un objeto Lot a un diccionario."""
        return {
            "id": lot.id,
            "name": lot.name,
            "area": lot.area,
            "farm_id": lot.farm_id,
            "farm_name": lot.farm.name if lot.farm else "",
            "created_at": lot.created_at.isoformat(),
            "updated_at": lot.updated_at.isoformat(),
        }


# Vista para cultivos (crops)
# 👌
class CropView(MethodView):
    """Clase para gestionar operaciones CRUD sobre cultivos."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, crop_id=None):
        """
        Obtiene una lista de cultivos o un cultivo específico.
        Args:
            crop_id (str, optional): ID del cultivo a consultar.
        Returns:
            JSON: Lista de cultivos o detalles de un cultivo específico.
        """
        if crop_id:
            return self._get_crop(crop_id)
        return self._get_crop_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea un nuevo cultivo.
        Returns:
            JSON: Detalles del cultivo creado.
        """
        data = request.get_json()
        if not data or not all(k in data for k in ("name",)):
            raise BadRequest("Missing required fields.")
        return self._create_crop(data)

    @check_permission(resource_owner_check=True)
    def put(self, id):
        """
        Actualiza un cultivo existente.
        Args:
            crop_id (str): ID del cultivo a actualizar.
        Returns:
            JSON: Detalles del cultivo actualizado.
        """
        data = request.get_json()
        crop_id = data.get("id")
        if not data or not crop_id:
            raise BadRequest("Missing crop_id or data.")
        return self._update_crop(crop_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Elimina un cultivo existente.
        Args:
            crop_id (str): ID del cultivo a eliminar.
        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        if data and "ids" in data:
            return self._delete_crop(crop_ids=data["ids"])
        crop_id = id
        if crop_id:
            return self._delete_crop(crop_id=crop_id)
        raise BadRequest("Missing crop_id.")

    # Métodos auxiliares
    def _get_crop_list(self):
        """Obtiene una lista de todos los cultivos activos."""
        claims = get_jwt()
        user_role = claims.get("rol")
        user_id = claims.get("id")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            if hasattr(Crop, "active"):
                crops = Crop.query.filter_by(active=True).all()
            else:
                crops = Crop.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=user_id
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            crops = []
            for org in reseller_package.organizations:
                crops.extend(org.crops)
        else:
            raise Forbidden("Only administrators and resellers can list crops.")
        response_data = [self._serialize_crop(crop) for crop in crops]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_crop(self, crop_id):
        """Obtiene los detalles de un cultivo específico."""
        crop = Crop.query.get_or_404(crop_id)
        claims = get_jwt()
        if not self._has_access(crop, claims):
            raise Forbidden("You do not have access to this crop.")
        response_data = self._serialize_crop(crop)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_crop(self, data):
        """Crea un nuevo cultivo con los datos proporcionados."""
        if hasattr(Crop, "active"):
            if Crop.query.filter_by(name=data["name"], active=True).first():
                raise BadRequest("Name already exists.")
        else:
            if Crop.query.filter_by(name=data["name"]).first():
                raise BadRequest("Name already exists.")
        crop = Crop(
            name=data["name"],
        )
        db.session.add(crop)
        db.session.commit()
        response_data = self._serialize_crop(crop)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_crop(self, crop_id, data):
        """Actualiza los datos de un cultivo existente."""
        crop = Crop.query.get_or_404(crop_id)
        if "name" in data and data["name"] != crop.name:
            if hasattr(Crop, "active"):
                if Crop.query.filter_by(name=data["name"], active=True).first():
                    raise BadRequest("Name already exists.")
            else:
                if Crop.query.filter_by(name=data["name"]).first():
                    raise BadRequest("Name already exists.")
            crop.name = data["name"]
        db.session.commit()
        response_data = self._serialize_crop(crop)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_crop(self, crop_id=None, crop_ids=None):
        """Elimina un cultivo marcándolo como inactivo."""
        claims = get_jwt()
        if crop_id and crop_ids:
            raise BadRequest("Solo se puede especificar crop_id o crop_ids, no ambos.")
        if crop_id:
            crop = Crop.query.get_or_404(crop_id)
            if hasattr(crop, "active"):
                crop.active = False
            else:
                db.session.delete(crop)
            db.session.commit()
            return jsonify({"message": "Crop deleted successfully"}), 200
        if crop_ids:
            deleted_crops = []
            for crop_id in crop_ids:
                crop = Crop.query.get(crop_id)
                if not crop:
                    continue
                if hasattr(crop, "active"):
                    crop.active = False
                else:
                    db.session.delete(crop)
                deleted_crops.append(crop.name)
                db.session.commit()
                deleted_crops_str = ", ".join(deleted_crops)
            return (
                jsonify({"message": f"Crops {deleted_crops_str} deleted successfully"}),
                200,
            )
        if not deleted_crops:
            return (
                jsonify(
                    {"error": "No crops were deleted due to permission restrictions"}
                ),
                403,
            )

    def _has_access(self, crop, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        return check_resource_access(crop, claims)

    def _serialize_crop(self, crop):
        """Serializa un objeto Crop a un diccionario."""
        return {
            "id": crop.id,
            "name": crop.name,
            "created_at": crop.created_at.isoformat(),
            "updated_at": crop.updated_at.isoformat(),
        }


# Vista para nutrientes (nutrients)
# 👌
class NutrientView(MethodView):
    """Clase para gestionar operaciones CRUD sobre nutrientes."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, nutrient_id=None):
        """
        Obtiene una lista de nutrientes o un nutriente específico.
        Args:
            nutrient_id (str, optional): ID del nutriente a consultar.
        Returns:
            JSON: Lista de nutrientes o detalles de un nutriente específico.
        """
        if nutrient_id:
            return self._get_nutrient(nutrient_id)
        return self._get_nutrient_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea un nuevo nutriente.
        Returns:
            JSON: Detalles del nutriente creado.
        """
        data = request.get_json()
        if not data or not all(k in data for k in ("name", "symbol", "unit")):
            raise BadRequest("Missing required fields.")
        return self._create_nutrient(data)

    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Actualiza un nutriente existente.
        Args:
            nutrient_id (str): ID del nutriente a actualizar.
        Returns:
            JSON: Detalles del nutriente actualizado.
        """
        data = request.get_json()
        nutrient_id = id
        if not data or not nutrient_id:
            raise BadRequest("Missing nutrient_id or data.")
        return self._update_nutrient(nutrient_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Elimina un nutriente existente.
        Args:
            nutrient_id (str): ID del nutriente a eliminar.
        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        nutrient_id = id
        if data and "ids" in data:
            return self._delete_nutrient(nutrient_ids=data["ids"])
        if nutrient_id:
            return self._delete_nutrient(nutrient_id=nutrient_id)
        raise BadRequest("Missing nutrient_id.")

    # Métodos auxiliares
    def _get_nutrient_list(self):
        """Obtiene una lista de todos los nutrientes activos."""
        claims = get_jwt()
        user_role = claims.get("rol")
        user_id = claims.get("id")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            if hasattr(Nutrient, "active"):
                nutrients = Nutrient.query.filter_by(active=True).all()
            else:
                nutrients = Nutrient.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=user_id
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            nutrients = []
            for org in reseller_package.organizations:
                nutrients.extend(org.nutrients)
        else:
            raise Forbidden("Only administrators and resellers can list nutrients.")
        response_data = [self._serialize_nutrient(nutrient) for nutrient in nutrients]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_nutrient(self, nutrient_id):
        """Obtiene los detalles de un nutriente específico."""
        nutrient = Nutrient.query.get_or_404(nutrient_id)
        claims = get_jwt()
        if not self._has_access(nutrient, claims):
            raise Forbidden("You do not have access to this nutrient.")
        response_data = self._serialize_nutrient(nutrient)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_nutrient(self, data):
        """Crea un nuevo nutriente con los datos proporcionados."""
        if hasattr(Nutrient, "active"):
            if Nutrient.query.filter_by(name=data["name"], active=True).first():
                raise BadRequest("Name already exists.")
        else:
            if Nutrient.query.filter_by(name=data["name"]).first():
                raise BadRequest("Name already exists.")
        nutrient = Nutrient(
            name=data["name"],
            symbol=data["symbol"],
            unit=data["unit"],
        )
        db.session.add(nutrient)
        db.session.commit()
        response_data = self._serialize_nutrient(nutrient)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_nutrient(self, nutrient_id, data):
        """Actualiza los datos de un nutriente existente."""
        nutrient = Nutrient.query.get_or_404(nutrient_id)
        if "name" in data and data["name"] != nutrient.name:
            if hasattr(Nutrient, "active"):
                if Nutrient.query.filter_by(name=data["name"], active=True).first():
                    raise BadRequest("Name already exists.")
            else:
                if Nutrient.query.filter_by(name=data["name"]).first():
                    raise BadRequest("Name already exists.")
            nutrient.name = data["name"]
        if "symbol" in data:
            nutrient.symbol = data["symbol"]
        if "unit" in data:
            nutrient.unit = data["unit"]
        db.session.commit()
        response_data = self._serialize_nutrient(nutrient)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_nutrient(self, nutrient_id=None, nutrient_ids=None):
        """Elimina un nutriente marcándolo como inactivo."""
        claims = get_jwt()
        if nutrient_id and nutrient_ids:
            raise BadRequest(
                "Solo se puede especificar nutrient_id o nutrient_ids, no ambos."
            )
        if nutrient_id:
            nutrient = Nutrient.query.get_or_404(nutrient_id)
            if hasattr(nutrient, "active"):
                nutrient.active = False
            else:
                db.session.delete(nutrient)
            db.session.commit()
            return jsonify({"message": "Nutrient deleted successfully"}), 200
        if nutrient_ids:
            deleted_nutrients = []
            for nutrient_id in nutrient_ids:
                nutrient = Nutrient.query.get(nutrient_id)
                if not nutrient:
                    continue
                if hasattr(nutrient, "active"):
                    nutrient.active = False
                else:
                    db.session.delete(nutrient)
                deleted_nutrients.append(nutrient.name)
                db.session.commit()
                deleted_nutrients_str = ", ".join(deleted_nutrients)
            return (
                jsonify(
                    {
                        "message": f"Nutrients {deleted_nutrients_str} deleted successfully"
                    }
                ),
                200,
            )
        if not deleted_nutrients:
            return (
                jsonify(
                    {
                        "error": "No nutrients were deleted due to permission restrictions"
                    }
                ),
                403,
            )

    def _has_access(self, nutrient, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        return check_resource_access(nutrient, claims)

    def _serialize_nutrient(self, nutrient):
        """Serializa un objeto Nutrient a un diccionario."""
        return {
            "id": nutrient.id,
            "name": nutrient.name,
            "symbol": nutrient.symbol,
            "unit": nutrient.unit,
            "description": nutrient.description,
            "created_at": nutrient.created_at.isoformat(),
            "updated_at": nutrient.updated_at.isoformat(),
        }



# 👌
class ObjectiveView(MethodView):
    """Class to manage CRUD operations for nutrient objectives tied to crops"""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, objective_id=None):
        """
        Retrieve a list of objectives or a specific objective.
        Args:
            objective_id (int, optional): ID of the objective to retrieve.
        Returns:
            JSON: List of objectives or details of a specific objective.
        """
        if objective_id:
            return self._get_objective(objective_id)
        return self._get_objective_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Create a new objective with nutrient targets, protein, rest, and target value.
        Expected JSON data:
            {
                "crop_id": int,
                "target_value": float,
                "protein": float (optional),
                "rest": float (optional),
                "nutrient_targets": {"nutrient_<id>": float, ...} (e.g., "nutrient_1": 10.5)
            }
        Returns:
            JSON: Details of the created objective.
        """
        data = request.get_json()
        required_fields = ["crop_id", "target_value"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields: crop_id and target_value.")
        return self._create_objective(data)

    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Update an existing objective.
        Args:
            objective_id (int): ID of the objective to update.
        Expected JSON data: Same as POST, with optional fields.
        Returns:
            JSON: Details of the updated objective.
        """
        data = request.get_json()
        objective_id = id

        if not data or not objective_id:
            raise BadRequest("Missing objective_id or data.")
        return self._update_objective(objective_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Delete an existing objective.
        Args:
            objective_id (int): ID of the objective to delete.
        Returns:
            JSON: Confirmation message.
        """
        objective_id = id

        if not objective_id:
            raise BadRequest("Missing objective_id.")
        return self._delete_objective(objective_id)

    # Helper Methods
    def _get_objective_list(self):
        """Retrieve a list of all objectives based on user role"""
        claims = get_jwt()
        user_role = claims.get("rol")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            objectives = Objective.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            objectives = []
            for organization in reseller_package.organizations:
                for crop in organization.crops:
                    objectives.extend(crop.objectives)
        else:
            raise Forbidden("Only administrators and resellers can list objectives.")
        response_data = [self._serialize_objective(obj) for obj in objectives]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_objective(self, objective_id):
        """Retrieve details of a specific objective"""
        objective = Objective.query.get_or_404(objective_id)
        claims = get_jwt()
        if not self._has_access(objective, claims):
            raise Forbidden("You do not have access to this objective.")
        response_data = self._serialize_objective(objective)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_objective(self, data):
        """Create a new objective with nutrient targets"""
        crop_id = data["crop_id"]
        try:
            target_value = float(data["target_value"]) # Convert to float
        except (ValueError, TypeError):
            target_value = 0.0  
        protein = data.get("protein")  # Optional
        rest = data.get("rest")  # Optional

        # Validate crop exists
        crop = Crop.query.get(crop_id)
        if not crop:
            raise BadRequest("Invalid crop ID.")

        # Convert optional fields to float if provided
        protein = float(data.get('protein', 0)) if data.get('protein') else None
        rest = float(data.get('rest', 0)) if data.get('rest') else None

        # Create new objective
        new_objective = Objective(
            crop_id=crop_id, target_value=target_value, protein=protein, rest=rest
        )
        db.session.add(new_objective)
        db.session.flush()  # Ensure new_objective.id is available

        # Handle nutrient targets
        nutrient_targets = {k: v for k, v in data.items() if k.startswith("nutrient_")}
        for key, value in nutrient_targets.items():
            nutrient_id = int(key.split("_")[1])
            nutrient = Nutrient.query.get(nutrient_id)
            if not nutrient:
                raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
            
            # Handle null or empty values
            if value is None or value == "":
                continue  # Skip this nutrient target if value is null or empty
            
            try:
                target_value_float = float(value)  # Convert to float
                if target_value_float < 0:
                    raise BadRequest(
                        f"Target value for {nutrient.name} must be positive."
                    )
                insert_stmt = objective_nutrients.insert().values(
                    objective_id=new_objective.id,
                    nutrient_id=nutrient_id,
                    target_value=target_value_float,
                )
                db.session.execute(insert_stmt)
            except ValueError:
                raise BadRequest(
                    f"Invalid numeric value for {nutrient.name}: '{value}'"
                )

        db.session.commit()
        response_data = self._serialize_objective(new_objective)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_objective(self, objective_id, data):
        """Update an existing objective"""
        objective = Objective.query.get_or_404(objective_id)

        # Update main fields if provided and valid
        if "crop_id" in data:
            crop = Crop.query.get(data["crop_id"])
            if not crop:
                raise BadRequest("Invalid crop ID.")
            objective.crop_id = data["crop_id"]

        if "target_value" in data and data["target_value"]:
            try:
                objective.target_value = float(data["target_value"])
                if objective.target_value < 0:
                    raise BadRequest("Target value must be positive.")
            except ValueError:
                raise BadRequest("Target value must be a valid number.")

        if "protein" in data and data["protein"]:
            try:
                objective.protein = float(data["protein"])
                if objective.protein <= 0:
                    raise BadRequest("Protein value must be positive.")
            except ValueError:
                raise BadRequest("Protein value must be a valid number.")

        if "rest" in data and data["rest"]:
            try:
                objective.rest = float(data["rest"])
                if objective.rest <= 0:
                    raise BadRequest("Rest value must be positive.")
            except ValueError:
                raise BadRequest("Rest value must be a valid number.")

        # Handle nutrient targets if provided
        nutrient_targets = {k: v for k, v in data.items() if k.startswith("nutrient_")}
        if nutrient_targets:
            # Delete existing nutrient targets
            db.session.query(objective_nutrients).filter_by(
                objective_id=objective.id
            ).delete()
            # Add new nutrient targets
            for key, value in nutrient_targets.items():
                nutrient_id = int(key.split("_")[1])
                nutrient = Nutrient.query.get(nutrient_id)
                if not nutrient:
                    raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
                # Convert value to float and validate
                if value:
                    try:
                        target_value = float(value)
                        if target_value < 0:
                            raise BadRequest(
                                f"Target value for {nutrient.name} must be positive."
                            )
                        insert_stmt = objective_nutrients.insert().values(
                            objective_id=objective.id,
                            nutrient_id=nutrient_id,
                            target_value=target_value,
                        )
                        db.session.execute(insert_stmt)
                    except ValueError:
                        raise BadRequest(
                            f"Target value for {nutrient.name} must be a valid number."
                        )

        db.session.commit()
        response_data = self._serialize_objective(objective)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_objective(self, objective_id):
        """Delete an existing objective"""
        objective = Objective.query.get_or_404(objective_id)
        db.session.delete(objective)
        db.session.commit()
        return jsonify({"message": "Objective deleted successfully"}), 200

    def _has_access(self, objective, claims):
        """Check if the current user has access to the objective"""
        return check_resource_access(objective, claims)

    def _serialize_objective(self, objective):
        """Serialize an Objective object to a dictionary"""
        nutrient_targets = (
            db.session.query(objective_nutrients)
            .filter_by(objective_id=objective.id)
            .all()
        )
        nutrient_targets_dict = [
            {
                "nutrient_id": target.nutrient_id,
                "target_value": target.target_value,
                "nutrient_name": Nutrient.query.get(target.nutrient_id).name,
                "nutrient_symbol": Nutrient.query.get(target.nutrient_id).symbol,
                "nutrient_unit": Nutrient.query.get(target.nutrient_id).unit,
            }
            for target in nutrient_targets
        ]
        return {
            "id": objective.id,
            "crop_id": objective.crop_id,
            "crop_name": objective.crop.name,
            "target_value": objective.target_value,
            "protein": objective.protein,
            "rest": objective.rest,
            "created_at": objective.created_at.isoformat(),
            "updated_at": objective.updated_at.isoformat(),
            "nutrient_targets": nutrient_targets_dict,
        }


# Example Usage
# Create an Objective (POST)
# json

# {
#     "crop_id": 1,
#     "target_value": 100.0,
#     "protein": 20.5,
#     "rest": 15.0,
#     "nutrient_1": 10.5,  // Nitrogen target
#     "nutrient_2": 5.0    // Phosphorus target
# }

# Response
# json

# {
#     "id": 1,
#     "crop_id": 1,
#     "target_value": 100.0,
#     "protein": 20.5,
#     "rest": 15.0,
#     "created_at": "2025-03-13T12:00:00",
#     "updated_at": "2025-03-13T12:00:00",
#     "nutrient_targets": [
#         {
#             "nutrient_id": 1,
#             "target_value": 10.5,
#             "nutrient_name": "Nitrogen",
#             "nutrient_symbol": "N",
#             "nutrient_unit": "mg/L"
#         },
#         {
#             "nutrient_id": 2,
#             "target_value": 5.0,
#             "nutrient_name": "Phosphorus",
#             "nutrient_symbol": "P",
#             "nutrient_unit": "mg/L"
#         }
#     ]
# }

# Update an Objective (PUT)
# json

# {
#     "target_value": 120.0,
#     "nutrient_1": 12.0
# }


# 👌
class ProductView(MethodView):
    """Class to manage CRUD operations for products"""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, product_id=None):
        """
        Retrieve a list of products or a specific product
        Args:
            product_id (int, optional): ID of the product to retrieve
        Returns:
            JSON: List of products or details of a specific product
        """
        if product_id:
            return self._get_product(product_id)
        return self._get_product_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Create a new product
        Returns:
            JSON: Details of the created product
        """
        data = request.get_json()
        required_fields = ["name", "description"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields")
        return self._create_product(data)

    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Update an existing product
        Args:
            product_id (int): ID of the product to update
        Returns:
            JSON: Details of the updated product
        """
        data = request.get_json()
        product_id = id
        if not data or not product_id:
            raise BadRequest("Missing product_id or data")
        return self._update_product(product_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Delete an existing product
        Args:
            product_id (int): ID of the product to delete
        Returns:
            JSON: Confirmation message
        """
        product_id = id
        if not product_id:
            raise BadRequest("Missing product_id")
        return self._delete_product(product_id)

    # Helper Methods
    def _get_product_list(self):
        """Retrieve a list of all products"""
        claims = get_jwt()
        user_role = claims.get("rol")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            products = Product.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            products = []
            for organization in reseller_package.organizations:
                products.extend(organization.products)
        else:
            raise Forbidden("Only administrators and resellers can list products")
        response_data = [self._serialize_product(p) for p in products]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_product(self, product_id):
        """Retrieve details of a specific product"""
        product = Product.query.get_or_404(product_id)
        claims = get_jwt()
        if not self._has_access(product, claims):
            raise Forbidden("You do not have access to this product")
        response_data = self._serialize_product(product)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_product(self, data):
        """Create a new product"""
        name = data["name"]
        description = data["description"]
        product = Product(name=name, description=description)
        db.session.add(product)
        db.session.commit()
        response_data = self._serialize_product(product)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_product(self, product_id, data):
        """Update an existing product"""
        product = Product.query.get_or_404(product_id)
        if "name" in data:
            product.name = data["name"]
        if "description" in data:
            product.description = data["description"]
        db.session.commit()
        response_data = self._serialize_product(product)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_product(self, product_id):
        """Delete an existing product"""
        product = Product.query.get_or_404(product_id)
        db.session.delete(product)
        db.session.commit()
        return jsonify({"message": "Product deleted successfully"}), 200

    def _has_access(self, product, claims):
        """Check if the current user has access to the product"""
        return check_resource_access(product, claims)

    def _serialize_product(self, product):
        """Serialize a Product object to a dictionary"""
        return {
            "id": product.id,
            "name": product.name,
            "description": product.description,
            "created_at": product.created_at.isoformat(),
            "updated_at": product.updated_at.isoformat(),
        }

# 👌
class ProductContributionView(MethodView):
    """Class to manage CRUD operations for product contributions"""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator"])
    def get(self, product_contribution_id=None):
        """
        Retrieve a list of product contributions or a specific product contribution
        Args:
            product_contribution_id (int, optional): ID of the product contribution to retrieve
        Returns:
            JSON: List of product contributions or details of a specific product contribution
        """
        if product_contribution_id:
            return self._get_product_contribution(product_contribution_id)
        return self._get_product_contribution_list()

    @check_permission(required_roles=["administrator"])
    def post(self):
        """
        Create a new product contribution
        Expected JSON data:
            {
                "product_id": int,
                "nutrient_contributions": {"nutrient_<id>": float, ...} (e.g., "nutrient_1": 10.5)
            }
        Returns:
            JSON: Details of the created product contribution
        """
        data = request.get_json()
        required_fields = ["product_id"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields: product_id")
        return self._create_product_contribution(data)

    @check_permission(required_roles=["administrator"])
    def put(self, id: int):
        """
        Update an existing product contribution
        Args:
            product_contribution_id (int): ID of the product contribution to update
        Expected JSON data: Same as POST, with optional fields
        Returns:
            JSON: Details of the updated product contribution
        """
        data = request.get_json()
        product_contribution_id = id
        if not data or not product_contribution_id:
            raise BadRequest("Missing product_contribution_id or data")
        return self._update_product_contribution(product_contribution_id, data)

    @check_permission(required_roles=["administrator"])
    def delete(self, id=None):
        """
        Delete an existing product contribution
        Args:
            product_contribution_id (int): ID of the product contribution to delete
        Returns:
            JSON: Confirmation message
        """
        product_contribution_id = id
        if not product_contribution_id:
            raise BadRequest("Missing product_contribution_id")
        return self._delete_product_contribution(product_contribution_id)

    # Helper Methods
    def _get_product_contribution_list(self):
        """Retrieve a list of all product contributions"""
        product_contributions = ProductContribution.query.all()
        response_data = [
            self._serialize_product_contribution(pc) for pc in product_contributions
        ]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_product_contribution(self, product_contribution_id):
        """Retrieve details of a specific product contribution"""
        product_contribution = ProductContribution.query.get_or_404(
            product_contribution_id
        )
        response_data = self._serialize_product_contribution(product_contribution)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_product_contribution(self, data):
        """Create a new product contribution"""
        product_id = data["product_id"]
        product = Product.query.get(product_id)
        if not product:
            raise BadRequest("Invalid product ID")
        product_contribution = ProductContribution(product_id=product_id)
        db.session.add(product_contribution)
        db.session.flush()  # Ensure new_objective.id is available
        # Handle nutrient contributions
        nutrient_contributions = {
            k: v for k, v in data.items() if k.startswith("nutrient_")
        }
        for key, value in nutrient_contributions.items():
            nutrient_id = int(key.split("_")[1])
            nutrient = Nutrient.query.get(nutrient_id)
            if not nutrient:
                raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
            try:
                contribution = float(value)  # Convert to float
                if contribution < 0:
                    raise BadRequest(
                        f"Contribution for {nutrient.name} must be non-negative."
                    )
                insert_stmt = product_contribution_nutrients.insert().values(
                    product_contribution_id=product_contribution.id,
                    nutrient_id=nutrient_id,
                    contribution=contribution,
                )
                db.session.execute(insert_stmt)
            except ValueError:
                raise BadRequest(
                    f"Invalid numeric value for {nutrient.name}: '{value}'"
                )
        db.session.commit()
        response_data = self._serialize_product_contribution(product_contribution)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_product_contribution(self, product_contribution_id, data):
        """Update an existing product contribution"""
        product_contribution = ProductContribution.query.get_or_404(
            product_contribution_id
        )
        # Update main fields if provided
        if "product_id" in data:
            product = Product.query.get(data["product_id"])
            if not product:
                raise BadRequest("Invalid product ID")
            product_contribution.product_id = data["product_id"]
        # Handle nutrient contributions if provided
        nutrient_contributions = {
            k: v for k, v in data.items() if k.startswith("nutrient_")
        }
        if nutrient_contributions:
            # Delete existing nutrient contributions
            db.session.query(product_contribution_nutrients).filter_by(
                product_contribution_id=product_contribution.id
            ).delete()
            # Add new nutrient contributions
            for key, value in nutrient_contributions.items():
                nutrient_id = int(key.split("_")[1])
                nutrient = Nutrient.query.get(nutrient_id)
                if not nutrient:
                    raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
                # Convert value to float (or int) and validate
                try:
                    contribution = float(
                        value
                    )  # Use float to handle decimal values; use int if only integers are expected
                    if contribution < 0:
                        raise BadRequest(
                            f"Contribution for {nutrient.name} must be non-negative."
                        )
                    insert_stmt = product_contribution_nutrients.insert().values(
                        product_contribution_id=product_contribution.id,
                        nutrient_id=nutrient_id,
                        contribution=contribution,
                    )
                    db.session.execute(insert_stmt)
                except ValueError:
                    raise BadRequest(
                        f"Contribution for {nutrient.name} must be a valid number."
                    )
        db.session.commit()
        response_data = self._serialize_product_contribution(product_contribution)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_product_contribution(self, product_contribution_id):
        """Delete an existing product contribution"""
        product_contribution = ProductContribution.query.get_or_404(
            product_contribution_id
        )
        db.session.delete(product_contribution)
        db.session.commit()
        return jsonify({"message": "Product contribution deleted successfully"}), 200

    def _serialize_product_contribution(self, product_contribution):
        """Serialize a ProductContribution object to a dictionary"""
        nutrient_contributions = (
            db.session.query(product_contribution_nutrients)
            .filter_by(product_contribution_id=product_contribution.id)
            .all()
        )
        nutrient_contributions_dict = [
            {
                "nutrient_id": contribution.nutrient_id,
                "contribution": contribution.contribution,
                "nutrient_name": Nutrient.query.get(contribution.nutrient_id).name,
                "nutrient_symbol": Nutrient.query.get(contribution.nutrient_id).symbol,
                "nutrient_unit": Nutrient.query.get(contribution.nutrient_id).unit,
            }
            for contribution in nutrient_contributions
        ]
        return {
            "id": product_contribution.id,
            "product_id": product_contribution.product_id,
            "product_name": product_contribution.product.name,
            "created_at": product_contribution.created_at.isoformat(),
            "updated_at": product_contribution.updated_at.isoformat(),
            "nutrient_contributions": nutrient_contributions_dict,
        }

# 👌
class ProductPriceView(MethodView):
    """Class to manage CRUD operations for product prices"""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, product_price_id=None):
        """
        Retrieve a list of product prices or a specific product price
        Args:
            product_price_id (int, optional): ID of the product price to retrieve
        Returns:
            JSON: List of product prices or details of a specific product price
        """
        if product_price_id:
            return self._get_product_price(product_price_id)
        return self._get_product_price_list()

    @check_permission(required_roles=["administrator"])
    def post(self):
        """
        Create a new product price
        Returns:
            JSON: Details of the created product price
        """
        data = request.get_json()
        required_fields = ["product_id", "price", "start_date", "end_date"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields")
        return self._create_product_price(data)

    @check_permission(required_roles=["administrator"])
    def put(self, id: int):
        """
        Update an existing product price
        Args:
            product_price_id (int): ID of the product price to update
        Returns:
            JSON: Details of the updated product price
        """
        data = request.get_json()
        product_price_id = id
        if not data or not product_price_id:
            raise BadRequest("Missing product_price_id or data")
        return self._update_product_price(product_price_id, data)

    @check_permission(required_roles=["administrator"])
    def delete(self, id=None):
        """
        Delete an existing product price
        Args:
            product_price_id (int): ID of the product price to delete
        Returns:
            JSON: Confirmation message
        """
        product_price_id = id
        if not product_price_id:
            raise BadRequest("Missing product_price_id")
        return self._delete_product_price(product_price_id)

    # Helper Methods
    def _get_product_price_list(self):
        """Retrieve a list of all product prices"""
        claims = get_jwt()
        user_role = claims.get("rol")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            product_prices = ProductPrice.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            product_prices = []
            for organization in reseller_package.organizations:
                for product in organization.products:
                    product_prices.extend(product.product_prices)
        else:
            raise Forbidden("Only administrators and resellers can list product prices")
        response_data = [self._serialize_product_price(pp) for pp in product_prices]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_product_price(self, product_price_id):
        """Retrieve details of a specific product price"""
        product_price = ProductPrice.query.get_or_404(product_price_id)
        claims = get_jwt()
        if not self._has_access(product_price, claims):
            raise Forbidden("You do not have access to this product price")
        response_data = self._serialize_product_price(product_price)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_product_price(self, data):
        """Create a new product price"""
        product_id = data["product_id"]
        # Verificar si ya existe un precio para el producto
        existing_price = ProductPrice.query.filter_by(product_id=product_id).first()
        if existing_price:
            raise Conflict("Ya existe un precio para este producto")
        price = data["price"]
        start_date = data["start_date"]
        end_date = data["end_date"]
        product_price = ProductPrice(
            product_id=product_id, price=price, start_date=start_date, end_date=end_date
        )
        db.session.add(product_price)
        db.session.commit()
        response_data = self._serialize_product_price(product_price)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_product_price(self, product_price_id, data):
        """Update an existing product price"""
        product_price = ProductPrice.query.get_or_404(product_price_id)
        if "price" in data:
            product_price.price = data["price"]
        if "start_date" in data:
            product_price.start_date = data["start_date"]
        if "end_date" in data:
            product_price.end_date = data["end_date"]
        db.session.commit()
        response_data = self._serialize_product_price(product_price)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_product_price(self, product_price_id):
        """Delete an existing product price"""
        product_price = ProductPrice.query.get_or_404(product_price_id)
        db.session.delete(product_price)
        db.session.commit()
        return jsonify({"message": "Product price deleted successfully"}), 200

    def _has_access(self, product_price, claims):
        """Check if the current user has access to the product price"""
        return check_resource_access(product_price, claims)

    def _serialize_product_price(self, product_price):
        """Serialize a ProductPrice object to a dictionary"""
        return {
            "id": product_price.id,
            "product_id": product_price.product_id,
            "product_name": product_price.product.name,
            "price": product_price.price,
            "start_date": (
                product_price.start_date.isoformat()
                if product_price.start_date
                else None
            ),
            "end_date": (
                product_price.end_date.isoformat() if product_price.end_date else None
            ),
            "created_at": (
                product_price.created_at.isoformat()
                if product_price.created_at
                else None
            ),
            "updated_at": (
                product_price.updated_at.isoformat()
                if product_price.updated_at
                else None
            ),
        }

# 👌# Vista para análisis comunes (common_analyses)
class CommonAnalysisView(MethodView):
    """Clase para gestionar operaciones CRUD sobre análisis comunes."""
    decorators = [jwt_required()]
    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, common_analysis_id=None):
        """
        Obtiene una lista de análisis comunes o un análisis común específico.
        Args:
            common_analysis_id (str, optional): ID del análisis común a consultar.
        Returns:
            JSON: Lista de análisis comunes o detalles de un análisis común específico.
        """
        if common_analysis_id:
            return self._get_common_analysis(common_analysis_id)
        return self._get_common_analysis_list()
    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea un nuevo análisis común.
        Returns:
            JSON: Detalles del análisis común creado.
        """
        data = request.get_json()
        if not data or not all(k in data for k in ("date", "lot_id", "protein", "energy", "rest", "rest_days", "month")):
            raise BadRequest("Missing required fields.")
        return self._create_common_analysis(data)
    @check_permission(resource_owner_check=True)
    def put(self, id):
        """
        Actualiza un análisis común existente.
        Args:
            common_analysis_id (str): ID del análisis común a actualizar.
        Returns:
            JSON: Detalles del análisis común actualizado.
        """
        data = request.get_json()
        common_analysis_id = id
        if not data or not common_analysis_id:
            raise BadRequest("Missing common_analysis_id or data.")
        return self._update_common_analysis(common_analysis_id, data)
    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Elimina un análisis común existente.
        Args:
            common_analysis_id (str): ID del análisis común a eliminar.
        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        common_analysis_id = id
        if data and "ids" in data:
            return self._delete_common_analysis(common_analysis_ids=data["ids"])
        if common_analysis_id:
            return self._delete_common_analysis(common_analysis_id=common_analysis_id)
        raise BadRequest("Missing common_analysis_id.")
    # Métodos auxiliares
    def _get_common_analysis_list(self, filter_by=None):
        """
        Obtiene una lista de todos los análisis comunes activos según el rol del usuario.
        
        Args:
            filter_by (int): Filtro por ID de finca.
        
        Returns:
            Response: Lista de análisis comunes en formato JSON.
        """
        claims = get_jwt()
        user_role = claims.get("rol")
        user_id = claims.get("id")
        user_org = claims.get("organizations", [])
        
        common_analyses = []  # Lista de análisis comunes que se devolverá
        
        if user_role == RoleEnum.ADMINISTRATOR.value:
            query = CommonAnalysis.query
            if hasattr(CommonAnalysis, "active"):
                query = query.filter_by(active=True)
            if filter_by:
                query = query.join(Lot).join(Farm).filter(Farm.id == filter_by)
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = (
                ResellerPackage.query.options(
                    joinedload(ResellerPackage.organizations).joinedload("farms")
                )
                .filter_by(reseller_id=user_id)
                .first()
            )
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            
            if filter_by:
                query = (
                    CommonAnalysis.query.join(Lot)
                    .join(Farm)
                    .filter(Farm.id == filter_by)
                    .join(ResellerPackage.organizations, Farm.organization_id == Organization.id)
                    .filter(Organization.id.in_(reseller_package.organization_ids))
                )
            else:
                query = (
                    CommonAnalysis.query.join(Lot)
                    .join(Farm)
                    .join(ResellerPackage.organizations, Farm.organization_id == Organization.id)
                    .filter(Organization.id.in_(reseller_package.organization_ids))
                )
        elif user_role == RoleEnum.ORG_ADMIN.value:
            org_ids = [org["id"] for org in user_org ]
            if not org_ids:
                raise Forbidden("User is not associated with any organization.")

            if filter_by:
                query = (
                    CommonAnalysis.query.join(Lot)
                    .join(Farm).filter(Farm.id == filter_by)
                    .filter(Farm.org_id.in_(org_ids))
                )
            else:
                query = (
                    CommonAnalysis.query.join(Lot)
                    .join(Farm).filter(Farm.org_id.in_(org_ids))
                )
        else:
            raise Forbidden("You can't list common_analyses.")
        
        common_analyses = query.all()
        
        # Serialización y respuesta
        response_data = [
            self._serialize_common_analysis(common_analysis)
            for common_analysis in common_analyses
        ]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    
    def _get_common_analysis(self, common_analysis_id):
        """Obtiene los detalles de un análisis común específico."""
        common_analysis = CommonAnalysis.query.get_or_404(common_analysis_id)
        claims = get_jwt()
        if not self._has_access(common_analysis, claims):
            raise Forbidden("You do not have access to this common_analysis.")
        response_data = self._serialize_common_analysis(common_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    
    def _create_common_analysis(self, data):
        """Crea un nuevo análisis común con los datos proporcionados."""
        if CommonAnalysis.query.filter_by(
            date=data["date"], lot_id=data["lot_id"]
        ).first():
            raise BadRequest("CommonAnalysis already exists.")
        common_analysis = CommonAnalysis(
            date=data["date"],
            lot_id=data["lot_id"],
            protein=data["protein"],
            rest=data["rest"],
            energy=data["energy"],
            yield_estimate=data["yield_estimate"],
            rest_days=data["rest_days"],
            month=data["month"],
        )
        db.session.add(common_analysis)
        db.session.commit()
        response_data = self._serialize_common_analysis(common_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")
    def _update_common_analysis(self, common_analysis_id, data):
        """Actualiza los datos de un análisis común existente."""
        common_analysis = CommonAnalysis.query.get_or_404(common_analysis_id)
        if "date" in data:
            common_analysis.date = data["date"]
        if "lot_id" in data:
            common_analysis.lot_id = data["lot_id"]
        if "protein" in data:
            common_analysis.protein = data["protein"]
        if "rest" in data:
            common_analysis.rest = data["rest"]
        if "energy" in data:
            common_analysis.energy = data["energy"]
        if "yield_estimate" in data:
            common_analysis.yield_estimate = data["yield_estimate"]
        if "rest_days" in data:
            common_analysis.rest_days = data["rest_days"]
        if "month" in data:
            common_analysis.month = data["month"]
        db.session.commit()
        response_data = self._serialize_common_analysis(common_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    def _delete_common_analysis(
        self, common_analysis_id=None, common_analysis_ids=None
    ):
        """Elimina un análisis común marcándolo como inactivo."""
        claims = get_jwt()
        if common_analysis_id and common_analysis_ids:
            raise BadRequest(
                "Solo se puede especificar common_analysis_id o common_analysis_ids, no ambos."
            )
        if common_analysis_id:
            common_analysis = CommonAnalysis.query.get_or_404(common_analysis_id)
            db.session.delete(common_analysis)
            db.session.commit()
            return jsonify({"message": "CommonAnalysis deleted successfully"}), 200
        if common_analysis_ids:
            deleted_common_analyses = []
            for common_analysis_id in common_analysis_ids:
                common_analysis = CommonAnalysis.query.get(common_analysis_id)
                if not common_analysis:
                    continue
                db.session.delete(common_analysis)
                deleted_common_analyses.append(common_analysis.lot_id)
                db.session.commit()
                deleted_common_analyses_str = ", ".join(
                    map(str, deleted_common_analyses)
                )
            return (
                jsonify(
                    {
                        "message": f"CommonAnalyses {deleted_common_analyses_str} deleted successfully"
                    }
                ),
                200,
            )
    def _has_access(self, common_analysis, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        return check_resource_access(common_analysis, claims)
        
    def _serialize_common_analysis(self, common_analysis):
        """Serializa un objeto CommonAnalysis a un diccionario."""
        return {
            "id": common_analysis.id,
            "date": common_analysis.date.isoformat() if common_analysis.date else None,
            "lot_id": common_analysis.lot_id,
            "lot_name": common_analysis.lot.name,
            "farm_name": common_analysis.lot.farm.name,
            "protein": common_analysis.protein,
            "energy": common_analysis.energy,
            "rest": common_analysis.rest,
            "rest_days": common_analysis.rest_days,
            "yield_estimate": common_analysis.yield_estimate,
            "month": common_analysis.month,
            "created_at": common_analysis.created_at.isoformat() if common_analysis.created_at else None,
            "updated_at": common_analysis.updated_at.isoformat() if common_analysis.updated_at else None,
        }


# Vista para lotes de cultivos (lot_crops)
# 👌
class LotCropView(MethodView):
    """Clase para gestionar operaciones CRUD sobre la relación entre lotes y cultivos."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, lot_crop_id=None):
        """
        Obtiene una lista de relaciones lot-crop o una relación específica.
        Args:
            lot_crop_id (int, optional): ID de la relación lot-crop a consultar.
        Returns:
            JSON: Lista de relaciones o detalles de una relación específica.
        """
        if lot_crop_id:
            return self._get_lot_crop(lot_crop_id)
        return self._get_lot_crop_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea una nueva relación lot-crop.
        Returns:
            JSON: Detalles de la relación creada.
        """
        data = request.get_json()
        if not data or not all(k in data for k in ("lot_id", "crop_id", "start_date")):
            raise BadRequest("Missing required fields.")
        return self._create_lot_crop(data)

    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Actualiza una relación lot-crop existente.
        Args:
            lot_crop_id (int): ID de la relación a actualizar.
        Returns:
            JSON: Detalles de la relación actualizada.
        """
        data = request.get_json()
        lot_crop_id = data.get("id")
        if not data or not lot_crop_id:
            raise BadRequest("Missing lot_crop_id or data.")
        return self._update_lot_crop(lot_crop_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Elimina una relación lot-crop existente.
        Args:
            lot_crop_id (int): ID de la relación a eliminar.
        Returns:
            JSON: Mensaje de confirmación.
        """
        data = request.get_json()
        lot_crop_id = id
        if data and "ids" in data:
            return self._delete_lot_crop(lot_crop_ids=data["ids"])
        if lot_crop_id:
            return self._delete_lot_crop(lot_crop_id=lot_crop_id)
        raise BadRequest("Missing lot_crop_id.")

    # Métodos auxiliares
    def _get_lot_crop_list(self):
        """Obtiene una lista de todas las relaciones lot-crop."""
        claims = get_jwt()
        user_role = claims.get("rol")
        org_id = claims.get("org_id")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            lot_crops = LotCrop.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=org_id
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            lot_crops = []
            for org in reseller_package.organizations:
                for farm in org.farms:
                    lot_crops.extend(farm.lot_crops)
        else:
            # Filtra por organización del usuario
            lot_crops = LotCrop.query.join(Lot).join(Farm).filter(Farm.org_id == org_id).all()
        response_data = [self._serialize_lot_crop(lot_crop) for lot_crop in lot_crops]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_lot_crop(self, lot_crop_id):
        """Obtiene los detalles de una relación lot-crop específica."""
        lot_crop = LotCrop.query.get_or_404(lot_crop_id)
        claims = get_jwt()
        if not self._has_access(lot_crop, claims):
            raise Forbidden("You do not have access to this lot-crop.")
        response_data = self._serialize_lot_crop(lot_crop)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_lot_crop(self, data):
        """Crea una nueva relación lot-crop con los datos proporcionados."""
        # Verificar si el lote y el cultivo existen
        lot = Lot.query.get_or_404(data["lot_id"])
        crop = Crop.query.get_or_404(data["crop_id"])

        # Convertir las fechas de entrada a objetos datetime
        new_start_date = datetime.fromisoformat(data["start_date"])
        new_end_date = datetime.fromisoformat(data["end_date"]) if data.get("end_date") else None

        # Verificar si ya existe un cultivo activo (sin fecha de fin) en el lote
        active_crop = LotCrop.query.filter_by(lot_id=data["lot_id"]).filter(LotCrop.end_date.is_(None)).first()
        if active_crop:
            raise BadRequest("There is an active crop in this lot. Please close it before starting a new one.")

        # Verificar solapamiento con cultivos existentes
        existing_crops = LotCrop.query.filter_by(lot_id=data["lot_id"]).all()
        for existing in existing_crops:
            existing_start = existing.start_date
            existing_end = existing.end_date if existing.end_date else datetime.max  # Si no hay end_date, asumir que sigue activo

            # Comprobar si hay solapamiento
            if (new_start_date <= existing_end) and (new_end_date is None or new_end_date >= existing_start):
                raise BadRequest("The new crop dates overlap with an existing crop in this lot.")

        # Verificar duplicados (misma combinación de lote, cultivo y fecha de inicio)
        if LotCrop.query.filter_by(lot_id=data["lot_id"], crop_id=data["crop_id"], 
                                start_date=data["start_date"]).first():
            raise BadRequest("This lot-crop relationship already exists.")

        # Crear el nuevo cultivo
        lot_crop = LotCrop(
            lot_id=data["lot_id"],
            crop_id=data["crop_id"],
            start_date=data["start_date"],
            end_date=data.get("end_date")
        )
        db.session.add(lot_crop)
        db.session.commit()
        response_data = self._serialize_lot_crop(lot_crop)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_lot_crop(self, lot_crop_id, data):
        """Actualiza los datos de una relación lot-crop existente."""
        lot_crop = LotCrop.query.get_or_404(lot_crop_id)

        # Nuevas fechas propuestas
        new_lot_id = data.get("lot_id", lot_crop.lot_id)
        new_start_date = datetime.fromisoformat(data["start_date"]) if "start_date" in data else lot_crop.start_date
        new_end_date = datetime.fromisoformat(data["end_date"]) if data.get("end_date") else lot_crop.end_date

        # Si se cambia el lote o las fechas, validar solapamientos
        if "lot_id" in data or "start_date" in data or "end_date" in data:
            # Verificar si el lote existe
            if "lot_id" in data and data["lot_id"] != lot_crop.lot_id:
                Lot.query.get_or_404(data["lot_id"])

            # Verificar solapamiento con otros cultivos en el lote
            existing_crops = LotCrop.query.filter(LotCrop.lot_id == new_lot_id, LotCrop.id != lot_crop_id).all()
            for existing in existing_crops:
                existing_start = existing.start_date
                existing_end = existing.end_date if existing.end_date else datetime.max

                if (new_start_date <= existing_end) and (new_end_date is None or new_end_date >= existing_start):
                    raise BadRequest("The updated crop dates overlap with an existing crop in this lot.")

        # Actualizar los campos
        if "lot_id" in data and data["lot_id"] != lot_crop.lot_id:
            lot_crop.lot_id = data["lot_id"]

        if "crop_id" in data and data["crop_id"] != lot_crop.crop_id:
            Crop.query.get_or_404(data["crop_id"])  # Verificar que el cultivo existe
            lot_crop.crop_id = data["crop_id"]

        if "start_date" in data:
            lot_crop.start_date = data["start_date"]

        if "end_date" in data:
            lot_crop.end_date = data["end_date"]

        db.session.commit()
        response_data = self._serialize_lot_crop(lot_crop)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_lot_crop(self, lot_crop_id=None, lot_crop_ids=None):
        """Elimina una o varias relaciones lot-crop."""
        claims = get_jwt()
        if lot_crop_id and lot_crop_ids:
            raise BadRequest("Solo se puede especificar lot_crop_id o lot_crop_ids, no ambos.")
        
        if lot_crop_id:
            lot_crop = LotCrop.query.get_or_404(lot_crop_id)
            if not self._has_access(lot_crop, claims):
                raise Forbidden("You do not have access to this lot-crop.")
            db.session.delete(lot_crop)
            db.session.commit()
            return jsonify({"message": "LotCrop deleted successfully"}), 200
        
        if lot_crop_ids:
            deleted_lot_crops = []
            for lc_id in lot_crop_ids:
                lot_crop = LotCrop.query.get(lc_id)
                if not lot_crop:
                    continue
                if not self._has_access(lot_crop, claims):
                    continue
                db.session.delete(lot_crop)
                deleted_lot_crops.append(f"LotCrop {lot_crop.id}")
            db.session.commit()
            if deleted_lot_crops:
                deleted_str = ", ".join(deleted_lot_crops)
                return jsonify({"message": f"LotCrops {deleted_str} deleted successfully"}), 200
            return jsonify({"error": "No lot-crops were deleted due to permission restrictions"}), 403

    def _has_access(self, lot_crop, claims):
        """Verifica si el usuario actual tiene acceso al recurso."""
        return check_resource_access(lot_crop, claims)

    def _serialize_lot_crop(self, lot_crop):
        """Serializa un objeto LotCrop a un diccionario."""
        return {
            "id": lot_crop.id,
            "lot_id": lot_crop.lot_id,
            "lot_name": lot_crop.lot.name if lot_crop.lot else "",
            "crop_id": lot_crop.crop_id,
            "crop_name": lot_crop.crop.name if lot_crop.crop else "",
            "farm_id": lot_crop.lot.farm_id,
            "farm_name": lot_crop.lot.farm.name if lot_crop.lot.farm else "",
            "start_date": lot_crop.start_date.isoformat(),
            "end_date": lot_crop.end_date.isoformat() if lot_crop.end_date else None,
            "created_at": lot_crop.created_at.isoformat(),
            "updated_at": lot_crop.updated_at.isoformat(),
            "organization_id": lot_crop.lot.farm.org_id if lot_crop.lot and lot_crop.lot.farm else None
        }

# Vista para análisis de foliar (leaf_analyses)
# 👌
class LeafAnalysisView(MethodView):
    """Clase para gestionar operaciones CRUD sobre análisis de hojas con valores de nutrientes."""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, leaf_analysis_id=None):
        """
        Obtiene una lista de análisis de hojas o un análisis de hoja específico.
        Args:
            leaf_analysis_id (int, optional): ID del análisis de hoja a consultar.
        Returns:
            JSON: Lista de análisis de hojas o detalles de un análisis de hoja específico.
        """
        filter_by = request.args.get("filter_by")
        if filter_by:
            filter_by = int(filter_by)
            return self._get_leaf_analysis_list(filter_by=filter_by)
        
        if leaf_analysis_id:
            return self._get_leaf_analysis(leaf_analysis_id)
        return self._get_leaf_analysis_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Crea un nuevo análisis de hoja con valores de nutrientes.
        Expected JSON data:
            {
                "common_analysis_id": int,
                "nutrient_values": {"nutrient_<id>": float, ...} (e.g., "nutrient_1": 10.5)
            }
        Returns:
            JSON: Detalles del análisis de hoja creado.
        """
        data = request.get_json()
        required_fields = ["common_analysis_id"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields: common_analysis_id.")
        return self._create_leaf_analysis(data)

    @check_permission(resource_owner_check=True)
    def put(self, id):
        """
        Actualiza un análisis de hoja existente.
        Args:
            leaf_analysis_id (int): ID del análisis de hoja a actualizar.
        Expected JSON data: Same as POST, con campos opcionales.
        Returns:
            JSON: Detalles del análisis de hoja actualizado.
        """
        data = request.get_json()
        leaf_analysis_id = id

        if not data or not leaf_analysis_id:
            raise BadRequest("Missing leaf_analysis_id or data.")
        return self._update_leaf_analysis(leaf_analysis_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Elimina un análisis de hoja existente.
        Args:
            leaf_analysis_id (int): ID del análisis de hoja a eliminar.
        Returns:
            JSON: Mensaje de confirmación.
        """
        leaf_analysis_id = id
        if not leaf_analysis_id:
            raise BadRequest("Missing leaf_analysis_id.")
        return self._delete_leaf_analysis(leaf_analysis_id)

    # Métodos auxiliares
    def _get_leaf_analysis_list(self, filter_by=None):
        """Obtiene una lista de todos los análisis de hojas según el rol del usuario y el filtro por finca."""
        claims = get_jwt()
        user_role = claims.get("rol")
        leaf_analyses = []
        
        if user_role == RoleEnum.ADMINISTRATOR.value:
            query = LeafAnalysis.query.join(CommonAnalysis, LeafAnalysis.common_analysis_id == CommonAnalysis.id)
            query = query.join(Lot, CommonAnalysis.lot_id == Lot.id)
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(reseller_id=claims.get("org_id")).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            query = LeafAnalysis.query.join(CommonAnalysis, LeafAnalysis.common_analysis_id == CommonAnalysis.id)
            query = query.join(Lot, CommonAnalysis.lot_id == Lot.id)
            query = query.join(Farm, Lot.farm_id == Farm.id)
            query = query.join(Organization, Farm.org_id == Organization.id)
            query = query.filter(Organization.id.in_(reseller_package.organization_ids))
        else:
            raise Forbidden("Only administrators and resellers can list leaf analyses.")
            
        if filter_by:
            query = query.filter(Lot.farm_id == filter_by)
            
        leaf_analyses = query.all()
        response_data = [
            self._serialize_leaf_analysis(leaf_analysis)
            for leaf_analysis in leaf_analyses
        ]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_leaf_analysis(self, leaf_analysis_id):
        """Obtiene los detalles de un análisis de hoja específico."""
        leaf_analysis = LeafAnalysis.query.get_or_404(leaf_analysis_id)
        claims = get_jwt()
        if not self._has_access(leaf_analysis, claims):
            raise Forbidden("You do not have access to this leaf analysis.")
        response_data = self._serialize_leaf_analysis(leaf_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_leaf_analysis(self, data):
        """Crea un nuevo análisis de hoja con valores de nutrientes."""
        common_analysis_id = data["common_analysis_id"]

        # Validar que common_analysis_id existe
    
        common_analysis = CommonAnalysis.query.get(common_analysis_id)
        if not common_analysis:
            raise BadRequest("Invalid common_analysis_id.")

        # Crear el nuevo análisis foliar
        new_leaf_analysis = LeafAnalysis(common_analysis_id=common_analysis_id)
        db.session.add(new_leaf_analysis)
        db.session.flush()  # Asegura que el ID esté disponible

        # Manejar valores de nutrientes
        nutrient_values = {k: v for k, v in data.items() if k.startswith("nutrient_")}
        for key, value in nutrient_values.items():
            nutrient_id = int(key.split("_")[1])
            nutrient = Nutrient.query.get(nutrient_id)
            if not nutrient:
                raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
            try:
                nutrient_value = float(value)
                if nutrient_value < 0:
                    raise BadRequest(f"Value for {nutrient.name} must be non-negative.")
                insert_stmt = leaf_analysis_nutrients.insert().values(
                    leaf_analysis_id=new_leaf_analysis.id,
                    nutrient_id=nutrient_id,
                    value=nutrient_value,
                    created_at=datetime.utcnow()
                )
                db.session.execute(insert_stmt)
            except ValueError:
                raise BadRequest(f"Invalid numeric value for {nutrient.name}: '{value}'")

        db.session.commit()
        response_data = self._serialize_leaf_analysis(new_leaf_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_leaf_analysis(self, leaf_analysis_id, data):
        """Actualiza un análisis de hoja existente."""
        leaf_analysis = LeafAnalysis.query.get_or_404(leaf_analysis_id)

        # Actualizar common_analysis_id si está presente
        if "common_analysis_id" in data:

            common_analysis = CommonAnalysis.query.get(data["common_analysis_id"])
            if not common_analysis:
                raise BadRequest("Invalid common_analysis_id.")
            leaf_analysis.common_analysis_id = data["common_analysis_id"]

        # Manejar valores de nutrientes si están presentes
        nutrient_values = {k: v for k, v in data.items() if k.startswith("nutrient_")}
        if nutrient_values:
            # Eliminar valores de nutrientes existentes
            db.session.query(leaf_analysis_nutrients).filter_by(
                leaf_analysis_id=leaf_analysis.id
            ).delete()
            # Agregar nuevos valores de nutrientes
            for key, value in nutrient_values.items():
                nutrient_id = int(key.split("_")[1])
                nutrient = Nutrient.query.get(nutrient_id)
                if not nutrient:
                    raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
                try:
                    nutrient_value = float(value)
                    if nutrient_value < 0:
                        raise BadRequest(f"Value for {nutrient.name} must be non-negative.")
                    insert_stmt = leaf_analysis_nutrients.insert().values(
                        leaf_analysis_id=leaf_analysis.id,
                        nutrient_id=nutrient_id,
                        value=nutrient_value,
                        created_at=datetime.utcnow()
                    )
                    db.session.execute(insert_stmt)
                except ValueError:
                    raise BadRequest(f"Invalid numeric value for {nutrient.name}: '{value}'")

        db.session.commit()
        response_data = self._serialize_leaf_analysis(leaf_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_leaf_analysis(self, leaf_analysis_id):
        """Elimina un análisis de hoja."""
        leaf_analysis = LeafAnalysis.query.get_or_404(leaf_analysis_id)
        db.session.delete(leaf_analysis)
        db.session.commit()
        return jsonify({"message": "Leaf analysis deleted successfully"}), 200

    def _has_access(self, leaf_analysis, claims):
        """Verifica si el usuario actual tiene acceso al análisis de hoja."""
        return check_resource_access(leaf_analysis, claims)
    
    def _serialize_leaf_analysis(self, leaf_analysis):
        """Serializa un objeto LeafAnalysis a un diccionario."""
        nutrient_values = (
            db.session.query(leaf_analysis_nutrients)
            .filter_by(leaf_analysis_id=leaf_analysis.id)
            .all()
        )
        analysis_dict = {
            "id": leaf_analysis.id,
            "common_analysis_id": leaf_analysis.common_analysis_id,
            "farm_name": leaf_analysis.common_analysis.farm_name,
            "lot_name": leaf_analysis.common_analysis.lot_name,
            "created_at": leaf_analysis.created_at.isoformat(),
            "updated_at": leaf_analysis.updated_at.isoformat(),
            "nutrients_info": {  # Nueva clave para los detalles de los nutrientes
                str(nv.nutrient_id): {
                    "name": Nutrient.query.get(nv.nutrient_id).name,
                    "symbol": Nutrient.query.get(nv.nutrient_id).symbol,
                    "unit": Nutrient.query.get(nv.nutrient_id).unit,
                }
                for nv in nutrient_values
            }
        }
        # Aplanar los valores de los nutrientes directamente en el diccionario
        for nv in nutrient_values:
            analysis_dict[f"nutrient_{nv.nutrient_id}"] = nv.value
        return analysis_dict

# 👌
class SoilAnalysisView(MethodView):
    """Class to manage CRUD operations for soil analyses"""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, soil_analysis_id=None):
        """
        Retrieve a list of soil analyses or a specific soil analysis
        Args:
            soil_analysis_id (int, optional): ID of the soil analysis to retrieve
        Returns:
            JSON: List of soil analyses or details of a specific soil analysis
        """

        if soil_analysis_id:
            return self._get_soil_analysis(soil_analysis_id)
        filter_value = request.args.get("filter_value")
        if filter_value:
            filter_value = int(filter_value)
            return self._get_soil_analysis_list(filter_by=filter_value)
        else:
            return self._get_soil_analysis_list()
        
        
    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Create a new soil analysis
        Returns:
            JSON: Details of the created soil analysis
        """
        data = request.get_json()
        required_fields = ["common_analysis_id", "energy", "grazing"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields")
        return self._create_soil_analysis(data)

    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Update an existing soil analysis
        Args:
            soil_analysis_id (int): ID of the soil analysis to update
        Returns:
            JSON: Details of the updated soil analysis
        """
        data = request.get_json()
        soil_analysis_id = id
        if not data or not soil_analysis_id:
            raise BadRequest("Missing soil_analysis_id or data")
        return self._update_soil_analysis(soil_analysis_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Delete an existing soil analysis
        Args:
            soil_analysis_id (int): ID of the soil analysis to delete
        Returns:
            JSON: Confirmation message
        """
        soil_analysis_id = id
        if not soil_analysis_id:
            raise BadRequest("Missing soil_analysis_id")
        return self._delete_soil_analysis(soil_analysis_id)

    # Helper Methods
    def _get_soil_analysis_list(self, filter_by=None):
        """Retrieve a list of all soil analyses"""
        claims = get_jwt()
        user_role = claims.get("rol")
        soil_analyses = []
        
        if user_role == RoleEnum.ADMINISTRATOR.value:
            query = SoilAnalysis.query.join(CommonAnalysis, SoilAnalysis.common_analysis_id == CommonAnalysis.id)
            query = query.join(Lot, CommonAnalysis.lot_id == Lot.id)
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(reseller_id=claims.get("org_id")).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            query = SoilAnalysis.query.join(CommonAnalysis, SoilAnalysis.common_analysis_id == CommonAnalysis.id)
            query = query.join(Lot, CommonAnalysis.lot_id == Lot.id)
            query = query.join(Farm, Lot.farm_id == Farm.id)
            query = query.join(Organization, Farm.org_id == Organization.id)
            query = query.filter(Organization.id.in_(reseller_package.organization_ids))
        else:
            raise Forbidden("Only administrators and resellers can list soil analyses")
            
        if filter_by:
            query = query.filter(Lot.farm_id == filter_by)
            
        soil_analyses = query.all()
        response_data = [self._serialize_soil_analysis(sa) for sa in soil_analyses]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_soil_analysis(self, soil_analysis_id):
        """Retrieve details of a specific soil analysis"""
        soil_analysis = SoilAnalysis.query.get_or_404(soil_analysis_id)
        claims = get_jwt()
        if not self._has_access(soil_analysis, claims):
            raise Forbidden("You do not have access to this soil analysis")
        response_data = self._serialize_soil_analysis(soil_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_soil_analysis(self, data):
        """Create a new soil analysis"""
        common_analysis_id = data["common_analysis_id"]
        energy = data["energy"]
        grazing = data["grazing"]
        soil_analysis = SoilAnalysis(
            common_analysis_id=common_analysis_id, energy=energy, grazing=grazing
        )
        db.session.add(soil_analysis)
        db.session.commit()
        response_data = self._serialize_soil_analysis(soil_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_soil_analysis(self, soil_analysis_id, data):
        """Update an existing soil analysis"""
        soil_analysis = SoilAnalysis.query.get_or_404(soil_analysis_id)
        if "energy" in data:
            soil_analysis.energy = data["energy"]
        if "grazing" in data:
            soil_analysis.grazing = data["grazing"]
        db.session.commit()
        response_data = self._serialize_soil_analysis(soil_analysis)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_soil_analysis(self, soil_analysis_id):
        """Delete an existing soil analysis"""
        soil_analysis = SoilAnalysis.query.get_or_404(soil_analysis_id)
        db.session.delete(soil_analysis)
        db.session.commit()
        return jsonify({"message": "Soil analysis deleted successfully"}), 200

    def _has_access(self, soil_analysis, claims):
        """Check if the current user has access to the soil analysis"""
        return check_resource_access(soil_analysis, claims)

    def _serialize_soil_analysis(self, soil_analysis):
        """Serialize a SoilAnalysis object to a dictionary"""
        return {
            "id": soil_analysis.id,
            "common_analysis_id": soil_analysis.common_analysis_id,
            "energy": soil_analysis.energy,
            "grazing": soil_analysis.grazing,
            "created_at": soil_analysis.created_at.isoformat(),
            "updated_at": soil_analysis.updated_at.isoformat(),
        }

# Vista para aplicaciones de nutrientes (nutrient_applications)
class NutrientApplicationView(MethodView):
    """Class to manage CRUD operations for nutrient applications"""
    decorators = [jwt_required()]
    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, nutrient_application_id=None):
        """
        Obtiene una lista de aplicaciones de nutrientes o una aplicación de nutriente específico.
        Args:
            nutrient_application_id (str, optional): ID de la aplicación de nutriente a consultar.
        Returns:
            JSON: Lista de aplicaciones de nutrientes o detalles de una aplicación de nutriente específico.
        """
        if nutrient_application_id:
            return self._get_nutrient_application(nutrient_application_id)
        filter_by = request.args.get('filter_by', None)
        if filter_by:
            filter_by = int(filter_by)
        return self._get_nutrient_application_list(filter_by=filter_by)
    
    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Create a new nutrient application with nutrient quantities.
        Expected JSON data:
            {
                "lot_id": int,
                "date": str (YYYY-MM-DD),
                "nutrient_quantities": {"nutrient_<id>": float, ...} (e.g., "nutrient_1": 10.5)
            }
        Returns:
            JSON: Details of the created nutrient application.
        """
        data = request.get_json()
        required_fields = ["lot_id", "date"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields: lot_id and date.")
        return self._create_nutrient_application(data)
    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Update an existing nutrient application.
        Args:
            nutrient_application_id (int): ID of the nutrient application to update.
        Expected JSON data: Same as POST, with optional fields.
        Returns:
            JSON: Details of the updated nutrient application.
        """
        data = request.get_json()
        nutrient_application_id = id
        if not data or not nutrient_application_id:
            raise BadRequest("Missing nutrient_application_id or data.")
        return self._update_nutrient_application(nutrient_application_id, data)
    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Delete an existing nutrient application.
        Args:
            nutrient_application_id (int): ID of the nutrient application to delete.
        Returns:
            JSON: Confirmation message.
        """
        nutrient_application_id = id
        if not nutrient_application_id:
            raise BadRequest("Missing nutrient_application_id.")
        return self._delete_nutrient_application(nutrient_application_id)
    # Helper Methods
    def _get_nutrient_application_list(self, filter_by=None):
        """
        Retrieve a list of all nutrient applications based on user role
        Args:
            filter_by (int): Filtro por ID de finca.
        Returns:
            Response: Lista de nutrient applications en formato JSON.
        """
        claims = get_jwt()
        user_role = claims.get("rol")
        nutrient_applications = []  # Lista de nutrient applications que se devolverá

        if user_role == RoleEnum.ADMINISTRATOR.value:
            query = (
                NutrientApplication.query
                .join(Lot, NutrientApplication.lot_id == Lot.id)
                .join(Farm, Lot.farm_id == Farm.id)
            )
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            query = (
                NutrientApplication.query
                .join(Lot, NutrientApplication.lot_id == Lot.id)
                .join(Farm, Lot.farm_id == Farm.id)
                .join(Organization, Farm.org_id == Organization.id)
                .filter(Organization.id.in_(reseller_package.organization_ids))
            )
        else:
            raise Forbidden("Only administrators and resellers can list nutrient applications.")

        if filter_by:
            query = query.filter(Lot.farm_id == filter_by)

        nutrient_applications = query.all()
        response_data = [
            self._serialize_nutrient_application(nutrient_application)
            for nutrient_application in nutrient_applications
        ]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    
    def _get_nutrient_application(self, nutrient_application_id):
        """Retrieve details of a specific nutrient application"""
        nutrient_application = NutrientApplication.query.get_or_404(nutrient_application_id)
        claims = get_jwt()
        if not self._has_access(nutrient_application, claims):
            raise Forbidden("You do not have access to this nutrient application.")
        response_data = self._serialize_nutrient_application(nutrient_application)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    def _create_nutrient_application(self, data):
        """Create a new nutrient application with nutrient quantities"""
        lot_id = data["lot_id"]
        date = datetime.strptime(data["date"], "%Y-%m-%d")
        # Validate lot exists
        lot = Lot.query.get(lot_id)
        if not lot:
            raise BadRequest("Invalid lot ID.")
        new_nutrient_application = NutrientApplication(
            date=date, lot_id=lot_id
        )
        db.session.add(new_nutrient_application)
        db.session.flush()  # Ensure new_nutrient_application.id is available
        # Handle nutrient quantities
        nutrient_quantities = {k: v for k, v in data.items() if k.startswith("nutrient_")}
        for key, value in nutrient_quantities.items():
            nutrient_id = int(key.split("_")[1])
            nutrient = Nutrient.query.get(nutrient_id)
            if not nutrient:
                raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
            try:
                quantity_float = float(value)  # Convert to float
                if quantity_float <= 0:
                    raise BadRequest(
                        f"Quantity for {nutrient.name} must be positive."
                    )
                insert_stmt = nutrient_application_nutrients.insert().values(
                    nutrient_application_id=new_nutrient_application.id,
                    nutrient_id=nutrient_id,
                    quantity=quantity_float,
                )
                db.session.execute(insert_stmt)
            except ValueError:
                raise BadRequest(
                    f"Quantity for {nutrient.name} must be a valid number."
                )
        db.session.commit()
        response_data = self._serialize_nutrient_application(new_nutrient_application)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")
    def _update_nutrient_application(self, nutrient_application_id, data):
        """Update an existing nutrient application"""
        nutrient_application = NutrientApplication.query.get_or_404(nutrient_application_id)
        # Update main fields if provided
        if "lot_id" in data:
            lot = Lot.query.get(data["lot_id"])
            if not lot:
                raise BadRequest("Invalid lot ID.")
            nutrient_application.lot_id = data["lot_id"]
        if "date" in data:
            nutrient_application.date = datetime.strptime(data["date"], "%Y-%m-%d")
        # Handle nutrient quantities if provided
        nutrient_quantities = {k: v for k, v in data.items() if k.startswith("nutrient_")}
        if nutrient_quantities:
            # Delete existing nutrient quantities
            db.session.query(nutrient_application_nutrients).filter_by(
                nutrient_application_id=nutrient_application.id
            ).delete()
            # Add new nutrient quantities
            for key, value in nutrient_quantities.items():
                nutrient_id = int(key.split("_")[1])
                nutrient = Nutrient.query.get(nutrient_id)
                if not nutrient:
                    raise BadRequest(f"Invalid nutrient ID: {nutrient_id}")
                # Convert value to float (or int) and validate
                try:
                    quantity_float = float(
                        value
                    )  # Use float to handle decimal values; use int if only integers are expected
                    if quantity_float <= 0:
                        raise BadRequest(
                            f"Quantity for {nutrient.name} must be positive."
                        )
                    insert_stmt = nutrient_application_nutrients.insert().values(
                        nutrient_application_id=nutrient_application.id,
                        nutrient_id=nutrient_id,
                        quantity=quantity_float,
                    )
                    db.session.execute(insert_stmt)
                except ValueError:
                    raise BadRequest(
                        f"Quantity for {nutrient.name} must be a valid number."
                    )
        db.session.commit()
        response_data = self._serialize_nutrient_application(nutrient_application)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    def _delete_nutrient_application(self, nutrient_application_id):
        """Delete an existing nutrient application"""
        nutrient_application = NutrientApplication.query.get_or_404(nutrient_application_id)
        db.session.delete(nutrient_application)
        db.session.commit()
        return jsonify({"message": "Nutrient application deleted successfully"}), 200
    def _has_access(self, nutrient_application, claims):
        """Check if the current user has access to the nutrient application"""
        return check_resource_access(nutrient_application, claims)
        
    def _serialize_nutrient_application(self, nutrient_application):
        """Serialize a NutrientApplication object to a dictionary"""
        nutrient_quantities = (
            db.session.query(nutrient_application_nutrients)
            .filter_by(nutrient_application_id=nutrient_application.id)
            .all()
        )
        nutrient_quantities_dict = [
            {
                "nutrient_id": quantity.nutrient_id,
                "quantity": quantity.quantity,
                "nutrient_name": Nutrient.query.get(quantity.nutrient_id).name,
                "nutrient_symbol": Nutrient.query.get(quantity.nutrient_id).symbol,
                "nutrient_unit": Nutrient.query.get(quantity.nutrient_id).unit,
            }
            for quantity in nutrient_quantities
        ]
        return {
            "id": nutrient_application.id,
            "lot_id": nutrient_application.lot_id,
            "lot_name": nutrient_application.lot.name,
            "farm_name": nutrient_application.lot.farm.name,
            "organization_name": nutrient_application.lot.farm.organization.name,
            "date": nutrient_application.date.isoformat(),
            "created_at": nutrient_application.created_at.isoformat(),
            "updated_at": nutrient_application.updated_at.isoformat(),
            "nutrient_quantities": nutrient_quantities_dict,
        }



class ProductionView(MethodView):
    """Class to manage CRUD operations for productions"""
    decorators = [jwt_required()]
    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, production_id=None):
        """
        Retrieve a list of productions or a specific production
        Args:
            production_id (int, optional): ID of the production to retrieve
        Returns:
            JSON: List of productions or details of a specific production
        """
        if production_id:
            return self._get_production(production_id)
        return self._get_production_list()
    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Create a new production
        Returns:
            JSON: Details of the created production
        """
        data = request.get_json()
        required_fields = [
            "lot_id", "date", "area", "production_kg", "bags", "harvest", 
            "month", "variety", "price_per_kg", "protein_65dde", "discount"
        ]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields")
        return self._create_production(data)
    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Update an existing production
        Args:
            production_id (int): ID of the production to update
        Returns:
            JSON: Details of the updated production
        """
        data = request.get_json()
        production_id = id
        if not data or not production_id:
            raise BadRequest("Missing production_id or data")
        return self._update_production(production_id, data)
    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Delete an existing production
        Args:
            production_id (int): ID of the production to delete
        Returns:
            JSON: Confirmation message
        """
        production_id = id
        if not production_id:
            raise BadRequest("Missing production_id")
        return self._delete_production(production_id)
    # Helper Methods
    def _get_production_list(self):
        """Retrieve a list of all productions"""
        claims = get_jwt()
        user_role = claims.get("rol")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            productions = Production.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            productions = []
            for organization in reseller_package.organizations:
                for lot in organization.lots:
                    productions.extend(lot.productions)
        else:
            raise Forbidden("Only administrators and resellers can list productions")
        response_data = [self._serialize_production(p) for p in productions]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    def _get_production(self, production_id):
        """Retrieve details of a specific production"""
        production = Production.query.get_or_404(production_id)
        claims = get_jwt()
        if not self._has_access(production, claims):
            raise Forbidden("You do not have access to this production")
        response_data = self._serialize_production(production)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    def _create_production(self, data):
        """Create a new production"""
        production = Production(
            lot_id=data["lot_id"],
            date=data["date"],
            area=data["area"],
            production_kg=data["production_kg"],
            bags=data["bags"],
            harvest=data["harvest"],
            month=data["month"],
            variety=data["variety"],
            price_per_kg=data["price_per_kg"],
            protein_65dde=data["protein_65dde"],
            discount=data["discount"]
        )
        db.session.add(production)
        db.session.commit()
        response_data = self._serialize_production(production)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")
    def _update_production(self, production_id, data):
        """Update an existing production"""
        production = Production.query.get_or_404(production_id)
        if "date" in data:
            production.date = data["date"]
        if "area" in data:
            production.area = data["area"]
        if "production_kg" in data:
            production.production_kg = data["production_kg"]
        if "bags" in data:
            production.bags = data["bags"]
        if "harvest" in data:
            production.harvest = data["harvest"]
        if "month" in data:
            production.month = data["month"]
        if "variety" in data:
            production.variety = data["variety"]
        if "price_per_kg" in data:
            production.price_per_kg = data["price_per_kg"]
        if "protein_65dde" in data:
            production.protein_65dde = data["protein_65dde"]
        if "discount" in data:
            production.discount = data["discount"]
        db.session.commit()
        response_data = self._serialize_production(production)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")
    def _delete_production(self, production_id):
        """Delete an existing production"""
        production = Production.query.get_or_404(production_id)
        db.session.delete(production)
        db.session.commit()
        return jsonify({"message": "Production deleted successfully"}), 200
    def _has_access(self, production, claims):
        """Check if the current user has access to the production"""
        return check_resource_access(production, claims)
        
    def _serialize_production(self, production):
        """Serialize a Production object to a dictionary"""
        return {
            "id": production.id,
            "lot_id": production.lot_id,
            "farm_name": production.lot.farm.name,
            "organization_name": production.lot.farm.organization.name,
            "lot_name": production.lot.name,
            "date": production.date.isoformat(),
            "area": production.area,
            "production_kg": production.production_kg,
            "bags": production.bags,
            "harvest": production.harvest,
            "month": production.month,
            "variety": production.variety,
            "price_per_kg": production.price_per_kg,
            "protein_65dde": production.protein_65dde,
            "discount": production.discount,
            "created_at": production.created_at.isoformat(),
            "updated_at": production.updated_at.isoformat(),
        }


```

=== File: ./modules/__init__.py ===
```python

```

=== File: ./modules/foliage_report/api_routes.py ===
```python
from . import foliage_report_api as api
from .helpers import ReportView
from app.core.controller import login_required, check_resource_access
from app.core.models import Organization
from flask import jsonify, request
from flask_jwt_extended import get_jwt
from app.modules.foliage.models import Farm, Lot, CommonAnalysis, Nutrient
from app.extensions import db
from datetime import datetime


report_view = ReportView.as_view("report_view")
api.add_url_rule("/report/<int:id>", view_func=report_view, methods=["GET"])


@api.route('/prueba', methods=['GET'])
def get_prueba():
    atributos = dir(request)
    atributos_str = '<br>'.join(atributos)

    return f'Métdos y atributos del objeto request: <br>{atributos_str} <br>Se encuentra activado el modo debug'


@api.route('/get-farms')
@login_required
def get_farms():
    claims = get_jwt()
    
    # Obtener todas las fincas que el usuario puede visualizar
    farms = Farm.query.join(Organization).filter(
        check_resource_access(Farm, claims)
    ).all()
    
    return jsonify([
        {'id': farm.id, 'name': farm.name} 
        for farm in farms
    ])

@api.route('/get-lots/')
@login_required
def get_lots():
    claims = get_jwt()
    farm_id = request.args.get('farm_id')
    farm = Farm.query.get_or_404(farm_id)
    
    # Verificar si el usuario tiene acceso a esta finca
    if not check_resource_access(farm, claims):
        return jsonify({'error': 'No tienes acceso a esta finca'}), 403
        
    lots = Lot.query.filter_by(farm_id=farm_id).all()
    
    return jsonify([
        {'id': lot.id, 'name': lot.name} 
        for lot in lots
    ])

@api.route('/analyses')
@login_required
def get_analyses():
    claims = get_jwt()
    farm_id = request.args.get('farm_id')
    lot_id = request.args.get('lot_id')
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    # Construir la query con relaciones eager loading
    query = CommonAnalysis.query.options(
        db.joinedload(CommonAnalysis.soil_analysis),
        db.joinedload(CommonAnalysis.leaf_analysis),
        db.joinedload(CommonAnalysis.lot).joinedload(Lot.farm)
    )
    
    # Aplicar filtros
    if farm_id:
        query = query.filter(CommonAnalysis.lot.has(Lot.farm_id == farm_id))
        
    if lot_id:
        query = query.filter(CommonAnalysis.lot_id == lot_id)
        
    if start_date and end_date:
        try:
            start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
            end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
            query = query.filter(CommonAnalysis.date.between(start_date, end_date))
        except ValueError:
            return jsonify({'error': 'Formato de fecha incorrecto'}), 400
    
    # Obtener resultados
    common_analyses = query.all()
    
    # Preparar la respuesta
    analyses = []
    for common_analysis in common_analyses:
        soil_analysis = common_analysis.soil_analysis
        leaf_analysis = common_analysis.leaf_analysis
        
        analysis_data = {
            'id': common_analysis.id,
            'date': common_analysis.date.strftime('%Y-%m-%d'),
            'lot': {
                'id': common_analysis.lot.id,
                'name': common_analysis.lot.name,
                'farm': {
                    'id': common_analysis.lot.farm.id,
                    'name': common_analysis.lot.farm.name
                }
            },
            'soil_analysis': {
                'energy': soil_analysis.energy if soil_analysis else None,
                'grazing': soil_analysis.grazing if soil_analysis else None
            },
            'leaf_analysis': {
                'nutrients': [
                    {
                        'nutrient_id': nutrient.id,
                        'value': nutrient.value,
                        'nutrient_name': nutrient.nutrient.name if nutrient.nutrient else None
                    } for nutrient in (leaf_analysis.nutrients if leaf_analysis else [])
                ]
            }
        }
        analyses.append(analysis_data)
    
    return jsonify(analyses)
```

=== File: ./modules/foliage_report/__init__.py ===
```python
from flask import Blueprint

foliage_report = Blueprint(
    "foliage_report", __name__, url_prefix="/dashboard/foliage_report", template_folder="templates"
)
foliage_report_api = Blueprint(
    "foliage_report_api", __name__, url_prefix="/api/foliage/report"
    )

from . import web_routes, api_routes
```

=== File: ./modules/foliage_report/web_routes.py ===
```python
import json 
from decimal import Decimal

from flask import render_template, url_for, request

from . import foliage_report as web
from .helpers import calcular_cv_nutriente, determinar_coeficientes_variacion, contribuciones_de_producto, ObjectiveResource, LeafAnalysisResource, NutrientOptimizer
from app.modules.foliage.models import Recommendation
from app.core.controller import login_required, check_resource_access

def get_dashboard_menu():
    """Define el menu superior en los templates"""
    return {
        "menu": [
            {"name": "Home", "url": url_for("core.index")},
            {"name": "Logout", "url": url_for("core.logout")},
            {"name": "Profile", "url": url_for("core.profile")},
        ]
    }


@web.route("listar_reportes")
@login_required
def listar_reportes():
    context = {
        "dashboard": True,
        "title": "Informes de Análisis - TecnoAgro",
        "description": "Panel de control.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "og_image": "/img/og-image.jpg",
        "twitter_image": "/img/twitter-image.jpg",
        "data_menu": get_dashboard_menu(),
    }
    reports = True
    reportes = Recommendation.query.all()
    # contar registros en reportes
    count = len(reportes)
    
    total_informes = count
    items = {}
    return render_template("listar_reportes.j2", **context, reports=reports, request=request, total_informes=total_informes, items=items)






@web.route("/vista_reporte")
@login_required
def vista_reporte():
    context = {
        "dashboard": True,
        "title": "Dashboard TecnoAgro",
        "description": "Panel de control.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "og_image": "/img/og-image.jpg",
        "twitter_image": "/img/twitter-image.jpg",
        "data_menu": get_dashboard_menu(),
    }

    analysisData = {
        "common": {
            "id": 3,
            "fechaAnalisis": "2025-03-26",
            "finca": "El nuevo rocío",
            "lote": "Lote 1",
            "proteinas": 6.0,
            "descanso": 5.0,
            "diasDescanso": 5,
            "mes": 5,
        },
        "foliar": {
            "id": 1,
            "nitrogeno": 2.5,
            "fosforo": 0.3,
            "potasio": 1.8,
            "calcio": 1.2,
            "magnesio": 0.4,
            "azufre": 0.2,
            "hierro": 85,
            "manganeso": 45,
            "zinc": 18,
            "cobre": 6,
            "boro": 25,
        },
        "soil": {
            "id": 1,
            "ph": 6.5,
            "materiaOrganica": 3.2,
            "nitrogeno": 0.15,
            "fosforo": 12,
            "potasio": 180,
            "calcio": 1200,
            "magnesio": 180,
            "azufre": 15,
            "textura": "Franco-arcillosa",
            "cic": 15.2,
        },
    }
    
    optimalLevels = {
        "foliar": {
            "nitrogeno": {"min": 2.8, "max": 3.5},
            "fosforo": {"min": 0.2, "max": 0.4},
            "potasio": {"min": 2.0, "max": 3.0},
            "calcio": {"min": 1.0, "max": 2.0},
            "magnesio": {"min": 0.3, "max": 0.6},
            "azufre": {"min": 0.2, "max": 0.4},
            "hierro": {"min": 50, "max": 150},
            "manganeso": {"min": 25, "max": 100},
            "zinc": {"min": 20, "max": 50},
            "cobre": {"min": 5, "max": 15},
            "boro": {"min": 20, "max": 50},
        },
        "soil": {
            "ph": {"min": 6.0, "max": 7.0},
            "materiaOrganica": {"min": 3.0, "max": 5.0},
            "nitrogeno": {"min": 0.15, "max": 0.25},
            "fosforo": {"min": 15, "max": 30},
            "potasio": {"min": 150, "max": 250},
            "calcio": {"min": 1000, "max": 2000},
            "magnesio": {"min": 150, "max": 300},
            "azufre": {"min": 10, "max": 20},
            "cic": {"min": 12, "max": 25},
        },
    }

    foliarChartData = [
        {"name": "N", "actual": analysisData["foliar"]["nitrogeno"], "min": optimalLevels["foliar"]["nitrogeno"]["min"], "max": optimalLevels["foliar"]["nitrogeno"]["max"]},
        {"name": "P", "actual": analysisData["foliar"]["fosforo"], "min": optimalLevels["foliar"]["fosforo"]["min"], "max": optimalLevels["foliar"]["fosforo"]["max"]},
        {"name": "K", "actual": analysisData["foliar"]["potasio"], "min": optimalLevels["foliar"]["potasio"]["min"], "max": optimalLevels["foliar"]["potasio"]["max"]},
        {"name": "Ca", "actual": analysisData["foliar"]["calcio"], "min": optimalLevels["foliar"]["calcio"]["min"], "max": optimalLevels["foliar"]["calcio"]["max"]},
        {"name": "Mg", "actual": analysisData["foliar"]["magnesio"], "min": optimalLevels["foliar"]["magnesio"]["min"], "max": optimalLevels["foliar"]["magnesio"]["max"]},
        {"name": "S", "actual": analysisData["foliar"]["azufre"], "min": optimalLevels["foliar"]["azufre"]["min"], "max": optimalLevels["foliar"]["azufre"]["max"]},
    ]

    soilChartData = [
        {"name": "pH", "actual": analysisData["soil"]["ph"], "min": optimalLevels["soil"]["ph"]["min"], "max": optimalLevels["soil"]["ph"]["max"], "unit": ""},
        {"name": "M.O.", "actual": analysisData["soil"]["materiaOrganica"], "min": optimalLevels["soil"]["materiaOrganica"]["min"], "max": optimalLevels["soil"]["materiaOrganica"]["max"], "unit": "%"},
        {"name": "N", "actual": analysisData["soil"]["nitrogeno"], "min": optimalLevels["soil"]["nitrogeno"]["min"], "max": optimalLevels["soil"]["nitrogeno"]["max"], "unit": "%"},
        {"name": "P", "actual": analysisData["soil"]["fosforo"], "min": optimalLevels["soil"]["fosforo"]["min"], "max": optimalLevels["soil"]["fosforo"]["max"], "unit": "ppm"},
        {"name": "K", "actual": analysisData["soil"]["potasio"], "min": optimalLevels["soil"]["potasio"]["min"], "max": optimalLevels["soil"]["potasio"]["max"], "unit": "ppm"},
        {"name": "CIC", "actual": analysisData["soil"]["cic"], "min": optimalLevels["soil"]["cic"]["min"], "max": optimalLevels["soil"]["cic"]["max"], "unit": "meq/100g"},
    ]

    historicalData = [
        {"fecha": "Ene 2025", "nitrogeno": 2.3, "fosforo": 0.25, "potasio": 1.5},
        {"fecha": "Feb 2025", "nitrogeno": 2.4, "fosforo": 0.28, "potasio": 1.6},
        {"fecha": "Mar 2025", "nitrogeno": 2.5, "fosforo": 0.3, "potasio": 1.8},
    ]

    nutrientNames = {
        "nitrogeno": "Nitrógeno",
        "fosforo": "Fósforo",
        "potasio": "Potasio",
        "calcio": "Calcio",
        "magnesio": "Magnesio",
        "azufre": "Azufre",
        "hierro": "Hierro",
        "manganeso": "Manganeso",
        "zinc": "Zinc",
        "cobre": "Cobre",
        "boro": "Boro",
        "ph": "pH",
        "materiaOrganica": "Materia Orgánica",
        "cic": "CIC",
    }

    def getNutrientStatus(actual, min, max):
        if actual < min:
            return "deficiente"
        if actual > max:
            return "excesivo"
        return "óptimo"

    def getStatusColor(status):
        match status:
            case "deficiente":
                return "text-red-500"
            case "excesivo":
                return "text-yellow-500"
            case "óptimo":
                return "text-green-500"
            case _:
                return ""

    def getStatusIcon(status):
        match status:
            case "deficiente":
                return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>'
            case "excesivo":
                return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-yellow-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>'
            case "óptimo":
                return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-green-500"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>'
            case _:
                return ""

    def findLimitingNutrient():
        limitingNutrient = None
        lowestPercentage = 100

        for nutrient, value in analysisData["foliar"].items():
            if nutrient in optimalLevels["foliar"]:
                min_value = optimalLevels["foliar"][nutrient]["min"]
                max_value = optimalLevels["foliar"][nutrient]["max"]
                optimalMid = (min_value + max_value) / 2
                percentage = (value / optimalMid) * 100
                if percentage < lowestPercentage and percentage < 90:
                    lowestPercentage = percentage
                    limitingNutrient = {
                        "name": nutrient,
                        "value": value,
                        "optimal": optimalMid,
                        "percentage": percentage,
                        "type": "foliar",
                    }

        for nutrient, value in analysisData["soil"].items():
            if nutrient in optimalLevels["soil"] and nutrient != "ph":
                min_value = optimalLevels["soil"][nutrient]["min"]
                max_value = optimalLevels["soil"][nutrient]["max"]
                optimalMid = (min_value + max_value) / 2
                percentage = (value / optimalMid) * 100
                if percentage < lowestPercentage and percentage < 90:
                    lowestPercentage = percentage
                    limitingNutrient = {
                        "name": nutrient,
                        "value": value,
                        "optimal": optimalMid,
                        "percentage": percentage,
                        "type": "soil",
                    }

        return limitingNutrient

    def generateRecommendations():
        recommendations = []

        limitingNutrient = findLimitingNutrient()

        if limitingNutrient:
            nutrientName = nutrientNames[limitingNutrient["name"]] or limitingNutrient["name"]
            recommendations.append({
                "title": f"Corregir deficiencia de {nutrientName}",
                "description": f"El {nutrientName} es el nutriente limitante según la Ley de Liebig. Está al limitingNutrient['percentage']% del nivel óptimo.",
                "priority": "alta",
                "action": "Aplicar fertilizante foliar rico en {nutrientName}" if limitingNutrient["type"] == "foliar" else f"Incorporar {nutrientName} al suelo mediante fertilización",
            })

        phStatus = getNutrientStatus(analysisData["soil"]["ph"], optimalLevels["soil"]["ph"]["min"], optimalLevels["soil"]["ph"]["max"])
        if phStatus != "óptimo":
            recommendations.append({
                "title": "Corregir acidez del suelo" if phStatus == "deficiente" else "Reducir alcalinidad del suelo",
                "description": f"El pH actual ({analysisData['soil']['ph']}) está {'por debajo' if phStatus == 'deficiente' else 'por encima'} del rango óptimo.",
                "priority": "media",
                "action": "Aplicar cal agrícola para elevar el pH" if phStatus == "deficiente" else "Aplicar azufre elemental o materia orgánica para reducir el pH",
            })

        moStatus = getNutrientStatus(analysisData["soil"]["materiaOrganica"], optimalLevels["soil"]["materiaOrganica"]["min"], optimalLevels["soil"]["materiaOrganica"]["max"])
        if moStatus == "deficiente":
            recommendations.append({
                "title": "Aumentar materia orgánica",
                "description": f"El nivel de materia orgánica ({analysisData['soil']['materiaOrganica']}%) está por debajo del óptimo.",
                "priority": "media",
                "action": "Incorporar compost, estiércol bien descompuesto o abonos verdes",
            })

        return recommendations

    limitingNutrient = findLimitingNutrient()
    recommendations = generateRecommendations()

    return render_template('ver_reporte.j2', **context, 
            request=request,  analysisData=analysisData, optimalLevels=optimalLevels, foliarChartData=foliarChartData, soilChartData=soilChartData, historicalData=historicalData, nutrientNames=nutrientNames, limitingNutrient=limitingNutrient, recommendations=recommendations)



@web.route("/solicitar_informe")
@login_required
def generar_informe():
    context = {
        "dashboard": True,
        "title": "Dashboard TecnoAgro",
        "description": "Panel de control.",
        "author": "Johnny De Castro",
        "site_title": "Panel de Control",
        "og_image": "/img/og-image.jpg",
        "twitter_image": "/img/twitter-image.jpg",
        "data_menu": get_dashboard_menu(),
    }
    return render_template("solicitar_informe.j2", **context, request=request)






@web.route("/cv_nutrientes")
@login_required
def cv_nutrientes():
    """
    Página: Renderiza la vista de CV de nutrientes
    """
    # Calcular el CV para cada nutriente en el lote con ID 1
    coeficientes_variacion = determinar_coeficientes_variacion(1)
    productos_contribuciones = contribuciones_de_producto()
    objective_resource = ObjectiveResource()
    response = objective_resource.get_objective_list()
    
    # Obtener demandas ideales para el cultivo de papa
    crop_objectives = response.papa
    demandas_ideales = crop_objectives.get(index=0)
    demandas_ideales_dict = demandas_ideales.nutrient_data  # Already Decimal

    # Obtener análisis de hojas para el lote con ID 1
    leaf_analysis_resource = LeafAnalysisResource()
    response = leaf_analysis_resource.get_leaf_analysis_list()
    data_string = response.get_json()
    data = json.loads(data_string)  
    nutrientes_actuales_raw = data["4"][0]["nutrients"]

    # Convertir los valores de nutrientes_actuales a Decimal
    nutrientes_actuales = {
        nutriente: Decimal(str(valor))  # Convert string to Decimal
        for nutriente, valor in nutrientes_actuales_raw.items()
    }

    # Asegurar que demandas_ideales_dict es un diccionario
    if not isinstance(demandas_ideales_dict, dict):
        raise ValueError("demandas_ideales no es un diccionario")

    # Asegurar que nutrientes_actuales es un diccionario
    if not isinstance(nutrientes_actuales, dict):
        raise ValueError("nutrientes_actuales no es un diccionario")
    
    # Instanciar y usar la clase
    optimizador = NutrientOptimizer(nutrientes_actuales, demandas_ideales_dict, productos_contribuciones, coeficientes_variacion)
    limitante = optimizador.identificar_limitante()
    recomendacion = optimizador.generar_recomendacion(lot_id=1)
    return f"Nutriente limitante: {limitante}\n{recomendacion}"
```

=== File: ./modules/foliage_report/templates/listar_reportes.j2 ===
```jinja-html
{% extends "base.j2" %}
{# identificadores de entidad #}
{% set entity_name = "Usuarios" %}
{% set entity_name_lower = "usuario" %}
{% set show_select_box = False %}

{# Mostrar la grid de ítems #}
{% set table_headers = ["ID", "Título", "Finca / Lote", "Cultivo", "Fecha", "Autor"]%}
{% set item_fields = ["id", "title", "finca_lote", "crop", "date", "autor" ] %}


{# formulario de editar y add #}
{% set form_fields = {
    'username': {'type': 'text', 'label': 'Nombre de usuario', 'required': True, 'disabled_in_edit': True},
    'full_name': {'type': 'text', 'label': 'Nombre completo', 'required': True},
    'email': {'type': 'email', 'label': 'Correo electrónico', 'required': True},
    'role': {'type': 'select', 'label': 'Roles', 'options': {'Administrador': 'administrator', 'Reseller': 'reseller', 'Org Admin': 'org_admin','Org Editor': 'org_editor', 'Usuario Básico': 'org_viewer'}, 'required': True, 'new_value': False},    

    'password': {'type': 'password', 'label': 'Clave', 'required': True},
    'password_confirm': {'type': 'password', 'label': 'Confirmar Clave', 'required': True}
} %}
{% set api_url = url_for('core_api.user_view') %}


{# declaracion de variables #}
{% set dashboard = true %}
{% from "settings/_ui_class.j2" import input_bg_color, 
border_color, hover_bg_color, focus_ring_color, button_bg_color,
delete_button_bg_color, input_focus_bg_color, base_button_classes, 
base_input_classes, table_header_class, table_cell_class %}


{# Macro - > dropdown de acciones #}
{% macro action_dropdown(item_id) %}
<div class="relative inline-block text-left">
    <div>
        <button type="button" class="{{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }}" id="options-menu-{{ item_id }}" aria-haspopup="true" aria-expanded="true" onclick="toggleDropdown('{{ item_id }}')">
            ...
        </button>
    </div>
    <div class="hidden origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg {{ bg_color }} ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 z-[9999] dark:divide-gray-600" role="menu" aria-orientation="vertical" aria-labelledby="options-menu-{{ item_id }}" id="dropdown-{{ item_id }}">
        <div class="py-1" role="none">
            {% if show_view_button %}
            <a href="#" class="{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}" role="menuitem" onclick="showModal('view', '{{ item_id }}')">Ver</a>
            {% endif %}
            <a href="#" class="{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}" role="menuitem" onclick="showModal('edit', '{{ item_id }}')">Editar</a>
            <a href="#" class="{{ text_color }} block px-4 py-2 text-sm {{ hover_bg_color }}" role="menuitem" onclick="showModal('delete', '{{ item_id }}')">Borrar</a>
        </div>
    </div>
</div>
{% endmacro %}


{################## INICIO  MODAL ##################}
{# Macro - > Generador de modales #}
{% macro modal(modal_id, modal_label, modal_content, modal_actions) %}
<div id="{{ modal_id }}" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="{{ modal_id }}Label" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom {{ bg_color }} rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <h3 class="text-lg leading-6 font-medium {{ text_color }}" id="{{ modal_id }}Label">{{ modal_label }}</h3>
                <div class="mt-2">
                    {{ modal_content }}
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse dark:bg-gray-700">
                {{ modal_actions }}
            </div>
        </div>
    </div>
</div>
{% endmacro %}
{################## FIN MODAL ##################}

{% macro info_card(title, value, description) %}
    <div class="bg-gray-50 p-4 rounded-lg shadow text-center">
        <p class="text-lg font-semibold">{{ title }}</p>
        <p class="text-2xl font-bold">{{ value }}</p>
        <p class="text-gray-500">{{ description }}</p>
    </div>
{% endmacro %}

{# Inicio de contenido para el formulario #}
{################# Inicio block content #################}
{% block content %}
{# title #}
<div class="sm:px-6 lg:px-8 flex justify-between items-center mb-0">
    <h1 class="text-2xl mt-0 pt-0 font-bold">{{ title }}</h1>
    {% if reports %}
        <div>
            <button class="bg-blue-600 text-white px-4 py-2 rounded">+ Crear Nuevo Informe</button>
        </div>
    {% endif %}
</div>

{# Contenido genérico de la página crud #}
<div class="mx-auto max-w-8xl pt-0 pb-6 sm:px-6 lg:px-8">
    <div class="px-4 py-2 sm:px-0">
    {# Selector dinámico #}
{% if filter_field %}
<div class="px-0 py-4 bg-white dark:bg-gray-900 flex flex-col sm:flex-row sm:items-end gap-3 w-full max-w-md">
<form action="{{ select_url }}" method="get" class="w-full flex flex-col sm:flex-row gap-3">
        <select id="filter_{{ filter_field }}" name="filter_value" class="flex-grow w-full pl-4 pr-10 py-2.5 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white text-gray-700 dark:bg-gray-800 dark:text-gray-200 dark:border-gray-600 shadow-sm">
            <option value="">Todos</option>
            {% for option in filter_options %}
                <option value="{{ option.id }}" {% if option.id == filter_value %}selected{% endif %}>{{ option.name }}</option>
            {% endfor %}
        </select>
    <button type="submit" class="px-5 py-2.5 rounded-lg font-medium text-sm shadow-sm transition-all duration-200 ease-in-out {{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }}">
        Filtrar
    </button>
</form>
</div>
{% endif %}
{# fin Selector dinámico #}

<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 pb-6">
{{ info_card(title="Total de Informes", value=total_informes, description="Informes almacenados" ) }}
{{ info_card(title="Análisis reciente", value="Último análisis", description="" ) }}
{{ info_card(title="Mi cajilla", value="valor", description="esta descripcion" ) }}
</div>

<div>
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700 border rounded">
                <thead class="{{ bg_color }} dark:bg-gray-900 hidden sm:table-header-group">
                    <tr class="bg-gray-200 dark:bg-gray-900 hidden sm:table-row">
                        {% if show_select_box %}
                        <th scope="col" class="{{ table_header_class }}">
                            <input type="checkbox" id="select-all" onclick="toggleSelectAll()">
                        </th>
                        {% endif %}
                        {% for header in table_headers %}
                        <th scope="col" class="{{ table_header_class }} text-gray-800">
                            {{ header }}
                        </th>
                        {% endfor %}
                        <th scope="col" class="{{ table_header_class }} text-gray-500">
                            Acciones
                        </th>
                    </tr>
                </thead>
                <tbody class="{{ bg_color }} divide-y divide-gray-200 dark:divide-gray-700"
                    id="{{ entity_name_lower }}-table-body">
                    {% for item in items %}
                    <tr class="{{ hover_bg_color }} hidden sm:table-row">
                        {% if show_select_box %}
                        <td class="{{ table_cell_class }} {{ text_color }}">
                            <input type="checkbox" class="item-checkbox" value="{{ item.id }}">
                        </td>
                        {% endif %}
                        {% for field in item_fields %}
                        <td class="{{ table_cell_class }} {{ text_color }}">
                            {% if field == 'active' %}
                                {{ "Activo" if item[field] else "Inactivo" }}
                            {% else %}
                                {{ item[field] }}
                            {% endif %}
                        </td>
                        {% endfor %}
                        <td class="{{ table_cell_class }} font-medium sm:table-cell">
                            {{ action_dropdown(item.id) }}
                        </td>
                    </tr>
    <!-- Vista móvil en formato de tarjeta -->
                <tr class="block sm:hidden border-b p-4">
                    <td class="px-4 py-3">
                        {% if show_select_box %}
                        <input type="checkbox" class="item-checkbox mb-2" value="{{ item.id }}">
                        {% endif %}
                        {% for field in item_fields %}
                        <div class="text-xs text-gray-500">
                            <span class="font-bold">{{ table_headers[loop.index0] }}:</span> 
                            {% if field == 'active' %}
                                {{ "Activo" if item[field] else "Inactivo" }}
                            {% else %}
                                {{ item[field] }}
                            {% endif %}
                        </div>
                        {% endfor %}
                    </td>
                </tr>

                    {% endfor %}
                </tbody>
            </table>
        </div>

    </div>
</div>

{# Contenido del formulario dentro de un modal para crear/editar/ver elementos #}
{################ Formulario que se presenta en los modales ################}
{% set form_content %}
<form id="{{ entity_name_lower }}Form">
    <input type="hidden" id="{{ entity_name_lower }}Id">
    {% for field_name, field_info in form_fields.items() %}
    <div class="mb-4">
        <label for="{{ field_name }}" class="block text-sm font-medium {{ text_color }}">{{ field_info.label }}</label>
        {% if field_info.type == 'select' %}
{# selector variable #}
{% set allowed_new_value = field_info.get('new_value', False) %}

<div class="relative">
    <select id="{{ field_name }}" name="{{ field_name }}"
        class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }} {{ input_focus_bg_color }} {{ focus_ring_color }} {{ text_color }}"
        {% if field_info.required %}required{% endif %} {% if allowed_new_value %} onchange="handleSelectChange(this, '{{ field_name }}')" {% endif %} >
        {% for display, value in field_info.options.items() %}
        <option value="{{ value }}">{{ display }}</option>
        {% endfor %}
        {% if allowed_new_value %} 
        <option value="other">Otro</option>
        {% endif %}
    </select>
    {% if allowed_new_value %}
    <input 
        type="text" 
        id="{{ field_name }}_custom" 
        name="{{ field_name }}_custom" 
        class="mt-2 hidden w-full rounded-md border border-gray-300 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 shadow-sm disabled:bg-gray-100 disabled:cursor-not-allowed" 
        disabled
        placeholder="Especifique otro valor"
    >
    {% endif %}
</div>
{# fin selector variable #}

        {% elif field_info.type == 'radio' %}
        {% for display, value in field_info.options.items() %}
        <div class="flex items-center">
            <input type="radio" id="{{ field_name }}_{{ value }}" name="{{ field_name }}" value="{{ value }}"
                class="{{ base_input_classes }}" {% if field_info.required %}required{% endif %}>
            <label for="{{ field_name }}_{{ value }}" class="ml-2 text-sm {{ text_color }}">{{ display }}</label>
        </div>
        {% endfor %}
        {% elif field_info.type == 'checkbox' %}
        <input type="checkbox" id="{{ field_name }}" name="{{ field_name }}" class="{{ base_input_classes }}">
        {% elif field_info.type in ['text', 'password', 'email', 'date', 'datetime-local', 'tel', 'url', 'number',
        'color', 'month', 'week', 'time', 'search', 'range', 'file', 'image', 'hidden'] %}
        <input type="{{ field_info.type }}" id="{{ field_name }}" name="{{ field_name }}"
            class="{{ base_input_classes }} {{ input_bg_color }} {{ border_color }} {{ input_focus_bg_color }} {{ focus_ring_color }} {{ text_color }}"
            {% if field_info.required %}required{% endif %} {% if field_info.placeholder
            %}placeholder="{{ field_info.placeholder }}" {% endif %} {% if field_info.min is defined
            %}min="{{ field_info.min }}" {% endif %} {% if field_info.max is defined %}max="{{ field_info.max }}" {%
            endif %}>
        {% endif %}
    </div>
    {% endfor %}
</form>
{% endset %}

{# Acciones del formulario dentro del modal #}
{% set form_actions %}
<button type="button" id="saveButton" onclick="save{{ entity_name }}()"
    class="w-full sm:w-auto {{ base_button_classes }} {{ button_bg_color }} text-white {{ focus_ring_color }} sm:ml-3">
    Guardar
</button>
<button type="button" onclick="closeModal()"
    class="mt-3 w-full sm:w-auto {{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }} sm:mt-0 sm:ml-3">
    Cerrar
</button>
{% endset %}

{# Renderizado del modal para crear/editar/ver elementos #}
{{ modal(entity_name_lower ~ 'Modal', '', form_content, form_actions) }}

{# Contenido del modal para confirmar la eliminación #}
{% set delete_content %}
<p class="text-sm {{ text_color }}">
    ¿Está seguro de que desea eliminar este {{ entity_name_lower }}?
</p>
{% endset %}

{# Acciones del modal de eliminación #}
{% set delete_actions %}
<button type="button" onclick="delete{{ entity_name }}()"
    class="w-full sm:w-auto {{ base_button_classes }} {{ delete_button_bg_color }} text-white {{ focus_ring_color }} sm:ml-3">
    Eliminar
</button>
<button type="button" onclick="closeDeleteModal()"
    class="mt-3 w-full sm:w-auto {{ base_button_classes }} {{ border_color }} {{ bg_color }} {{ text_color }} {{ hover_bg_color }} {{ focus_ring_color }} sm:mt-0 sm:ml-3">
    Cancelar
</button>
{% endset %}

{# Renderizado del modal para confirmar la eliminación #}
{{ modal('deleteModal', 'Confirmar Eliminación', delete_content, delete_actions) }}
{% if DEBUG %}
<pre class="w-[800px] max-w-4xl p-6 bg-gray-800 text-gray-200 rounded-lg shadow-lg font-mono text-sm leading-relaxed whitespace-pre-wrap break-words border border-gray-700 my-4 mx-auto">
mensajes  de depuracion 
{{ items }}
</pre>
{% endif %}

{% endblock %}
{################# Fin block content #################}

{% block extra_js %}
<script>

    // Función para obtener un valor de cookie
    function getCookie(name) {
        let cookieValue = null;
        let nameEQ = name + "=";
        let cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i];
            while (cookie.charAt(0) === ' ') {
                cookie = cookie.substring(1, cookie.length);
            }
            if (cookie.indexOf(nameEQ) === 0) {
                cookieValue = decodeURIComponent(cookie.substring(nameEQ.length));
                break;
            }
        }
        return cookieValue;
    }

    let currentAction = '';
    let current{{ entity_name }}Id = null;
    let activeDropdown = null;

    // Función para alternar la visibilidad del dropdown
    function toggleDropdown(id) {
        const dropdown = document.getElementById(`dropdown-${id}`);
        const allDropdowns = document.querySelectorAll('.origin-top-right');
        allDropdowns.forEach(d => {
            if (d !== dropdown) d.classList.add('hidden');
        });
        dropdown.classList.toggle('hidden');
        activeDropdown = dropdown.classList.contains('hidden') ? null : dropdown;
    }

    // Cierra todos los dropdowns si se hace clic fuera de ellos
    window.onclick = function (event) {
        if (!event.target.closest('.origin-top-right') && !event.target.matches('[aria-haspopup="true"]')) {
            document.querySelectorAll('.origin-top-right').forEach(dropdown => {
                dropdown.classList.add('hidden');
            });
            activeDropdown = null;
        }
    };

    // Muestra el modal de creación/edición/vista
    function showModal(action, id = null) {
        currentAction = action;
        current{{ entity_name }}Id = id;
        const modal = document.getElementById('{{ entity_name_lower }}Modal');
        const form = document.getElementById('{{ entity_name_lower }}Form');
        const title = document.getElementById('{{ entity_name_lower }}ModalLabel');
        const saveButton = document.getElementById('saveButton');

        form.reset();
        
        // Primero habilitamos todos los campos (independientemente de la acción)
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.disabled = false;
        });

        switch (action) {
            case 'create':
                title.textContent = 'Crear Nuevo {{ entity_name }}';
                saveButton.style.display = 'inline-flex';
                break;
            case 'edit':
                title.textContent = 'Editar {{ entity_name }}';
                saveButton.style.display = 'inline-flex';
                fillFormWithData(id);
                disableFieldsInEdit();
                break;
            case 'view':
                title.textContent = 'Ver {{ entity_name }}';
                saveButton.style.display = 'none';
                fillFormWithData(id);
                disableAllFields(); 
                break;
            case 'delete':
                document.getElementById('deleteModal').classList.remove('hidden');
                return;
        }
        modal.classList.remove('hidden');
    }

/////////////////////////////
// Cierra los modales si se hace clic fuera de ellos
window.addEventListener('click', function(event) {
    const modals = [
        document.getElementById('{{ entity_name_lower }}Modal'),
        document.getElementById('deleteModal')
    ];
    
    modals.forEach(modal => {
        if (modal && !modal.classList.contains('hidden')) {
            // Verifica si el clic fue fuera del contenido del modal
            // El contenido del modal es el div dentro del modal que contiene el formulario
            const modalContent = modal.querySelector('.inline-block');
            if (modalContent && !modalContent.contains(event.target) && modal.contains(event.target)) {
                // Si el clic fue dentro del modal pero fuera del contenido del modal (en el overlay)
                if (modal.id === '{{ entity_name_lower }}Modal') {
                    closeModal();
                } else if (modal.id === 'deleteModal') {
                    closeDeleteModal();
                }
            }
        }
    });
});
/////////////////////////////

    // Cierra el modal de creación/edición/vista
    function closeModal() {
        document.getElementById('{{ entity_name_lower }}Modal').classList.add('hidden');
    }

    // Cierra el modal de confirmación de eliminación
    function closeDeleteModal() {
        document.getElementById('deleteModal').classList.add('hidden');
    }

    // Rellena el formulario con los datos del elemento seleccionado
    function fillFormWithData(id) {
        // const item = {{ items | tojson | safe }}.find(f => f.id === id);
        // const item = {{ items | tojson | safe }}.find(f => f.id === parseInt(id));
        const item = {{ items | tojson | safe }}.find(f => String(f.id) === String(id));

        if (item) {
            document.getElementById('{{ entity_name_lower }}Id').value = item.id;
    {% for field_name, field_info in form_fields.items() %}
            
            {% if field_info.type == 'select' %}
            document.getElementById('{{ field_name }}').value = item.{{ field_name }} || '';
            
            {% elif field_info.type == 'checkbox' %}
            document.getElementById('{{ field_name }}').checked = item.{{ field_name }} === true || item.{{ field_name }} === 'true';
            {% elif field_info.type == 'radio' %}
            const radioValue = item.{{ field_name }};
        if (radioValue) {
            document.querySelector(`input[name="{{ field_name }}"][value="${radioValue}"]`).checked = true;
        }
    {% elif field_info.type == 'file' or field_info.type == 'image' %}
        // Los campos de archivo/imagen no se pueden rellenar por seguridad, omitir
    {% else %}
        document.getElementById('{{ field_name }}').value = item.{{ field_name }} || '';
    {% endif %}
    {% endfor %}
    }
        
    }
    // Deshabilita los campos que tienen la propiedad disabled_in_edit cuando currentAction es 'edit'
    function disableFieldsInEdit() {
        {% for field_name, field_info in form_fields.items() %}
        {% if field_info.disabled_in_edit %}
        document.getElementById('{{ field_name }}').disabled = currentAction === 'edit';
        {% endif %}
        {% endfor %}
    }
    // Deshabilita todos los campos del formulario cuando se visualiza un elemento

    function disableAllFields() {
        if (currentAction === 'view') {
            const form = document.getElementById('{{ entity_name_lower }}Form');
            const inputs = form.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.disabled = true;
            });
        }
    }
    function handleSelectChange(select, fieldId) {
        const customInput = document.getElementById(`${fieldId}_custom`);
        if (customInput) {
            if (select.value === 'other') {
                customInput.classList.remove('hidden');
                customInput.disabled = false;
            } else {
                customInput.classList.add('hidden');
                customInput.disabled = true;
                customInput.value = ''; // Limpiar el valor cuando no está seleccionado "Otro"
            }
        }
    }


    {# Guarda o actualiza un {{ entity_name_lower }} #}
    async function save{{ entity_name }}() {
        const data = {
            {% for field_name, field_info in form_fields.items() %}
                {% if field_info.type == 'checkbox' %}
                {{ field_name }}: document.getElementById('{{ field_name }}').checked,
                {% elif field_info.type == 'select' %}
                {{ field_name }}: (function() {
                    const selectValue = document.getElementById('{{ field_name }}').value;
                    {% if allowed_new_value %}
                    const customInput = document.getElementById('{{ field_name }}_custom').value;
                    {% endif %}
                    return (selectValue === 'other' && customInput && !customInput.disabled) ? customInput : selectValue;
                })(),
                {% elif field_info.type == 'radio' %}
                {{ field_name }}: document.querySelector('input[name="{{ field_name }}"]:checked') ? document.querySelector('input[name="{{ field_name }}"]:checked').value : '',
                {% elif field_info.type == 'file' or field_info.type == 'image' %}
                // Los campos de archivo/imagen requieren manejo especial (por ejemplo, FormData)
                {{ field_name }}: document.getElementById('{{ field_name }}').files[0] || null,
                {% else %}
                {{ field_name }}: document.getElementById('{{ field_name }}').value,
                {% endif %}
            {% endfor %}
        };

        let url = '{{ api_url }}';
        let method = 'POST';

        if (currentAction === 'edit') {
            method = 'PUT';
            data.id = current{{ entity_name }}Id;
            url = `{{ api_url }}${current{{ entity_name }}Id.toString()}`;
        }

        {# Si hay campos de archivo/imagen, usar FormData #}
        const hasFiles = {% for field_name, field_info in form_fields.items() %}
            {% if field_info.type == 'file' or field_info.type == 'image' %}
            data.{{ field_name }} !== null ||
            {% endif %}
            {% endfor %} false;

        if (hasFiles) {
            const formData = new FormData();
            for (const key in data) {
                if (data[key] !== null) {
                    formData.append(key, data[key]);
                }
            }
            try {
                const response = await fetch(url, {
                    method: method,
                    credentials: 'include',
                    headers: {
                        "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                    },
                    body: formData,
                });
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error al guardar el {{ entity_name_lower }}');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al guardar el {{ entity_name_lower }}');
            }
        } else {
            try {
                const response = await fetch(url, {
                    method: method,
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                    },
                    body: JSON.stringify(data),
                });
                if (response.ok) {
                     location.reload();
                } else {
                    alert('Error al guardar el {{ entity_name_lower }}');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al guardar el {{ entity_name_lower }}');
            }
        }
    }

    // Elimina un {{ entity_name_lower }}
    async function delete{{ entity_name }}() {
        let url = `{{ api_url }}${current{{ entity_name }}Id.toString()}`;
        let method = 'DELETE';
        try {
            const response = await fetch(url, {
                method: method,
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                },
                body: JSON.stringify({ id: current{{ entity_name }}Id.toString() }),
        });

        if (response.ok) {
            location.reload();
        } else {
            alert('Error al eliminar el {{ entity_name_lower }}');
        }
            } catch (error) {
            console.error('Error:', error);
            alert('Error al eliminar el {{ entity_name_lower }}');
        }
    }

    // Alternar la selección de todos los checkboxes en la tabla
    function toggleSelectAll() {
        const checkboxes = document.querySelectorAll('.item-checkbox');
        const selectAll = document.getElementById('select-all').checked;
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll;
        });
    }

    // Manejar acciones en bulk (eliminación de múltiples elementos)
    async function handleBulkAction() {
        const selectedItems = Array.from(document.querySelectorAll('.item-checkbox:checked')).map(checkbox => checkbox.value);

        if (selectedItems.length === 0) {
            alert('Por favor seleccione al menos un elemento.');
            return;
        }
        if (confirm('¿Está seguro de que desea eliminar los elementos seleccionados?')) {
            try {
                const response = await fetch('{{ api_url }}', {
                    method: 'DELETE',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        "X-CSRF-TOKEN": getCookie("csrf_access_token"),
                    },
                    body: JSON.stringify({ "ids": selectedItems }),
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error al eliminar los elementos seleccionados');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al eliminar los elementos seleccionados');
            }
        }
    }
    
</script>
{% endblock %}

```

=== File: ./modules/foliage_report/templates/ver_reporte.j2 ===
```jinja-html
{% macro get_nutrient_status(actual, min, max) %}
  {% if actual < min %}
    deficiente
  {% elif actual > max %}
    excesivo
  {% else %}
    óptimo
  {% endif %}
{% endmacro %}

{% macro get_status_color(status) %}
  {% if status == "deficiente" %}
    text-red-500
  {% elif status == "excesivo" %}
    text-yellow-500
  {% elif status == "óptimo" %}
    text-green-500
  {% else %}
    ""
  {% endif %}
{% endmacro %}

{% set button_class_report = "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm dark:text-black" %}

{% macro get_status_icon(status) %}
  {% if status == "deficiente" %}
    <svg class="h-4 w-4 text-red-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path stroke-linecap="round" stroke-linejoin="round" d="M10.29 3.86a2.82 2.82 0 013.42 0l7.46 5.7a2.82 2.82 0 011 2.24v6.27a2.82 2.82 0 01-1 2.24l-7.46 5.7a2.82 2.82 0 01-3.42 0l-7.46-5.7a2.82 2.82 0 01-1-2.24v-6.27a2.82 2.82 0 011-2.24z"></path>
    </svg>
  {% elif status == "excesivo" %}
    <svg class="h-4 w-4 text-yellow-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path stroke-linecap="round" stroke-linejoin="round" d="M10.29 3.86a2.82 2.82 0 013.42 0l7.46 5.7a2.82 2.82 0 011 2.24v6.27a2.82 2.82 0 01-1 2.24l-7.46 5.7a2.82 2.82 0 01-3.42 0l-7.46-5.7a2.82 2.82 0 01-1-2.24v-6.27a2.82 2.82 0 011-2.24z"></path>
    </svg>
  {% elif status == "óptimo" %}
    <svg class="h-4 w-4 text-green-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7"></path>
    </svg>
  {% else %}
    ""
  {% endif %}
{% endmacro %}


{% extends "base.j2" %}
 {% block extra_css %}

    {{ css_code|safe }}
    {{ super() }}
<style>
    .tabs-trigger {
        padding: 0.5rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.25rem;
        background-color: #f8fafc;
        cursor: pointer;
        transition: background-color 0.3s, border-color 0.3s;
    }

    .tabs-trigger.active {
        border-bottom: 2px solid #68d391;
        background-color: #f0fff4;
    }

    .tabs-content {
        display: none;
    }

    .tabs-content:not(.hidden) {
        display: block;
    }
</style>{% endblock %}
{% block content %}
<div class="container">
    <div class="row">
        <div class="col-md-12">


    <div class="container mx-auto p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h1 class="text-3xl font-bold">Análisis y Recomendaciones</h1>
                <p class="text-sm text-indigo-600">
                    Finca: {{ analysisData.common.finca }} | Lote: {{ analysisData.common.lote }} | Fecha: {{ analysisData.common.fechaAnalisis }}
                </p>
            </div>
            <div class="flex gap-2">
                <button class="inline-flex items-center gap-2 rounded-md border border-transparent px-3 py-2 text-sm font-medium leading-4 text-white shadow-sm bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                    Imprimir
                </button>
                <button class="inline-flex items-center gap-2 rounded-md border border-transparent px-3 py-2 text-sm font-medium leading-4 text-white shadow-sm bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><path d="M3 16v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V16"></path><line x1="16" y1="3" x2="19" y2="6"></line><line x1="22" y1="3" x2="19" y2="6"></line></svg>
                    Exportar
                </button>
                <button class="inline-flex items-center gap-2 rounded-md border border-transparent px-3 py-2 text-sm font-medium leading-4 text-white shadow-sm bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><line x1="16" y1="4" x2="12" y2="8"></line><line x1="8" y1="4" x2="12" y2="8"></line><line x1="12" y1="8" x2="12" y2="17"></line></svg>
                    Compartir
                </button>
            </div>
        </div>
        <div class="inline-flex h-10 items-center justify-center rounded-md bg-zinc-100 p-1 text-muted-foreground mb-4">
            <button class="{{ button_class_report }} tabs-trigger active" data-target="#dashboard">Resumen</button>
            <button class="{{ button_class_report }} tabs-trigger" data-target="#foliar">Análisis Foliar</button>
            <button class="{{ button_class_report }} tabs-trigger" data-target="#soil">Análisis de Suelo</button>
            <button class="{{ button_class_report }} tabs-trigger" data-target="#recommendations">Recomendaciones</button>
            <button class="{{ button_class_report }} tabs-trigger" data-target="#history">Histórico</button>
        </div>
        
        <div id="dashboard" class="tabs-content">
            <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">

                <div class="border p-4 rounded-lg">
                    <div class="pb-2">
                        <h2 class="text-lg font-bold">Estado General</h2>
                        <p class="text-muted-foreground">
                            Basado en análisis foliar y de suelo
                        </p>
                    </div>
                    <div>
                        <div class="flex items-center justify-between">
                            <div class="text-2xl font-bold">{% if limitingNutrient %}Requiere atención{% else %}Óptimo{% endif %}</div>
                            <div>
                                {% if limitingNutrient %}
                                    <span class="inline-block rounded-full px-2.5 py-0.5 text-sm font-semibold text-red-800 bg-red-100">Nutriente limitante detectado</span>
                                {% else %}
                                    <span class="inline-block rounded-full px-2.5 py-0.5 text-sm font-semibold text-green-800 bg-green-100">Equilibrado</span>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="border p-4 rounded-lg">
                    <div class="pb-2">
                        <h2 class="text-lg font-bold">Ley del Mínimo de Liebig</h2>
                        <p class="text-muted-foreground">
                            El factor más limitante determina el crecimiento
                        </p>
                    </div>
                    <div>
                        {% if limitingNutrient %}
                            <div class="space-y-2">
                                <div class="text-sm text-muted-foreground">Nutriente limitante:</div>
                                <div class="text-xl font-semibold">
                                    {{ nutrientNames[limitingNutrient.name] or limitingNutrient.name }}
                                </div>
                                <div class="w-full bg-gray-200 h-2 mb-4 rounded-full">
                                    <div class="h-2 rounded-full" style="width: {{ limitingNutrient.percentage }}%; background-color: hsl(var(--color-actual))"></div>
                                </div>
                                <div class="text-sm text-muted-foreground">
                                    {{ limitingNutrient.percentage|round }}% del nivel óptimo
                                </div>
                            </div>
                        {% else %}
                            <div class="flex items-center justify-center h-20 text-green-500">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 mr-2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                <span>No se detectaron limitantes críticos</span>
                            </div>
                        {% endif %}
                    </div>
                </div>
                <div class="border p-4 rounded-lg">
                    <div class="pb-2">
                        <h2 class="text-lg font-bold">Recomendaciones Principales</h2>
                        <p class="text-muted-foreground">
                            Acciones prioritarias
                        </p>
                    </div>
                    <div>
                        {% if recommendations | length > 0 %}
                            <ul class="space-y-2">
                                {% for rec in recommendations[:2] %}
                                    <li class="flex items-start gap-2">
                                        <div class="mt-0.5">
                                            {% if rec.priority == 'alta' %}
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            {% else %}
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-yellow-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            {% endif %}
                                        </div>
                                        <div class="text-sm">
                                            {{ rec.title }}
                                        </div>
                                    </li>
                                {% endfor %}
                                {% if recommendations | length > 2 %}
                                    <button class="inline-flex items-center gap-2 rounded-md border border-transparent px-3 py-2 text-sm font-medium leading-4 text-white shadow-sm bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" type="button">
                                        Ver todas ({{ recommendations | length }})
                                    </button>
                                {% endif %}
                            </ul>
                        {% else %}
                            <div class="flex items-center justify-center h-20 text-green-500">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 mr-2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                <span>No se requieren acciones inmediatas</span>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
            <div class="mb-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="border p-4 rounded-lg">
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-green-500"><path d="M16 17l5-5l-5-5M2 12h6"></path><path d="M18 17v-1a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v1"></path></svg>
                        <h2 class="text-lg font-bold">Análisis Foliar</h2>
                    </div>
                    <p class="text-muted-foreground">
                        Comparación con niveles óptimos
                    </p>
                    <canvas id="foliarChart" class="h-80"></canvas>
                </div>
                <div class="border p-4 rounded-lg">
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-amber-500"><path d="M12 1V22a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                        <h2 class="text-lg font-bold">Análisis de Suelo</h2>
                    </div>
                    <p class="text-muted-foreground">
                        Comparación con niveles óptimos
                    </p>
                    <canvas id="soilChart" class="h-80"></canvas>
                </div>
            </div>
            <div class="border p-4 rounded-lg">
                <div class="flex items-center">
                    <h2 class="text-lg font-bold">Ley del Mínimo de Liebig - Visualización</h2>
                    <p class="text-muted-foreground">
                        El crecimiento está limitado por el nutriente que se encuentra en menor cantidad relativa a las necesidades del cultivo
                    </p>
                </div>
                <div class="flex flex-col md:flex-row gap-6 items-center">
                    <div class="w-full md:w-1/2">
                        <div class="relative h-64 w-full border rounded-lg overflow-hidden bg-gradient-to-b from-blue-50 to-green-50">
                            <!-- Barril de Liebig (visualización) -->
                            <div class="absolute inset-x-0 bottom-0 h-12 bg-green-800"></div>
                            <!-- Duelas del barril -->
                            <div class="absolute inset-0 flex justify-around">
                                {% for nutrient in foliarChartData %}
                                    {% set percentage = (nutrient.actual / ((nutrient.min + nutrient.max) / 2)) * 100 %}
                                    {% set isLimiting = limitingNutrient and limitingNutrient.name == nutrient.name %}
                                    <div class="relative h-full w-8 flex flex-col justify-end items-center">
                                        <div
                                            class="w-6 rounded-t-md {{ 'bg-red-500' if isLimiting else 'bg-blue-500' }}"
                                            style="height: 30%;">
                                        </div>
                                        <div class="absolute bottom-14 transform -rotate-45 text-xs font-bold">
                                            {{ nutrient.name }}
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                            <!-- Nivel de agua (limitado por el nutriente más bajo) -->
                            {% if limitingNutrient %}
                                <div
                                    class="absolute inset-x-0 bg-blue-300 opacity-70"
                                    style="bottom: {{ 3 + (limitingNutrient.percentage * 0.5) }}%; height: 5%;">
                                </div>
                            {% endif %}
                        </div>
                    </div>
                    <div class="w-full md:w-1/2 space-y-4">
                        <h3 class="text-lg font-semibold mb-2">Principio de la Ley del Mínimo</h3>
                        <p class="text-muted-foreground">
                            Propuesta por Justus von Liebig en 1840, esta ley establece que el crecimiento de una planta no está determinado por la cantidad total de recursos disponibles, sino por el recurso más escaso (factor limitante).
                        </p>
                        {% if limitingNutrient %}
                            <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                <div class="mt-2">
                                    <h3 class="text-red-700 text-lg font-semibold">Factor limitante detectado</h3>
                                    <p class="text-red-600">
                                        El {{ nutrientNames[limitingNutrient.name] or limitingNutrient.name }} está actuando como factor limitante al {{ limitingNutrient.percentage|round }}% del nivel óptimo. Corregir esta deficiencia debería ser prioritario.
                                    </p>
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        <div id="foliar" class="tabs-content hidden">
            <div class="mb-4 border p-4 rounded-lg">
                <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-green-500"><path d="M16 17l5-5l-5-5M2 12h6"></path><path d="M18 17v-1a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v1"></path></svg>
                    <h2 class="text-lg font-bold">Análisis Foliar Detallado</h2>
                </div>
                <p class="text-muted-foreground">
                    Resultados del análisis foliar realizado el {{ analysisData.common.fechaAnalisis }}
                </p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Macronutrientes (%)</h3>
                        <div class="space-y-4">
                            {% for key, value in analysisData.foliar.items() %}
                                {% if key in ['nitrogeno', 'fosforo', 'potasio', 'calcio', 'magnesio', 'azufre'] %}
                                    {% set status = get_nutrient_status(value, optimalLevels.foliar[key].min, optimalLevels.foliar[key].max) %}
                                    {% set statusColor = get_status_color(status) %}
                                    {% set percentage = (value / ((optimalLevels.foliar[key].min + optimalLevels.foliar[key].max) / 2)) * 100 %}
                                    <div class="space-y-1">
                                        <div class="flex justify-between items-center">
                                            <div class="flex items-center">
                                                {{ get_status_icon(status)|safe }}
                                                <span class="ml-2">{{ nutrientNames[key] or key }}</span>
                                            </div>
                                            <div class="{{ statusColor }} font-semibold">
                                                {{ value }}%
                                                <span class="text-xs font-normal text-muted-foreground">
                                                    ({{ optimalLevels.foliar[key].min }}-{{ optimalLevels.foliar[key].max }}%)
                                                </span>
                                            </div>
                                        </div>
                                        <div class="w-full bg-gray-200 h-2 mb-4 rounded-full">
                                            <div class="h-2 rounded-full" style="width: {{ percentage }}%; background-color: hsl(var(--color-actual))"></div>
                                        </div>
                                    </div>
                                {% endif %}
                            {% endfor %}
                        </div>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Micronutrientes (ppm)</h3>
                        <div class="space-y-4">
                            {% for key, value in analysisData.foliar.items() %}
                                {% if key in ['hierro', 'manganeso', 'zinc', 'cobre', 'boro'] %}
                                
                                    {% set status = get_nutrient_status(value, optimalLevels.foliar[key].min, optimalLevels.foliar[key].max)  %}
                                    {% set statusColor = get_status_color(status) %}
                                    {% set percentage = (value / ((optimalLevels.foliar[key].min + optimalLevels.foliar[key].max) / 2)) * 100 %}
                                    <div class="space-y-1">
                                        <div class="flex justify-between items-center">
                                            <div class="flex items-center">
                                                {{ get_status_icon(status)|safe }}
                                                <span class="ml-2">{{ nutrientNames[key] or key }}</span>
                                            </div>
                                            <div class="{{ statusColor }} font-semibold">
                                                {{ value }} ppm
                                                <span class="text-xs font-normal text-muted-foreground">
                                                    ({{ optimalLevels.foliar[key].min }}-{{ optimalLevels.foliar[key].max }} ppm)
                                                </span>
                                            </div>
                                        </div>
                                        <div class="w-full bg-gray-200 h-2 mb-4 rounded-full">
                                            <div class="h-2 rounded-full" style="width: {{ percentage }}%; background-color: hsl(var(--color-actual))"></div>
                                        </div>
                                    </div>
                                {% endif %}
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            <div class="border p-4 rounded-lg">
                <div class="flex items-center">
                    <h2 class="text-lg font-bold">Interpretación del Análisis Foliar</h2>
                    <p class="text-muted-foreground">
                        Evaluación de los resultados según estándares para el cultivo
                    </p>
                </div>
                <div>
                    {% if limitingNutrient and limitingNutrient.type == 'foliar' %}
                        <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                            <div class="mt-2">
                                <h3 class="text-red-700 font-semibold">Nutriente Limitante Detectado</h3>
                                <p class="text-red-600">
                                    El {{ nutrientNames[limitingNutrient.name] or limitingNutrient.name }} está actuando como factor limitante según la Ley de Liebig. Su nivel actual ({{ limitingNutrient.value }}%) está por debajo del óptimo.
                                </p>
                            </div>
                        </div>
                    {% endif %}
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <h3 class="text-md font-semibold mb-2">Deficiencias</h3>
                            <ul class="space-y-2">
                                {% for key, value in analysisData.foliar.items() %}
                                    {% if key in optimalLevels.foliar and value < optimalLevels.foliar[key].min %}
                                        <li class="flex items-start gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500 mt-0.5"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            <div>
                                                <span class="font-medium">{{ nutrientNames[key] or key }}:</span> {{ value }}% (Mínimo recomendado: {{ optimalLevels.foliar[key].min }}%)
                                            </div>
                                        </li>
                                    {% endif %}
                                {% endfor %}
                                    {% if not (analysisData.foliar|selectattr('is_deficiente', test='attr')|list|length > 0) %}
                                        <li class="text-green-600 flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 mr-2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            No se detectaron deficiencias significativas
                                        </li>
                                    {% endif %}

                            </ul>
                        </div>
                        <div>
                            <h3 class="text-md font-semibold mb-2">Excesos</h3>
                            <ul class="space-y-2">
                                {% for key, value in analysisData.foliar.items() %}
                                    {% if key in optimalLevels.foliar and value > optimalLevels.foliar[key].max %}
                                        <li class="flex items-start gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-yellow-500 mt-0.5"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            <div>
                                                <span class="font-medium">{{ nutrientNames[key] or key }}:</span> {{ value }}% (Máximo recomendado: {{ optimalLevels.foliar[key].max }}%)
                                            </div>
                                        </li>
                                        {% endif %}
                                    {% endfor %}
                                    {% if not (analysisData.foliar|selectattr('is_excesivo', test='attr')|list|length > 0) %}
                                        <li class="text-green-600 flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 mr-2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            No se detectaron excesos significativos
                                        </li>
                                    {% endif %}

                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="soil" class="tabs-content hidden">


<div class="mb-4 border p-4 rounded-lg">
        <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-amber-500"><path d="M12 1V22a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
            <h2 class="text-lg font-bold">Análisis de Suelo Detallado</h2>
        </div>
        <p class="text-muted-foreground">
            Resultados del análisis de suelo realizado el {{ analysisData.common.fechaAnalisis }}
        </p>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h3 class="text-lg font-semibold mb-4">Propiedades Físico-Químicas</h3>
                <div class="space-y-4">
                    {% for item in [{'key': 'ph', 'label': 'pH', 'unit': ''},
                                    {'key': 'materiaOrganica', 'label': 'Materia Orgánica', 'unit': '%'},
                                    {'key': 'textura', 'label': 'Textura', 'unit': ''},
                                    {'key': 'cic', 'label': 'CIC', 'unit': 'meq/100g'}] %}
                        {% if item.key == 'textura' %}
                            <div class="space-y-1">
                                <div class="flex justify-between items-center">
                                    <span>{{ item.label }}</span>
                                    <span class="font-semibold">{{ analysisData.soil[item.key] }}</span>
                                </div>
                            </div>
                        {% else %}
                            {% set status = get_nutrient_status(analysisData.soil[item.key], optimalLevels.soil[item.key].min, optimalLevels.soil[item.key].max) %}
                            {% set statusColor = get_status_color(status) %}
                            {% set percentage = (analysisData.soil[item.key] / ((optimalLevels.soil[item.key].min + optimalLevels.soil[item.key].max) / 2)) * 100 %}
                            <div class="space-y-1">
                                <div class="flex justify-between items-center">
                                    <div class="flex items-center">
                                        {{ get_status_icon(status)|safe }}
                                        <span class="ml-2">{{ nutrientNames[item.key] or item.key }}</span>
                                    </div>
                                    <div class="{{ statusColor }} font-semibold">
                                        {{ analysisData.soil[item.key] }}
                                        {{ item.unit if item.unit }}
                                        <span class="text-xs font-normal text-muted-foreground">
                                            ({{ optimalLevels.soil[item.key].min }}-{{ optimalLevels.soil[item.key].max }}{{ item.unit if item.unit }})
                                        </span>
                                    </div>
                                </div>
                                <div class="w-full bg-gray-200 h-2 mb-4 rounded-full">
                                    <div class="h-2 rounded-full" style="width: {{ percentage|round(2) }}%; background-color: hsl(var(--color-actual))"></div>
                                </div>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-4">Nutrientes del Suelo</h3>
                <div class="space-y-4">
                    {% for item in [{'key': 'nitrogeno', 'label': 'Nitrógeno', 'unit': '%'},
                                    {'key': 'fosforo', 'label': 'Fósforo', 'unit': 'ppm'},
                                    {'key': 'potasio', 'label': 'Potasio', 'unit': 'ppm'},
                                    {'key': 'calcio', 'label': 'Calcio', 'unit': 'ppm'},
                                    {'key': 'magnesio', 'label': 'Magnesio', 'unit': 'ppm'},
                                    {'key': 'azufre', 'label': 'Azufre', 'unit': 'ppm'}] %}
                        <div class="space-y-1">
                            {% set status = get_nutrient_status(analysisData.soil[item.key], optimalLevels.soil[item.key].min, optimalLevels.soil[item.key].max) %}
                            {% set statusColor = get_status_color(status) %}
                            {% set percentage = (analysisData.soil[item.key] / ((optimalLevels.soil[item.key].min + optimalLevels.soil[item.key].max) / 2)) * 100 %}
                            <div class="flex justify-between items-center">
                                <div class="flex items-center">
                                    {{ get_status_icon(status)|safe }}
                                    <span class="ml-2">{{ nutrientNames[item.key] or item.key }}</span>
                                </div>
                                <div class="{{ statusColor }} font-semibold">
                                    {{ analysisData.soil[item.key] }}
                                    {{ item.unit if item.unit }}
                                    <span class="text-xs font-normal text-muted-foreground">
                                        ({{ optimalLevels.soil[item.key].min }}-{{ optimalLevels.soil[item.key].max }}{{ item.unit if item.unit }})
                                    </span>
                                </div>
                            </div>
                            <div class="w-full bg-gray-200 h-2 mb-4 rounded-full">
                                <div class="h-2 rounded-full" style="width: {{ percentage|round(2) }}%; background-color: hsl(var(--color-actual))"></div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>




            <div class="mb-4 border p-4 rounded-lg">
                <div class="flex items-center">
                    <h2 class="text-lg font-bold">Interpretación del Análisis de Suelo</h2>
                    <p class="text-muted-foreground">
                        Evaluación de los resultados según estándares para el cultivo
                    </p>
                </div>
                <div>
                    {% if limitingNutrient and limitingNutrient.type == 'soil' %}
                        <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                            <div class="mt-2">
                                <h3 class="text-red-700 font-semibold">Nutriente Limitante Detectado</h3>
                                <p class="text-red-600">
                                    El {{ nutrientNames[limitingNutrient.name] or limitingNutrient.name }} en el suelo está actuando como factor limitante según la Ley de Liebig. Su nivel actual está por debajo del óptimo.
                                </p>
                            </div>
                        </div>
                    {% endif %}
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <h3 class="text-md font-semibold mb-2">Deficiencias</h3>
                            <ul class="space-y-2">
                                {% for key, value in analysisData.soil.items() %}
                                    {% if key in optimalLevels.soil and key != 'ph' and key != 'textura' and value < optimalLevels.soil[key].min %}
                                        <li class="flex items-start gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500 mt-0.5"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            <div>
                                                <p>
                                                    <span class="font-medium">{{ nutrientNames[key] or key }}:</span> {{ value }}%
                                                    (Mínimo recomendado: {{ optimalLevels.soil[key].min }}%)
                                                </p>
                                            </div>
                                        </li>
                                        {% endif %}
                                    {% endfor %}
                                    {% if not (analysisData.soil|selectattr('is_deficiente', test='attr')|list|length > 0) %}
                                        <li class="text-green-600 flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 mr-2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                            No se detectaron deficiencias significativas
                                        </li>
                                    {% endif %}
                            </ul>
                        </div>
                        <div>
                            <h3 class="text-md font-semibold mb-2">Problemas de pH</h3>
                            {% if analysisData.soil.ph < optimalLevels.soil.ph.min %}
                                <div class="flex items-start gap-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500 mt-0.5"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                    <div>
                                        <p>
                                            <span class="font-medium">Suelo ácido (pH {{ analysisData.soil.ph }})</span>
                                        </p>
                                        <p class="text-sm text-muted-foreground">
                                            Puede limitar la disponibilidad de nutrientes como fósforo, calcio y magnesio. Considere aplicar cal agrícola para elevar el pH.
                                        </p>
                                    </div>
                                </div>
                            {% elif analysisData.soil.ph > optimalLevels.soil.ph.max %}
                                <div class="flex items-start gap-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-yellow-500 mt-0.5"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                    <div>
                                        <p>
                                            <span class="font-medium">Suelo alcalino (pH {{ analysisData.soil.ph }})</span>
                                        </p>
                                        <p class="text-sm text-muted-foreground">
                                            Puede limitar la disponibilidad de micronutrientes como hierro, manganeso y zinc. Considere aplicar azufre elemental o materia orgánica para reducir el pH.
                                        </p>
                                    </div>
                                </div>
                            {% else %}
                                <div class="flex items-center text-green-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 mr-2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                                    <span>pH óptimo para la mayoría de cultivos ({{ analysisData.soil.ph }})</span>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            <div class="mb-4  border p-4 rounded-lg">
                <div class="flex items-center">
                    <h2 class="text-lg font-bold">Interpretación del Análisis de Suelo</h2>
                </div>
                <div class="space-y-4">
                    {{ get_status_icon(get_nutrient_status(analysisData.soil.ph, optimalLevels.soil.ph.min, optimalLevels.soil.ph.max))|safe }}
                    <p>
                        La Ley del Mínimo de Liebig, formulada por el químico alemán Justus von Liebig en 1840, establece que el crecimiento de una planta no está determinado por la cantidad total de recursos disponibles, sino por el recurso más escaso (factor limitante).
                    </p>
                    <p>
                        Esta ley se ilustra comúnmente con un barril con duelas de diferentes alturas, donde cada duela representa un nutriente. El nivel de agua en el barril (que representa el crecimiento potencial) está limitado por la duela más corta, independientemente de cuán altas sean las demás.
                    </p>
                    <p>En términos prácticos, esto significa que:</p>
                    <ul class="list-disc pl-6 space-y-2">
                        <li>
                            Aumentar la disponibilidad de nutrientes que ya están en niveles adecuados tendrá poco o ningún efecto en el rendimiento.
                        </li>
                        <li>
                            El mayor impacto se logra identificando y corrigiendo el factor limitante (el nutriente más deficiente).
                        </li>
                        <li>
                            Una vez corregido un factor limitante, otro nutriente puede convertirse en el nuevo factor limitante.
                        </li>
                    </ul>
                    <p>
                        Las recomendaciones proporcionadas se basan en este principio, priorizando la corrección de los factores más limitantes para maximizar el rendimiento del cultivo.
                    </p>
                </div>
            </div>
        </div>
        <div id="recommendations" class="tabs-content hidden">
            <div class="mb-4  border p-4 rounded-lg">
                <div class="flex items-center">
                    <h2 class="text-lg font-bold">Recomendaciones Basadas en la Ley de Liebig</h2>
                    <p class="text-muted-foreground">
                        Acciones prioritarias para optimizar el rendimiento del cultivo
                    </p>
                </div>
                <div>
                    {% if recommendations | length > 0 %}
                        {% for rec in recommendations %}
                            <div class="border rounded-lg p-4 space-y-2 mb-4">
                                <div class="flex items-center gap-2">
                                    <span class="inline-block rounded-full px-2.5 py-0.5 text-sm font-semibold {% if rec.priority == 'alta' %}bg-red-100 text-red-800{% else %}bg-yellow-100 text-yellow-800{% endif %}">
                                        Prioridad {{ rec.priority }}
                                    </span>
                                    <h3 class="text-lg font-semibold">{{ rec.title }}</h3>
                                </div>
                                <p class="text-muted-foreground">
                                    {{ rec.description }}
                                </p>
                                <div class="flex items-center gap-2 pt-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-primary"><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline><line x1="14" y1="14" x2="22" y2="6"></line></svg>
                                    <span class="font-medium">{{ rec.action }}</span>
                                </div>
                            </div>
                        {% endfor %}
                    {% else %}
                        <div class="flex items-center justify-center py-8">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-12 w-12 text-green-500 mb-4"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                            <span>No se requieren acciones inmediatas</span>
                        </div>
                    {% endif %}
                </div>
            </div>
            <div class="mb-4  border p-4 rounded-lg">
                <div class="flex items-center">
                    <h2 class="text-lg font-bold">Explicación de la Ley de Liebig</h2>
                </div>
                <div class="space-y-4">
                    <p>
                        La Ley del Mínimo de Liebig, formulada por el químico alemán Justus von Liebig en 1840, establece que el crecimiento de una planta no está determinado por la cantidad total de recursos disponibles, sino por el recurso más escaso (factor limitante).
                    </p>
                    <p>
                        Esta ley se ilustra comúnmente con un barril con duelas de diferentes alturas, donde cada duela representa un nutriente. El nivel de agua en el barril (que representa el crecimiento potencial) está limitado por la duela más corta, independientemente de cuán altas sean las demás.
                    </p>
                    <p>En términos prácticos, esto significa que:</p>
                    <ul class="list-disc pl-6 space-y-2">
                        <li>
                            Aumentar la disponibilidad de nutrientes que ya están en niveles adecuados tendrá poco o ningún efecto en el rendimiento.
                        </li>
                        <li>
                            El mayor impacto se logra identificando y corrigiendo el factor limitante (el nutriente más deficiente).
                        </li>
                        <li>
                            Una vez corregido un factor limitante, otro nutriente puede convertirse en el nuevo factor limitante.
                        </li>
                    </ul>
                    <p>
                        Las recomendaciones proporcionadas se basan en este principio, priorizando la corrección de los factores más limitantes para maximizar el rendimiento del cultivo.
                    </p>
                </div>
            </div>
        </div>
        <div id="history" class="tabs-content hidden">
            <div class="mb-4 border p-4 rounded-lg">
                <div class="flex items-center">
                    <h2 class="text-lg font-bold">Histórico de Análisis</h2>
                    <p class="text-muted-foreground">
                        Evolución de los principales parámetros a lo largo del tiempo
                    </p>
                </div>
                <canvas id="historyChart" class="h-80"></canvas>
                <div class="mt-6">
                    <h3 class="text-lg font-semibold mb-4">Tendencias Observadas</h3>
                    <ul class="space-y-2">
                        <li class="flex items-start gap-2">
                            <div class="w-3 h-3 rounded-full" style="background-color: hsl(var(--color-nitrogeno));"></div>
                            <div>
                                <p class="font-medium">Nitrógeno</p>
                                <p class="text-sm text-muted-foreground">
                                    Incremento gradual del 2.3% al 2.5% en los últimos 3 meses, pero aún por debajo del nivel óptimo.
                                </p>
                            </div>
                        </li>
                        <li class="flex items-start gap-2">
                            <div class="w-3 h-3 rounded-full" style="background-color: hsl(var(--color-fosforo));"></div>
                            <div>
                                <p class="font-medium">Fósforo</p>
                                <p class="text-sm text-muted-foreground">
                                    Niveles estables dentro del rango óptimo, con ligero incremento de 0.25% a 0.3%.
                                </p>
                            </div>
                        </li>
                        <li class="flex items-start gap-2">
                            <div class="w-3 h-3 rounded-full" style="background-color: hsl(var(--color-potasio));"></div>
                            <div>
                                <p class="font-medium">Potasio</p>
                                <p class="text-sm text-muted-foreground">
                                    Incremento constante de 1.5% a 1.8%, pero aún por debajo del nivel óptimo mínimo de 2.0%.
                                </p>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>



    </div>
</div>
{% endblock %}
    {% block extra_js %}
    {{ super() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Configuración de gráficos de análisis foliar
            const foliarChartCtx = document.getElementById('foliarChart').getContext('2d');
            new Chart(foliarChartCtx, {
                type: 'bar',
                data: {
                    labels: {{ foliarChartData|map(attribute='name')|list|tojson }},
                    datasets: [
                        {
                            label: 'Nivel Actual',
                            data: {{ foliarChartData|map(attribute='actual')|list|tojson }},
                            backgroundColor: 'hsl(var(--chart-1))',
                        },
                        {
                            label: 'Nivel Mínimo',
                            data: {{ foliarChartData|map(attribute='min')|list|tojson }},
                            backgroundColor: 'hsl(var(--chart-3))',
                        },
                        {
                            label: 'Nivel Máximo',
                            data: {{ foliarChartData|map(attribute='max')|list|tojson }},
                            backgroundColor: 'hsl(var(--chart-4))',
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Niveles de Nutrientes Folares'
                        }
                    }
                }
            });

            // Configuración de gráficos de análisis de suelo
            const soilChartCtx = document.getElementById('soilChart').getContext('2d');
            new Chart(soilChartCtx, {
                type: 'bar',
                data: {
                    labels: {{ soilChartData|map(attribute='name')|list|tojson }},
                    datasets: [
                        {
                            label: 'Nivel Actual',
                            data: {{ soilChartData|map(attribute='actual')|list|tojson }},
                            backgroundColor: 'hsl(var(--chart-1))',
                        },
                        {
                            label: 'Nivel Mínimo',
                            data: {{ soilChartData|map(attribute='min')|list|tojson }},
                            backgroundColor: 'hsl(var(--chart-3))',
                        },
                        {
                            label: 'Nivel Máximo',
                            data: {{ soilChartData|map(attribute='max')|list|tojson }},
                            backgroundColor: 'hsl(var(--chart-4))',
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Niveles de Nutrientes de Suelo'
                        }
                    }
                }
            });

            // Configuración de gráficos histórico
            const historyChartCtx = document.getElementById('historyChart').getContext('2d');
            new Chart(historyChartCtx, {
                type: 'line',
                data: {
                    labels: {{ historicalData|map(attribute='fecha')|list|tojson }},
                    datasets: [
                        {
                            label: 'Nitrógeno',
                            data: {{ historicalData|map(attribute='nitrogeno')|list|tojson }},
                            fill: false,
                            borderColor: 'hsl(var(--color-nitrogeno))',
                            tension: 0.1
                        },
                        {
                            label: 'Fósforo',
                            data: {{ historicalData|map(attribute='fosforo')|list|tojson }},
                            fill: false,
                            borderColor: 'hsl(var(--color-fosforo))',
                            tension: 0.1
                        },
                        {
                            label: 'Potasio',
                            data: {{ historicalData|map(attribute='potasio')|list|tojson }},
                            fill: false,
                            borderColor: 'hsl(var(--color-potasio))',
                            tension: 0.1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Historial de Análisis'
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Fecha'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Nivel (%)'
                            }
                        }
                    }
                }
            });

            // Manejo de tabs
            const tabs = document.querySelectorAll('.tabs-trigger');
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    tabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    const targetContent = document.querySelector(this.getAttribute('data-target'));
                    document.querySelectorAll('.tabs-content').forEach(content => content.classList.add('hidden'));
                    targetContent.classList.remove('hidden');
                });
            });
        });
    </script>

    {% endblock %}
    
```

=== File: ./modules/foliage_report/templates/solicitar_informe.j2 ===
```jinja-html
{% extends "base.j2" %}
{% block content %}


        <div class="flex justify-between items-center mb-4">
            <h1 class="text-2xl font-bold">Configuración del Informe</h1>
            <div>
                <button class="bg-gray-200 px-4 py-2 rounded mr-2">Restablecer</button>
                <button class="bg-blue-600 text-white px-4 py-2 rounded">Guardar configuración</button>
            </div>
        </div>
        
        <div class="grid grid-cols-3 gap-4">
            <div class="col-span-2 space-y-4">

            {# filtro #}
<div class="bg-gray-50 p-4 rounded-lg shadow">
    <h2 class="text-lg font-semibold mb-2">Filtros de Selección</h2>
    <div class="grid grid-cols-3 gap-4">
        <div>
            <label class="block font-medium mb-2">Finca</label>
            <select class="w-full border p-2 rounded" id="farm-select">
                <option value="">Todas las fincas</option>
            </select>
        </div>
        <div>
            <label class="block font-medium mb-2">Lote</label>
            <select class="w-full border p-2 rounded" id="lot-select">
                <option value="">Todos los lotes</option>
            </select>
        </div>
        <div class="flex  items-center gap-2">
            <div>
                <label class="block font-medium mb-2">Fechas inicio</label>
                <input type="date" class="border p-1 rounded" id="date-filter">
            </div>
            <div>
                <label class="block font-medium mb-2">Final</label>
                <input type="date" class="border p-1 rounded" id="enddate-filter">
            </div>
        </div>
    </div>
</div>
{# end filtro #}
                
                <div class="bg-gray-50 p-4 rounded-lg shadow">
                    <h2 class="text-lg font-semibold mb-2">Análisis Disponibles</h2>
                    <table class="w-full border rounded">
                        <thead>
                            <tr class="bg-gray-200">
                                <th class="p-2">ID</th>
                                <th class="p-2">Fecha</th>
                                <th class="p-2">Finca</th>
                                <th class="p-2">Lote</th>
                                <th class="p-2">Tipo</th>
                                <th class="p-2">Proteínas</th>
                                <th class="p-2">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="border">
                                <td class="p-2">4</td>
                                <td class="p-2">2025-03-19</td>
                                <td class="p-2">El nuevo rocío</td>
                                <td class="p-2">Lote 1</td>
                                <td class="p-2">🌱</td>
                                <td class="p-2">543</td>
                                <td class="p-2 text-blue-500 cursor-pointer">👁️</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg shadow">
                <h2 class="text-lg font-semibold mb-2">Opciones del Informe</h2>
                <label class="block font-medium">Título del Informe</label>
                <input type="text" class="w-full border p-2 rounded mb-2" value="Informe de Análisis">
                
                <h3 class="font-semibold mt-4">Secciones a incluir</h3>
                <div class="space-y-2">
                    <label class="flex items-center">
                        <input type="checkbox" class="mr-2"> Análisis Foliar
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" class="mr-2"> Análisis de Suelo
                    </label>
                </div>
                
                <h3 class="font-semibold mt-4">Visualizaciones</h3>
                <label class="flex items-center">
                    <input type="checkbox" class="mr-2"> Gráficos comparativos
                </label>
                
                <button class="mt-4 bg-blue-600 text-white px-4 py-2 rounded w-full">Generar Informe</button>
            </div>
        </div>
    


{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Cargar fincas
    fetch('{{ url_for('foliage_report_api.get_farms') }}')
        .then(response => response.json())
        .then(farms => {
            const select = document.getElementById('farm-select');
            farms.forEach(farm => {
                const option = document.createElement('option');
                option.value = farm.id;
                option.textContent = farm.name;
                select.appendChild(option);
            });
        });
    
    // Actualizar lotes cuando cambia la finca
    document.getElementById('farm-select').addEventListener('change', function() {
        const farmId = this.value;
        fetch(`{{ url_for('foliage_report_api.get_lots') }}?farm_id=${farmId}`)
        
            .then(response => response.json())
            .then(lots => {
                const lotSelect = document.getElementById('lot-select');
                lotSelect.innerHTML = '<option value="">Todos los lotes</option>';
                lots.forEach(lot => {
                    const option = document.createElement('option');
                    option.value = lot.id;
                    option.textContent = lot.name;
                    lotSelect.appendChild(option);
                });
            });
    });
    
    // Filtrar análisis cuando cambian los valores
    const dateInput = document.getElementById('date-filter');
    const endDateInput = document.getElementById('enddate-filter');
    const lotSelect = document.getElementById('lot-select');

    dateInput.addEventListener('change', updateAnalyses);
    endDateInput.addEventListener('change', updateAnalyses);
    lotSelect.addEventListener('change', updateAnalyses);
    
    function updateAnalyses() {
        const params = {
            farm_id: document.getElementById('farm-select').value,
            lot_id: lotSelect.value,
            start_date: dateInput.value,
            end_date: dateInput.value
        };
        
        fetch('{{ url_for('foliage_report_api.get_analyses') }}', {
            params: new URLSearchParams(params)
        })
        .then(response => response.json())
        .then(analyses => {
            // Actualizar la interfaz con los nuevos resultados
            console.log(analyses);
        });
    }
});
</script>
{% endblock%}
```

=== File: ./modules/foliage_report/helpers.py ===
```python
# Python standard library imports
from decimal import Decimal, ROUND_HALF_UP
from typing import Dict, List, Tuple
from datetime import datetime
from statistics import mean, stdev
import json

# Third party imports
from scipy.optimize import linprog
from flask import jsonify
from flask.views import MethodView
from flask_jwt_extended import jwt_required, get_jwt
from werkzeug.exceptions import Forbidden

# Local application imports
from app.modules.foliage.models import (
    CommonAnalysis,
    LeafAnalysis,
    Lot,
    LotCrop,
    Objective,
    Nutrient,
    ProductContribution,
    leaf_analysis_nutrients,
    product_contribution_nutrients,
    objective_nutrients
)
from app.modules.foliage.models import Recommendation
from app.modules.foliage.controller import ProductContributionView
from app.modules.foliage.helpers import macronutrients, micronutrients
from app.extensions import db
from app.core.models import RoleEnum, ResellerPackage


class LeyLiebig:
    """
    Clase que implementa la Ley del Mínimo de Liebig para el cálculo de nutrientes en un cultivo.
    
    La Ley del Mínimo establece que el crecimiento de una planta está limitado por el nutriente más escaso en relación
    con sus necesidades, en lugar de depender de la cantidad total de nutrientes disponibles.
    
    Esta clase permite evaluar el estado nutricional de un cultivo comparando los niveles actuales con la demanda ideal,
    identificando el nutriente más limitante y proponiendo ajustes para optimizar su disponibilidad.
    """

    def __init__(self, nutrientes: dict, demanda_planta: Decimal):
        """
        Inicializa la clase con los nutrientes disponibles y la demanda ideal de la planta.
        
        :param nutrientes: Diccionario con los nutrientes y sus valores actuales en el suelo.
        :param demanda_planta: Valor total de la demanda nutricional ideal de la planta.
        """
        self.nutrientes = nutrientes
        self.demanda_planta = Decimal(demanda_planta)

    def calcular_p(self, valor_registro: Decimal) -> Decimal:
        """
        Calcula el porcentaje de suficiencia de un nutriente con respecto a la demanda de la planta.
        
        :param valor_registro: Valor actual del nutriente en el suelo.
        :return: Porcentaje de suficiencia del nutriente con respecto a la demanda ideal.
        """
        if self.demanda_planta == 0:
            return Decimal('0.00')
        return (Decimal(valor_registro) / self.demanda_planta) * Decimal('100.00')

    def calcular_i(self, mineral_p: Decimal, mineral_cv: Decimal) -> Decimal:
        """
        Calcula la cantidad de ajuste necesario para un nutriente limitante en función de su coeficiente de variación.
        
        :param mineral_p: Porcentaje de suficiencia del nutriente.
        :param mineral_cv: Coeficiente de variación del nutriente.
        :return: Cantidad de ajuste necesaria para alcanzar el nivel óptimo.
        """
        if mineral_p > Decimal('100.00'):
            result = ((mineral_p - Decimal('100.00')) * mineral_cv / Decimal('100.00'))
        else:
            result = ((Decimal('100.00') - mineral_p) * mineral_cv / Decimal('100.00'))
        return result.quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)

    def calcular_r(self, mineral_p: Decimal, mineral_i: Decimal) -> Decimal:
        """
        Determina el nivel corregido del nutriente después del ajuste.
        
        :param mineral_p: Porcentaje de suficiencia del nutriente.
        :param mineral_i: Cantidad de ajuste aplicada al nutriente.
        :return: Nivel corregido del nutriente en el suelo.
        """
        if mineral_p > Decimal('100.00'):
            return (mineral_p - mineral_i).quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
        return (mineral_p + mineral_i).quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)

    def calcular_nutriente_limite(self, valores_registro: dict) -> str:
        """
        Identifica el nutriente más limitante según la Ley del Mínimo de Liebig.
        
        El nutriente limitante es aquel que tiene el menor porcentaje de suficiencia.
        
        :param valores_registro: Diccionario con los valores actuales de los nutrientes en el suelo.
        :return: Nombre del nutriente más limitante.
        """
        valores_p = {mineral: self.calcular_p(valor) for mineral, valor in valores_registro.items()}
        return min(valores_p, key=valores_p.get)  # Devuelve el nutriente con el menor porcentaje de suficiencia

    def calcular_nutrientes(self, valores_registro: dict, valores_cv: dict) -> dict:
        """
        Calcula los ajustes necesarios para los nutrientes del cultivo.
        
        La corrección se aplica únicamente al nutriente más limitante para respetar la Ley del Mínimo de Liebig.
        
        :param valores_registro: Diccionario con los valores actuales de los nutrientes en el suelo.
        :param valores_cv: Diccionario con los coeficientes de variación de cada nutriente.
        :return: Diccionario con los valores de suficiencia (p), ajuste necesario (i) y nivel corregido (r) de cada nutriente.
        """
        nutriente_limitante = self.calcular_nutriente_limite(valores_registro)
        nutrientes = {}
        for mineral, valor_registro in valores_registro.items():
            p = self.calcular_p(valor_registro)
            i = self.calcular_i(p, valores_cv[mineral]) if mineral == nutriente_limitante else Decimal('0.00')
            r = self.calcular_r(p, i)
            nutrientes[mineral] = {'p': p, 'i': i, 'r': r}
        return nutrientes


class NutrientOptimizer:
    """
    Clase que optimiza la aplicación de productos para satisfacer los requerimientos de nutrientes de un cultivo,
    basada en la Ley del Mínimo de Liebig y programación lineal.
    """

    def __init__(self, nutrientes_actuales: Dict[str, Decimal], demandas_ideales: Dict[str, Decimal], 
                 productos_contribuciones: Dict[str, Dict[str, Decimal]], coeficientes_variacion: Dict[str, Decimal]):
        """
        Inicializa el optimizador de nutrientes.

        :param nutrientes_actuales: Diccionario con los niveles actuales de nutrientes (kg/ha o g/ha).
        :param demandas_ideales: Diccionario con los niveles ideales de nutrientes (kg/ha o g/ha).
        :param productos_contribuciones: Diccionario con los productos y sus contribuciones por nutriente.
        :param coeficientes_variacion: Diccionario con los coeficientes de variación por nutriente.
        """
        self.nutrientes_actuales = nutrientes_actuales
        self.demandas_ideales = demandas_ideales
        self.productos_contribuciones = productos_contribuciones
        self.coeficientes_variacion = coeficientes_variacion
        self.nutrientes = list(demandas_ideales.keys())
        self.productos = list(productos_contribuciones.keys())

    def calcular_ajustes(self) -> Dict[str, Decimal]:
        """
        Calcula los ajustes necesarios para cada nutriente usando la Ley de Liebig adaptada.
        """
        ajustes = {}
        for nutriente in self.nutrientes:
            actual = self.nutrientes_actuales.get(nutriente, Decimal('0.0'))
            ideal = self.demandas_ideales[nutriente]
            if actual < ideal:
                p = (actual / ideal) * Decimal('100.0') if ideal > 0 else Decimal('0.0')
                i = ((Decimal('100.0') - p) * self.coeficientes_variacion[nutriente] / Decimal('100.0')).quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
                ajustes[nutriente] = (ideal - actual) * i  # Cantidad absoluta a ajustar
            else:
                ajustes[nutriente] = Decimal('0.0')
        return ajustes

    def identificar_limitante(self) -> str:
        """
        Identifica el nutriente más limitante según la Ley de Liebig.
        """
        porcentajes = {
            nutriente: (self.nutrientes_actuales.get(nutriente, Decimal('0.0')) / self.demandas_ideales[nutriente]) * Decimal('100.0')
            if self.demandas_ideales[nutriente] > 0 else Decimal('0.0')
            for nutriente in self.nutrientes
        }
        return min(porcentajes, key=porcentajes.get)

    def optimizar_productos(self) -> Tuple[Dict[str, Decimal], Dict[str, Decimal]]:
        """
        Optimiza las cantidades de productos a aplicar usando programación lineal.
        
        :return: Diccionario con las cantidades de productos y los nutrientes aportados.
        """
        ajustes = self.calcular_ajustes()
        
        # Coeficientes de la función objetivo (minimizar la suma de productos)
        c = [1] * len(self.productos)

        # Matriz de restricciones (negativa para linprog)
        A_eq = []
        b_eq = []
        for nutriente in self.nutrientes:
            if ajustes[nutriente] > 0:
                fila = []
                for prod in self.productos:
                    contrib = self.productos_contribuciones[prod].get(nutriente, Decimal('0.0'))
                    fila.append(-float(contrib))  # Negativo para linprog
                A_eq.append(fila)
                b_eq.append(-float(ajustes[nutriente]))  # Negativo para linprog

        # Límites (cantidades >= 0)
        bounds = [(0, None)] * len(self.productos)

        # Resolver optimización
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if not res.success:
            raise ValueError("No se pudo optimizar la aplicación de productos.")

        # Resultados: cantidades de productos
        cantidades = {self.productos[i]: Decimal(str(round(x, 2))) for i, x in enumerate(res.x)}

        # Calcular nutrientes aportados
        nutrientes_aportados = {nutriente: Decimal('0.0') for nutriente in self.nutrientes}
        for prod, cantidad in cantidades.items():
            for nutriente, contrib in self.productos_contribuciones[prod].items():
                nutrientes_aportados[nutriente] += contrib * cantidad

        return cantidades, nutrientes_aportados

    def generar_recomendacion(self, lot_id: int) -> str:
        """
        Genera una recomendación para aplicar en el lote.
        
        :param lot_id: ID del lote donde se aplicará la recomendación.
        :return: Texto de la recomendación.
        """
        cantidades, nutrientes_aportados = self.optimizar_productos()
        lineas = [f"Aplicar en el lote {lot_id}:"]
        for prod, cantidad in cantidades.items():
            if cantidad > 0:
                lineas.append(f"- {cantidad} unidades de {prod}")
        lineas.append("Nutrientes aportados:")
        for nutriente, cantidad in nutrientes_aportados.items():
            unidad = "kg/ha" if nutriente in [n["name"] for n in macronutrients] else "g/ha"
            lineas.append(f"- {nutriente}: {cantidad} {unidad}")
        return "\n".join(lineas)


# # # Datos de ejemplo basados en los nutrientes proporcionados
# macronutrients = [
#     {"name": "Nitrógeno", "symbol": "N", "unit": "kg/ha", "category": "MACRONUTRIENT"},
#     {"name": "Fósforo", "symbol": "P", "unit": "kg/ha", "category": "MACRONUTRIENT"},
#     {"name": "Potasio", "symbol": "K", "unit": "kg/ha", "category": "MACRONUTRIENT"},
#     {"name": "Calcio", "symbol": "Ca", "unit": "kg/ha", "category": "MACRONUTRIENT"},
#     {"name": "Magnesio", "symbol": "Mg", "unit": "kg/ha", "category": "MACRONUTRIENT"},
#     {"name": "Azufre", "symbol": "S", "unit": "kg/ha", "category": "MACRONUTRIENT"},
# ]

# micronutrients = [
#     {"name": "Cobre", "symbol": "Cu", "unit": "g/ha", "category": "MICRONUTRIENT"},
#     {"name": "Zinc", "symbol": "Zn", "unit": "g/ha", "category": "MICRONUTRIENT"},
#     {"name": "Manganeso", "symbol": "Mn", "unit": "g/ha", "category": "MICRONUTRIENT"},
#     {"name": "Boro", "symbol": "B", "unit": "g/ha", "category": "MICRONUTRIENT"},
#     {"name": "Molibdeno", "symbol": "Mo", "unit": "g/ha", "category": "MICRONUTRIENT"},
#     {"name": "Cloro", "symbol": "Cl", "unit": "g/ha", "category": "MICRONUTRIENT"},
#     {"name": "Hierro", "symbol": "Fe", "unit": "g/ha", "category": "MICRONUTRIENT"},
#     {"name": "Silicio", "symbol": "Si", "unit": "kg/ha", "category": "MICRONUTRIENT"},
# ]

# # Ejemplo de uso
# nutrientes_actuales = {
#     "Nitrógeno": Decimal("50.0"),  # kg/ha
#     "Fósforo": Decimal("20.0"),    # kg/ha
#     "Potasio": Decimal("80.0"),    # kg/ha
#     "Cobre": Decimal("100.0"),     # g/ha
#     "Zinc": Decimal("50.0")        # g/ha
# }

# demandas_ideales = {
#     "Nitrógeno": Decimal("100.0"),  # kg/ha
#     "Fósforo": Decimal("50.0"),     # kg/ha
#     "Potasio": Decimal("90.0"),     # kg/ha
#     "Cobre": Decimal("150.0"),      # g/ha
#     "Zinc": Decimal("80.0")         # g/ha
# }

# productos_contribuciones = {
#     "Fertilizante A": {"Nitrógeno": Decimal("10.0"), "Fósforo": Decimal("5.0"), "Potasio": Decimal("2.0")},
#     "Fertilizante B": {"Nitrógeno": Decimal("5.0"), "Fósforo": Decimal("15.0"), "Cobre": Decimal("20.0")},
#     "Fertilizante C": {"Zinc": Decimal("30.0"), "Cobre": Decimal("10.0")}
# }

# coeficientes_variacion = {
#     "Nitrógeno": Decimal("0.5"),
#     "Fósforo": Decimal("0.3"),
#     "Potasio": Decimal("0.4"),
#     "Cobre": Decimal("0.2"),
#     "Zinc": Decimal("0.25")
# }

# # Instanciar y usar la clase
# optimizador = NutrientOptimizer(nutrientes_actuales, demandas_ideales, productos_contribuciones, coeficientes_variacion)
# limitante = optimizador.identificar_limitante()
# print(f"Nutriente limitante: {limitante}")

# recomendacion = optimizador.generar_recomendacion(lot_id=1)
# print(recomendacion)


def calcular_cv_nutriente(lot_id, nutriente_name):
    """Determinar los Coeficientes de Variación """
    # Obtener valores históricos de LeafAnalysis para el lote
    valores = db.session.query(leaf_analysis_nutrients.c.value).join(LeafAnalysis).join(CommonAnalysis).filter(
        CommonAnalysis.lot_id == lot_id,
        leaf_analysis_nutrients.c.nutrient_id == Nutrient.query.filter_by(name=nutriente_name).first().id
    ).all()
    valores = [v[0] for v in valores]
    if len(valores) < 2:
        return Decimal('0.5')  # Valor por defecto si no hay suficientes datos
    mu = mean(valores)
    sigma = stdev(valores)
    return Decimal(str(sigma / mu)).quantize(Decimal('0.01'))

# ejemplo. 
# cv_nitrogeno = calcular_cv_nutriente(lot_id=1, nutriente_name="Nitrógeno")
# print(f"CV Nitrógeno: {cv_nitrogeno}")

# Calculo por ajuste dinámico. 
# Datos históricos: Calcula el CV estadístico si hay suficientes análisis previos.
# Valores por defecto: Usa estándares agrícolas si no hay datos.
# Ajuste dinámico: Permite que un usuario (ej., agrónomo) modifique los CV según observaciones locales.

def determinar_coeficientes_variacion(lot_id: int) -> Dict[str, Decimal]:
    coeficientes = {}
    nutrientes = [n["name"] for n in macronutrients + micronutrients]
    for nutriente in nutrientes:
        cv = calcular_cv_nutriente(lot_id, nutriente)
        if cv == Decimal('0.5'):  # Valor por defecto si no hay datos
            # Asignar valores basados en literatura
            if nutriente in ["Nitrógeno"]:
                cv = Decimal("0.5")
            elif nutriente in ["Fósforo"]:
                cv = Decimal("0.3")
            elif nutriente in ["Potasio"]:
                cv = Decimal("0.4")
            elif nutriente in ["Cobre", "Zinc"]:
                cv = Decimal("0.25")
            else:
                cv = Decimal("0.3")  # Default genérico
        coeficientes[nutriente] = cv
    return coeficientes


def contribuciones_de_producto():
    """Contribuciones de producto """
    product_contributions = ProductContribution.query.all()
    
    result = {}
    
    for pc in product_contributions:
        product_name = pc.product.name
        
        if product_name not in result:
            result[product_name] = {}
        
        nutrient_contributions = (
            db.session.query(product_contribution_nutrients)
            .filter_by(product_contribution_id=pc.id)
            .all()
        )
        
        for contribution in nutrient_contributions:
            nutrient = Nutrient.query.get(contribution.nutrient_id)
            result[product_name][nutrient.name] = Decimal(str(contribution.contribution))
    
    return result




##################################################################
class ObjectiveResource:
    def get_objective_list(self):
        objectives = Objective.query.all()
        crop_data = self._process_objectives_by_crop(objectives)
        return CropResponse(crop_data)

    def _serialize_objective(self, objective):
        """Serialize an Objective object to a dictionary (unchanged from your code)"""
        nutrient_targets = (
            db.session.query(objective_nutrients)
            .filter_by(objective_id=objective.id)
            .all()
        )
        nutrient_targets_dict = [
            {
                "nutrient_id": target.nutrient_id,
                "target_value": Decimal(str(target.target_value)),  # Convert to Decimal
                "nutrient_name": Nutrient.query.get(target.nutrient_id).name,
                "nutrient_symbol": Nutrient.query.get(target.nutrient_id).symbol,
                "nutrient_unit": Nutrient.query.get(target.nutrient_id).unit,
            }
            for target in nutrient_targets
        ]
        return {
            "id": objective.id,
            "crop_id": objective.crop_id,
            "crop_name": objective.crop.name,
            "target_value": Decimal(str(objective.target_value)),
            "protein": Decimal(str(objective.protein)),
            "rest": Decimal(str(objective.rest)),
            "created_at": objective.created_at.isoformat(),
            "updated_at": objective.updated_at.isoformat(),
            "nutrient_targets": nutrient_targets_dict,
        }

    def _process_objectives_by_crop(self, objectives):
        """Process objectives into a dictionary grouped by crop name with multiple objectives"""
        crop_dict = {}
        for obj in objectives:
            serialized = self._serialize_objective(obj)
            crop_name = serialized["crop_name"].lower()  # e.g., 'arroz', 'papa'
            
            # Initialize crop entry as a list if not present
            if crop_name not in crop_dict:
                crop_dict[crop_name] = []
            
            # Simplify nutrient targets into a dict for easier access
            nutrient_dict = {
                target["nutrient_name"]: target["target_value"]
                for target in serialized["nutrient_targets"]
            }
            # Add objective data to the crop's list
            crop_dict[crop_name].append({
                "id": serialized["id"],
                "created_at": serialized["created_at"],
                "updated_at": serialized["updated_at"],
                "nutrients": nutrient_dict
            })
        
        return crop_dict

class CropResponse:
    """Custom response class to allow accessing crop data like response.arroz"""
    def __init__(self, crop_data):
        self.crop_data = crop_data
        # Dynamically set attributes for each crop
        for crop_name in crop_data:
            setattr(self, crop_name, CropObjectives(crop_data[crop_name]))

    def get_json(self):
        """Return the full crop data as JSON"""
        return json.dumps(self.crop_data, ensure_ascii=False, indent=4, default=str)

class CropObjectives:
    """Class to handle multiple objectives for a single crop"""
    def __init__(self, objectives):
        self.objectives = objectives  # List of objectives for this crop

    def get(self, index=None, id=None):
        """Access a specific objective by index or id"""
        if id is not None:
            for obj in self.objectives:
                if obj["id"] == id:
                    return CropData(obj["nutrients"])
            raise ValueError(f"No objective found with id {id}")
        if index is not None:
            if 0 <= index < len(self.objectives):
                return CropData(self.objectives[index]["nutrients"])
            raise IndexError(f"Index {index} out of range for {len(self.objectives)} objectives")
        # Default: return the most recent objective (based on updated_at)
        sorted_objectives = sorted(self.objectives, key=lambda x: x["updated_at"], reverse=True)
        return CropData(sorted_objectives[0]["nutrients"])

    def all(self):
        """Return all objectives as a list of CropData objects"""
        return [CropData(obj["nutrients"]) for obj in self.objectives]

    def get_json(self):
        """Return all objectives as JSON"""
        return json.dumps(self.objectives, ensure_ascii=False, indent=4, default=str)

class CropData:
    """Helper class to represent nutrient data for a single objective"""
    def __init__(self, nutrient_data):
        self.nutrient_data = nutrient_data

    def get_json(self):
        """Return nutrient data as JSON"""
        return json.dumps(self.nutrient_data, ensure_ascii=False, indent=4, default=str)

    def __str__(self):
        """String representation for printing"""
        return str({k: str(v) for k, v in self.nutrient_data.items()})

########################################################

# leaf_analyses

class LeafAnalysisResource:
    def get_leaf_analysis_list(self):
        leaf_analyses = LeafAnalysis.query.all()
        
        # Process leaf analyses into a structure grouped by common_analysis_id
        analysis_data = self._process_leaf_analyses_by_common_id(leaf_analyses)
        return LeafAnalysisResponse(analysis_data)

    def _serialize_leaf_analysis(self, leaf_analysis):
        """Serializa un objeto LeafAnalysis a un diccionario."""
        nutrient_values = (
            db.session.query(leaf_analysis_nutrients)
            .filter_by(leaf_analysis_id=leaf_analysis.id)
            .all()
        )
        nutrient_values_dict = [
            {
                "nutrient_id": nv.nutrient_id,
                "value": Decimal(str(nv.value)),  # Convert to Decimal
                "nutrient_name": Nutrient.query.get(nv.nutrient_id).name,
                "nutrient_symbol": Nutrient.query.get(nv.nutrient_id).symbol,
                "nutrient_unit": Nutrient.query.get(nv.nutrient_id).unit,
            }
            for nv in nutrient_values
        ]
        return {
            "id": leaf_analysis.id,
            "common_analysis_id": leaf_analysis.common_analysis_id,
            "created_at": leaf_analysis.created_at.isoformat(),
            "updated_at": leaf_analysis.updated_at.isoformat(),
            "nutrient_values": nutrient_values_dict,
        }

    def _process_leaf_analyses_by_common_id(self, leaf_analyses):
        """Process leaf analyses into a dictionary grouped by common_analysis_id."""
        analysis_dict = {}
        for leaf_analysis in leaf_analyses:
            serialized = self._serialize_leaf_analysis(leaf_analysis)
            common_id = str(serialized["common_analysis_id"])  # Convert to string for attribute access
            
            # Initialize entry as a list if not present
            if common_id not in analysis_dict:
                analysis_dict[common_id] = []
            
            # Simplify nutrient values into a dict
            nutrient_dict = {
                nutrient["nutrient_name"]: nutrient["value"]
                for nutrient in serialized["nutrient_values"]
            }
            # Add analysis data to the common_analysis_id's list
            analysis_dict[common_id].append({
                "id": serialized["id"],
                "created_at": serialized["created_at"],
                "updated_at": serialized["updated_at"],
                "nutrients": nutrient_dict
            })
        
        return analysis_dict

class LeafAnalysisResponse:
    """Custom response class to allow accessing leaf analyses like response.common_analysis_id.<id>"""
    def __init__(self, analysis_data):
        self.analysis_data = analysis_data
        # Dynamically create a nested object for common_analysis_id
        self.common_analysis_id = CommonAnalysisContainer(analysis_data)

    def get_json(self):
        """Return the full analysis data as JSON"""
        return json.dumps(self.analysis_data, ensure_ascii=False, indent=4, default=str)

class CommonAnalysisContainer:
    """Container for accessing leaf analyses by common_analysis_id"""
    def __init__(self, analysis_data):
        self.analysis_data = analysis_data
        # Dynamically set attributes for each common_analysis_id
        for common_id in analysis_data:
            setattr(self, common_id, LeafAnalyses(self.analysis_data[common_id]))

class LeafAnalyses:
    """Class to handle multiple leaf analyses for a single common_analysis_id"""
    def __init__(self, analyses):
        self.analyses = analyses  # List of leaf analyses for this common_analysis_id

    def get(self, index=None, id=None):
        """Access a specific leaf analysis by index or id"""
        if id is not None:
            for analysis in self.analyses:
                if analysis["id"] == id:
                    return LeafAnalysisData(analysis["nutrients"])
            raise ValueError(f"No leaf analysis found with id {id}")
        if index is not None:
            if 0 <= index < len(self.analyses):
                return LeafAnalysisData(self.analyses[index]["nutrients"])
            raise IndexError(f"Index {index} out of range for {len(self.analyses)} analyses")
        # Default: return the most recent analysis (based on updated_at)
        sorted_analyses = sorted(self.analyses, key=lambda x: x["updated_at"], reverse=True)
        return LeafAnalysisData(sorted_analyses[0]["nutrients"])

    def all(self):
        """Return all analyses as a list of LeafAnalysisData objects"""
        return [LeafAnalysisData(analysis["nutrients"]) for analysis in self.analyses]

    def get_json(self):
        """Return all analyses as JSON"""
        return json.dumps(self.analyses, ensure_ascii=False, indent=4, default=str)

class LeafAnalysisData:
    """Helper class to represent nutrient data for a single leaf analysis"""
    def __init__(self, nutrient_data):
        self.nutrient_data = nutrient_data

    def get_json(self):
        """Return nutrient data as JSON"""
        return json.dumps(self.nutrient_data, ensure_ascii=False, indent=4, default=str)

    def __str__(self):
        """String representation for printing"""
        return str({k: str(v) for k, v in self.nutrient_data.items()})
    



class ReportView(MethodView):
    """Clase para generar reportes integrados de análisis"""
    decorators = [jwt_required()]

    def get(self, id):
        """
        Genera reporte completo de análisis con niveles óptimos
        Args:
            common_analysis_id (int): ID del análisis común a reportar
        Returns:
            JSON: Estructura con datos de análisis y niveles óptimos
        """
        common_analysis_id = id
        common_analysis = self._get_common_analysis(common_analysis_id)
        self._check_access(common_analysis)

        report_data = {
            "analysisData": self._build_analysis_data(common_analysis),
            "optimalLevels": self._get_optimal_levels(common_analysis)
        }

        return jsonify(report_data), 200

    def _get_common_analysis(self, analysis_id):
        """Obtiene el análisis común con relaciones optimizadas"""
        return CommonAnalysis.query.options(
            db.joinedload(CommonAnalysis.lot).joinedload(Lot.farm),
            db.joinedload(CommonAnalysis.soil_analysis),
            db.joinedload(CommonAnalysis.leaf_analysis)
        ).get_or_404(analysis_id)

    def _check_access(self, common_analysis):
        """Valida permisos de acceso a la organización"""
        claims = get_jwt()
        user_role = claims.get("rol")
        
        if user_role == RoleEnum.ADMINISTRATOR.value:
            return
            
        if user_role == RoleEnum.RESELLER.value:
            org_id = common_analysis.organization.id if common_analysis.organization else None
            if not org_id:
                raise Forbidden("No se pudo determinar la organización del análisis")
                
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            
            if not reseller_package or org_id not in reseller_package.organization_ids:
                raise Forbidden("Acceso denegado al recurso")

    def _build_analysis_data(self, analysis):
        """Construye la estructura principal del reporte"""
        return {
            "common": self._serialize_common(analysis),
            "foliar": self._get_foliar_data(analysis.leaf_analysis),
            "soil": self._get_soil_data(analysis.soil_analysis)
        }

    def _serialize_common(self, analysis):
        """Serializa datos del análisis común"""
        return {
            "id": analysis.id,
            "fechaAnalisis": analysis.date.isoformat(),
            "finca": analysis.farm_name if analysis.lot and analysis.lot.farm else "N/A",
            "lote": analysis.lot_name if analysis.lot else "N/A",
            "proteinas": analysis.protein,
            "descanso": analysis.rest,
            "diasDescanso": analysis.rest_days,
            "mes": analysis.month,
            "aforo": analysis.yield_estimate
        }

    def _get_foliar_data(self, leaf_analysis):
        """Obtiene y formatea datos foliares"""
        if not leaf_analysis:
            return None

        foliar_data = {"id": leaf_analysis.id}
        nutrients = db.session.query(leaf_analysis_nutrients).filter_by(
            leaf_analysis_id=leaf_analysis.id
        ).all()

        for nv in nutrients:
            nutrient = Nutrient.query.get(nv.nutrient_id)
            if nutrient:
                key = nutrient.name.lower().replace(" ", "")
                foliar_data[key] = nv.value

        return foliar_data

    def _get_soil_data(self, soil_analysis):
        """Obtiene y formatea datos de suelo"""
        if not soil_analysis:
            return None

        return {
            "id": soil_analysis.id,
            "energia": soil_analysis.energy,
            "pastoreo": soil_analysis.grazing
        }

    def _lot_crop_data(self, common_analysis):
        """Obtiene el cultivo activo del lote en la fecha del análisis"""
        if not common_analysis or not common_analysis.lot_id:
            return None

        # Buscar el cultivo activo en el rango de fechas
        lot_crop = LotCrop.query.filter(
            LotCrop.lot_id == common_analysis.lot_id,
            LotCrop.start_date <= common_analysis.date,
            db.or_(
                LotCrop.end_date >= common_analysis.date,
                LotCrop.end_date.is_(None)
            )
        ).options(db.joinedload(LotCrop.crop)).first()

        return lot_crop

    def _get_optimal_levels(self, common_analysis):
        """Obtiene niveles óptimos del cultivo actual"""
        lot_crop = self._lot_crop_data(common_analysis)
        if not lot_crop or not lot_crop.crop:
            return None

        objective = Objective.query.filter_by(crop_id=lot_crop.crop.id).first()
        if not objective:
            return None

        return {
            "info": {
                "cultivo": lot_crop.crop.name,
                "valor_obj": objective.target_value,
                "proteina": objective.protein,
                "descanso": objective.rest
            },
            "nutrientes": self._get_nutrient_targets(objective)
        }

    def _get_nutrient_targets(self, objective):
        """Obtiene y formatea los objetivos de nutrientes desde objective_nutrients"""
        targets = {}
        obj_nutrients = db.session.query(objective_nutrients).filter_by(
            objective_id=objective.id
        ).all()

        for on in obj_nutrients:
            nutrient = Nutrient.query.get(on.nutrient_id)
            if nutrient:
                key = nutrient.name.lower().replace(" ", "")
                targets[key] = on.target_value  # Usamos el target_value de objective_nutrients directamente

        return targets

#  Título	Finca / Lote	Cultivo	Fecha	Tipo	Autor
"""
Reportes, incluirán los datos completos de un análisis completo común (CommonAnalysis) 
ahí se identificará el análisis de suelo (SoilAnalysis) y foliar (LeafAnalysis, debe incluir los nutrientes relacionados de la tabla leaf_analysis_nutrients ) relacionados con el ID del CommonAnalysis, esto deben presentarse así (Nota, los datos y listado de nutriente deben obtenerse de los registrados en el modelo Nutrient): 
        
        
    analysisData = {
        "common": {
            "id": 3,
            "fechaAnalisis": "2025-03-26",
            "finca": "El nuevo rocío",
            "lote": "Lote 1",
            "proteinas": 6.0,
            "descanso": 5.0,
            "diasDescanso": 5,
            "mes": 5,
        },
        "foliar": {
            "id": 1,
            "nitrogeno": 2.5,
            "fosforo": 0.3,
            "potasio": 1.8,
            "calcio": 1.2,
            "magnesio": 0.4,
            "azufre": 0.2,
            "hierro": 85,
            "manganeso": 45,
            "zinc": 18,
            "cobre": 6,
            "boro": 25,
        },
        "soil": {
            "id": 1,
            "ph": 6.5,
            "materiaOrganica": 3.2,
            "nitrogeno": 0.15,
            "fosforo": 12,
            "potasio": 180,
            "calcio": 1200,
            "magnesio": 180,
            "azufre": 15,
            "textura": "Franco-arcillosa",
            "cic": 15.2,
        },
    }
    
optimalLevels se obtendrá a partir del tipo de cultivo, este se comparará con los tipos de cultivo registrados en Crops y sus valores de nutrientes registrados en objective_nutrients (Nota, los datos y listado de nutriente deben obtenerse de los registrados en el modelo Nutrient)
    optimalLevels = {
        VALOR OBJETIVO	PROTEÍNA	DESCANSO
        "info": {
            "cultivo": "papa", 
            "valor_obj": "10",
            "proteina": "8",
            "descanso": "5",
        
        }
        "nutrientes": {
            "nitrogeno": {"min": 2.8, "max": 3.5},
            "fosforo": {"min": 0.2, "max": 0.4},
            "potasio": {"min": 2.0, "max": 3.0},
            "calcio": {"min": 1.0, "max": 2.0},
            "magnesio": {"min": 0.3, "max": 0.6},
            "azufre": {"min": 0.2, "max": 0.4},
            "hierro": {"min": 50, "max": 150},
            "manganeso": {"min": 25, "max": 100},
            "zinc": {"min": 20, "max": 50},
            "cobre": {"min": 5, "max": 15},
            "boro": {"min": 20, "max": 50},
        },
    }

    foliarChartData = [
        {"name": "N", "actual": analysisData["foliar"]["nitrogeno"], "min": optimalLevels["foliar"]["nitrogeno"]["min"], "max": optimalLevels["foliar"]["nitrogeno"]["max"]},
        {"name": "P", "actual": analysisData["foliar"]["fosforo"], "min": optimalLevels["foliar"]["fosforo"]["min"], "max": optimalLevels["foliar"]["fosforo"]["max"]},
        {"name": "K", "actual": analysisData["foliar"]["potasio"], "min": optimalLevels["foliar"]["potasio"]["min"], "max": optimalLevels["foliar"]["potasio"]["max"]},
        {"name": "Ca", "actual": analysisData["foliar"]["calcio"], "min": optimalLevels["foliar"]["calcio"]["min"], "max": optimalLevels["foliar"]["calcio"]["max"]},
        {"name": "Mg", "actual": analysisData["foliar"]["magnesio"], "min": optimalLevels["foliar"]["magnesio"]["min"], "max": optimalLevels["foliar"]["magnesio"]["max"]},
        {"name": "S", "actual": analysisData["foliar"]["azufre"], "min": optimalLevels["foliar"]["azufre"]["min"], "max": optimalLevels["foliar"]["azufre"]["max"]},
    ]

    soilChartData = [
        {"name": "pH", "actual": analysisData["soil"]["ph"], "min": optimalLevels["soil"]["ph"]["min"], "max": optimalLevels["soil"]["ph"]["max"], "unit": ""},
        {"name": "M.O.", "actual": analysisData["soil"]["materiaOrganica"], "min": optimalLevels["soil"]["materiaOrganica"]["min"], "max": optimalLevels["soil"]["materiaOrganica"]["max"], "unit": "%"},
        {"name": "N", "actual": analysisData["soil"]["nitrogeno"], "min": optimalLevels["soil"]["nitrogeno"]["min"], "max": optimalLevels["soil"]["nitrogeno"]["max"], "unit": "%"},
        {"name": "P", "actual": analysisData["soil"]["fosforo"], "min": optimalLevels["soil"]["fosforo"]["min"], "max": optimalLevels["soil"]["fosforo"]["max"], "unit": "ppm"},
        {"name": "K", "actual": analysisData["soil"]["potasio"], "min": optimalLevels["soil"]["potasio"]["min"], "max": optimalLevels["soil"]["potasio"]["max"], "unit": "ppm"},
        {"name": "CIC", "actual": analysisData["soil"]["cic"], "min": optimalLevels["soil"]["cic"]["min"], "max": optimalLevels["soil"]["cic"]["max"], "unit": "meq/100g"},
    ]

    historicalData = [
        {"fecha": "Ene 2025", "nitrogeno": 2.3, "fosforo": 0.25, "potasio": 1.5},
        {"fecha": "Feb 2025", "nitrogeno": 2.4, "fosforo": 0.28, "potasio": 1.6},
        {"fecha": "Mar 2025", "nitrogeno": 2.5, "fosforo": 0.3, "potasio": 1.8},
    ]

    nutrientNames = {
        "nitrogeno": "Nitrógeno",
        "fosforo": "Fósforo",
        "potasio": "Potasio",
        "calcio": "Calcio",
        "magnesio": "Magnesio",
        "azufre": "Azufre",
        "hierro": "Hierro",
        "manganeso": "Manganeso",
        "zinc": "Zinc",
        "cobre": "Cobre",
        "boro": "Boro",
        "ph": "pH",
        "materiaOrganica": "Materia Orgánica",
        "cic": "CIC",
    }

    def getNutrientStatus(actual, min, max):
        if actual < min:
            return "deficiente"
        if actual > max:
            return "excesivo"
        return "óptimo"

    def getStatusColor(status):
        match status:
            case "deficiente":
                return "text-red-500"
            case "excesivo":
                return "text-yellow-500"
            case "óptimo":
                return "text-green-500"
            case _:
                return ""

    def getStatusIcon(status):
        match status:
            case "deficiente":
                return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-red-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>'
            case "excesivo":
                return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-yellow-500"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>'
            case "óptimo":
                return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 text-green-500"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="12 2 2 7.86 12 12"></polyline><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>'
            case _:
                return ""

    def findLimitingNutrient():
        limitingNutrient = None
        lowestPercentage = 100

        for nutrient, value in analysisData["foliar"].items():
            if nutrient in optimalLevels["foliar"]:
                min_value = optimalLevels["foliar"][nutrient]["min"]
                max_value = optimalLevels["foliar"][nutrient]["max"]
                optimalMid = (min_value + max_value) / 2
                percentage = (value / optimalMid) * 100
                if percentage < lowestPercentage and percentage < 90:
                    lowestPercentage = percentage
                    limitingNutrient = {
                        "name": nutrient,
                        "value": value,
                        "optimal": optimalMid,
                        "percentage": percentage,
                        "type": "foliar",
                    }

        for nutrient, value in analysisData["soil"].items():
            if nutrient in optimalLevels["soil"] and nutrient != "ph":
                min_value = optimalLevels["soil"][nutrient]["min"]
                max_value = optimalLevels["soil"][nutrient]["max"]
                optimalMid = (min_value + max_value) / 2
                percentage = (value / optimalMid) * 100
                if percentage < lowestPercentage and percentage < 90:
                    lowestPercentage = percentage
                    limitingNutrient = {
                        "name": nutrient,
                        "value": value,
                        "optimal": optimalMid,
                        "percentage": percentage,
                        "type": "soil",
                    }

        return limitingNutrient

    def generateRecommendations():
        recommendations = []

        limitingNutrient = findLimitingNutrient()

        if limitingNutrient:
            nutrientName = nutrientNames[limitingNutrient["name"]] or limitingNutrient["name"]
            recommendations.append({
                "title": f"Corregir deficiencia de {nutrientName}",
                "description": f"El {nutrientName} es el nutriente limitante según la Ley de Liebig. Está al limitingNutrient['percentage']% del nivel óptimo.",
                "priority": "alta",
                "action": "Aplicar fertilizante foliar rico en {nutrientName}" if limitingNutrient["type"] == "foliar" else f"Incorporar {nutrientName} al suelo mediante fertilización",
            })

        phStatus = getNutrientStatus(analysisData["soil"]["ph"], optimalLevels["soil"]["ph"]["min"], optimalLevels["soil"]["ph"]["max"])
        if phStatus != "óptimo":
            recommendations.append({
                "title": "Corregir acidez del suelo" if phStatus == "deficiente" else "Reducir alcalinidad del suelo",
                "description": f"El pH actual ({analysisData['soil']['ph']}) está {'por debajo' if phStatus == 'deficiente' else 'por encima'} del rango óptimo.",
                "priority": "media",
                "action": "Aplicar cal agrícola para elevar el pH" if phStatus == "deficiente" else "Aplicar azufre elemental o materia orgánica para reducir el pH",
            })

        moStatus = getNutrientStatus(analysisData["soil"]["materiaOrganica"], optimalLevels["soil"]["materiaOrganica"]["min"], optimalLevels["soil"]["materiaOrganica"]["max"])
        if moStatus == "deficiente":
            recommendations.append({
                "title": "Aumentar materia orgánica",
                "description": f"El nivel de materia orgánica ({analysisData['soil']['materiaOrganica']}%) está por debajo del óptimo.",
                "priority": "media",
                "action": "Incorporar compost, estiércol bien descompuesto o abonos verdes",
            })

        return recommendations

    limitingNutrient = findLimitingNutrient()
    recommendations = generateRecommendations()
"""
```

=== File: ./modules/foliage_report/controller.py ===
```python
# Python standard library imports
from functools import wraps
import json

# Third party imports
from werkzeug.exceptions import BadRequest, NotFound, Forbidden
from flask.views import MethodView
from flask_jwt_extended import get_jwt, jwt_required
from flask import request, jsonify, Response

# Local application imports
from app.extensions import db
from app.core.controller import check_permission, check_resource_access
from app.core.models import ResellerPackage, RoleEnum
from app.modules.foliage.models import Recommendation

class RecommendationView(MethodView):
    """Class to manage CRUD operations for recommendations"""

    decorators = [jwt_required()]

    @check_permission(required_roles=["administrator", "reseller"])
    def get(self, recommendation_id=None):
        """
        Retrieve a list of recommendations or a specific recommendation
        Args:
            recommendation_id (int, optional): ID of the recommendation to retrieve
        Returns:
            JSON: List of recommendations or details of a specific recommendation
        """
        if recommendation_id:
            return self._get_recommendation(recommendation_id)
        return self._get_recommendation_list()

    @check_permission(required_roles=["administrator", "reseller"])
    def post(self):
        """
        Create a new recommendation
        Returns:
            JSON: Details of the created recommendation
        """
        data = request.get_json()
        required_fields = ["lot_id", "date", "recommendation"]
        if not data or not all(k in data for k in required_fields):
            raise BadRequest("Missing required fields")
        return self._create_recommendation(data)

    @check_permission(resource_owner_check=True)
    def put(self, id: int):
        """
        Update an existing recommendation
        Args:
            recommendation_id (int): ID of the recommendation to update
        Returns:
            JSON: Details of the updated recommendation
        """
        data = request.get_json()
        recommendation_id = id
        if not data or not recommendation_id:
            raise BadRequest("Missing recommendation_id or data")
        return self._update_recommendation(recommendation_id, data)

    @check_permission(resource_owner_check=True)
    def delete(self, id=None):
        """
        Delete an existing recommendation
        Args:
            recommendation_id (int): ID of the recommendation to delete
        Returns:
            JSON: Confirmation message
        """
        recommendation_id = id
        if not recommendation_id:
            raise BadRequest("Missing recommendation_id")
        return self._delete_recommendation(recommendation_id)

    # Helper Methods
    def _get_recommendation_list(self):
        """Retrieve a list of all recommendations"""
        claims = get_jwt()
        user_role = claims.get("rol")
        if user_role == RoleEnum.ADMINISTRATOR.value:
            recommendations = Recommendation.query.all()
        elif user_role == RoleEnum.RESELLER.value:
            reseller_package = ResellerPackage.query.filter_by(
                reseller_id=claims.get("org_id")
            ).first()
            if not reseller_package:
                raise NotFound("Reseller package not found.")
            recommendations = []
            for organization in reseller_package.organizations:
                for lot in organization.lots:
                    recommendations.extend(lot.recommendations)
        else:
            raise Forbidden(
                "Only administrators and resellers can list recommendations"
            )
        response_data = [self._serialize_recommendation(r) for r in recommendations]
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _get_recommendation(self, recommendation_id):
        """Retrieve details of a specific recommendation"""
        recommendation = Recommendation.query.get_or_404(recommendation_id)
        claims = get_jwt()
        if not self._has_access(recommendation, claims):
            raise Forbidden("You do not have access to this recommendation")
        response_data = self._serialize_recommendation(recommendation)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _create_recommendation(self, data):
        """Create a new recommendation"""
        lot_id = data["lot_id"]
        date = data["date"]
        recommendation = data["recommendation"]
        rec = Recommendation(lot_id=lot_id, date=date, recommendation=recommendation)
        db.session.add(rec)
        db.session.commit()
        response_data = self._serialize_recommendation(rec)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=201, mimetype="application/json")

    def _update_recommendation(self, recommendation_id, data):
        """Update an existing recommendation"""
        recommendation = Recommendation.query.get_or_404(recommendation_id)
        if "date" in data:
            recommendation.date = data["date"]
        if "recommendation" in data:
            recommendation.recommendation = data["recommendation"]
        db.session.commit()
        response_data = self._serialize_recommendation(recommendation)
        json_data = json.dumps(response_data, ensure_ascii=False, indent=4)
        return Response(json_data, status=200, mimetype="application/json")

    def _delete_recommendation(self, recommendation_id):
        """Delete an existing recommendation"""
        recommendation = Recommendation.query.get_or_404(recommendation_id)
        db.session.delete(recommendation)
        db.session.commit()
        return jsonify({"message": "Recommendation deleted successfully"}), 200

    def _has_access(self, recommendation, claims):
        """Check if the current user has access to the recommendation"""
        return check_resource_access(recommendation, claims)

    def _serialize_recommendation(self, recommendation):
        """Serialize a Recommendation object to a dictionary"""
        return {
            "id": recommendation.id,
            "lot_id": recommendation.lot_id,
            "date": recommendation.date,
            "recommendation": recommendation.recommendation,
            "created_at": recommendation.created_at.isoformat(),
            "updated_at": recommendation.updated_at.isoformat(),
        }

```

=== File: ./config.py ===
```python
# -*-coding:utf-8-*-
"""Custom configuration file for Yet Another Flask Survival Kit (YAFSK)

Author:
    Johnny De Castro <j@jdcastro.co>

Copyright:
    (c) 2024 - 2025 Johnny De Castro. All rights reserved.

License:
    Apache License 2.0 - http://www.apache.org/licenses/LICENSE-2.0

"""
# Python standard library imports
import os
from pathlib import Path
from datetime import timedelta
from typing import Literal

# Third party imports
from dotenv import load_dotenv

dotenv_path = Path(__file__).resolve().parents[1] / ".env"
load_dotenv(dotenv_path)


def validate_mail_config():
    """Validate that all required mail configuration variables are set."""
    required_vars = ["MAIL_SERVER", "MAIL_USERNAME", "MAIL_PASSWORD"]
    for var in required_vars:
        if not os.getenv(var):
            raise ValueError(f"Missing required mail configuration: {var}")


DB_TYPE = Literal["sqlite", "mysql", "mariadb", "postgresql"]


def get_database_url(db_type: DB_TYPE) -> str:
    """Generate the database URL based on the provided database type."""
    db_types = {
        "sqlite": "sqlite:////{DB_NAME}.db",
        "mysql": "mysql+pymysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}",
        "mariadb": "mariadb+pymysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}",
        "postgresql": "postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}",
    }
    if db_type not in db_types:
        raise ValueError(f"Unsupported database type: {db_type}")
    return db_types[db_type].format(
        DB_USER=os.getenv("DB_USER"),
        DB_PASSWORD=os.getenv("DB_PASSWORD"),
        DB_HOST=os.getenv("DB_HOST"),
        DB_NAME=os.getenv("DB_NAME"),
    )


def get_environment_config():
    """Get environment-specific configuration settings for production or development environments."""
    env = os.getenv("ENV", "development")
    return {
        "DEBUG": env == "development",
        "TEMPLATES_AUTO_RELOAD": env == "development",
        "JWT_COOKIE_SECURE": env == "production",
        "JWT_COOKIE_CSRF_PROTECT": env == "production",
    }


class Config:
    """
    Configuration class for the Flask application.
    Handles environment variables, database settings, mail configuration, and JWT settings.
    """

    CORE = True
    MODULES = ["foliage", "foliage_report"]
    THEME = "default"
    TITLE = os.getenv("TITLE")
    SECRET_KEY = os.getenv("SECRET_KEY")
    SECURITY_SALT = os.getenv("SECURITY_SALT")
    ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    DB_TYPE = os.getenv("DB_TYPE", "sqlite")
    SQLALCHEMY_DATABASE_URI = (
        get_database_url(DB_TYPE) if DB_TYPE != "sqlite" else "sqlite:///app.db"
    )
    SQLALCHEMY_TRACK_MODIFICATIONS = False  # Disable Flask-SQLAlchemy event system

    env_config = get_environment_config()
    DEBUG = env_config["DEBUG"]
    TEMPLATES_AUTO_RELOAD = env_config["TEMPLATES_AUTO_RELOAD"]

    # Email configuration
    MAIL_SERVER = os.getenv("MAIL_SERVER")
    MAIL_PORT = int(os.getenv("MAIL_PORT", "465"))
    MAIL_USE_TLS = os.getenv("MAIL_USE_TLS", "False").lower() == "true"
    MAIL_USE_SSL = os.getenv("MAIL_USE_SSL", "True").lower() == "true"
    MAIL_USERNAME = os.getenv("MAIL_USERNAME")
    MAIL_PASSWORD = os.getenv("MAIL_PASSWORD")
    MAIL_DEFAULT_SENDER = os.getenv("MAIL_DEFAULT_SENDER")
    CONTACT_EMAIL = os.getenv("CONTACT_EMAIL")

    # Validate mail configuration
    validate_mail_config()

    # JWT configuration
    JWT_SECRET_KEY = SECRET_KEY
    JWT_ACCESS_TOKEN_EXPIRES = timedelta(days=2)
    JWT_REFRESH_TOKEN_EXPIRES = timedelta(days=7)
    JWT_TOKEN_LOCATION = ["cookies"]
    JWT_ACCESS_COOKIE_PATH = "/"
    JWT_COOKIE_SECURE = env_config["JWT_COOKIE_SECURE"]
    JWT_COOKIE_CSRF_PROTECT = env_config["JWT_COOKIE_CSRF_PROTECT"]
    # redis cache
    CACHE_TYPE = os.getenv("CACHE_TYPE", "simple")
    CACHE_REDIS_URL = os.getenv("CACHE_REDIS_URL")
    CACHE_REDIS_PASSWORD = os.getenv("CACHE_REDIS_PASSWORD")
    CACHE_DEFAULT_TIMEOUT = int(os.getenv("CACHE_DEFAULT_TIMEOUT", "300"))
    CACHE_THRESHOLD = int(os.getenv("CACHE_THRESHOLD", "1000"))
    CACHE_IGNORE_ERRORS = os.getenv("CACHE_IGNORE_ERRORS", "True").lower() == "true"

    # JSON configuration  UTF-8
    JSON_AS_ASCII = False
    JSONIFY_PRETTYPRINT_REGULAR = False

    # overwrite for testing develpment propose
    JWT_COOKIE_SECURE = True  # development purposes
    JWT_COOKIE_CSRF_PROTECT = True  # development purposes

    @classmethod
    def validate_config(cls):
        """Validate that all required environment variables are set."""
        required_vars = ["SECRET_KEY", "SECURITY_SALT"]
        if cls.DB_TYPE != "sqlite":
            required_vars.extend(["DB_USER", "DB_PASSWORD", "DB_HOST", "DB_NAME"])

        for var in required_vars:
            if not os.getenv(var):
                raise ValueError(f"Missing required environment variable: {var}")


# Validate configuration on class initialization
Config.validate_config()

```
