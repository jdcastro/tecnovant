{% set fields = [
    {'name': 'new_password', 'label': 'Nueva Contraseña', 'type': 'password', 'id': 'new_password'},
    {'name': 'confirm_password', 'label': 'Confirmar Contraseña', 'type': 'password', 'id': 'confirm_password'}
] %}
{% set form_id = 'resetPasswordForm' %}
{% set title = 'Restablecer Contraseña' %}
{% set button_text = 'Actualizar Contraseña' %}
{% set api_url = url_for('core_api.reset_password_submit', token=token) %}
{% set extra_links = [{'url': url_for('core.login'), 'text': 'Volver al login'}] %}
{% include 'layouts/access_form.j2' %}

{% block extra_js %}
<script>
document.getElementById('{{ form_id }}').addEventListener('submit', async function(event) {
    event.preventDefault();
    const newPassword = document.getElementById('new_password').value;
    const confirmPassword = document.getElementById('confirm_password').value;
    const messageDiv = document.getElementById('message'); // Assuming 'message' is the ID of the message div in access_form.j2

    // Clear previous messages
    messageDiv.textContent = '';
    messageDiv.className = 'message-area'; // Reset class

    if (newPassword !== confirmPassword) {
        messageDiv.classList.add('error-message'); // Add error class for styling
        messageDiv.textContent = 'Las contraseñas no coinciden.';
        return;
    }

    if (newPassword.length < 8) {
        messageDiv.classList.add('error-message');
        messageDiv.textContent = 'La contraseña debe tener al menos 8 caracteres.';
        return;
    }

    const formData = new FormData();
    formData.append('new_password', newPassword);
    formData.append('confirm_password', confirmPassword);

    try {
        const response = await fetch('{{ api_url }}', {
            method: 'POST',
            body: formData // Sending as form data
            // 'Content-Type' header is not explicitly set for FormData; browser handles it.
        });
        const data = await response.json(); // Assuming server always responds with JSON

        if (response.ok) {
            messageDiv.classList.add('success-message'); // Add success class
            messageDiv.textContent = data.message; // Use 'message' key as per ResetPasswordSubmitView
            // Optional: Clear form fields
            document.getElementById('new_password').value = '';
            document.getElementById('confirm_password').value = '';
            // Redirect after a delay
            if (data.redirect_url) {
                 setTimeout(() => window.location.href = data.redirect_url, 2000);
            } else {
                // Fallback if redirect_url is not provided, though ResetPasswordSubmitView should provide it
                setTimeout(() => window.location.href = "{{ url_for('core.login') }}", 2000);
            }
        } else {
            messageDiv.classList.add('error-message');
            messageDiv.textContent = data.error || 'Ocurrió un error al actualizar la contraseña.';
        }
    } catch (error) {
        console.error('Error submitting password reset form:', error);
        messageDiv.classList.add('error-message');
        messageDiv.textContent = 'Ocurrió un error de red o el servidor no respondió. Inténtalo de nuevo.';
    }
});
</script>
{% endblock %}
