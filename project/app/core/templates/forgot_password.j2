  {# These variables are used by default/layouts/access_form.j2 #}
  {% set page_title = 'Forgot Your Password?' %} {# Or use 'title' if access_form.j2 expects that for the main heading #}
  {% set title = 'Forgot Password' %} {# This is likely for the card header in access_form.j2 #}
  {% set fields = [{'name': 'email', 'label': 'Email Address', 'type': 'email', 'id': 'email', 'placeholder': 'Enter your registered email', 'required': True}] %}
  {% set form_id = 'forgotPasswordForm' %}
  {% set button_text = 'Send Reset Link' %}
  {% set api_url = url_for('core_api.forgot_password_request') %}
  {% set method = 'POST' %} {# access_form.j2 might use this to set form method, though JS overrides #}
  {% set extra_links = [
    {'text': 'Login', 'url': url_for('core.login')}
  ] %}

  {% include 'layouts/access_form.j2' %}

{% block extra_js %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('{{ form_id }}');
    // Assuming 'message' is the id of the message div in 'default/layouts/access_form.j2'
    // This was seen in the login.j2 example context.
    const messageDiv = document.getElementById('message'); 

    if (!form) {
      console.error('Forgot password form (id: "{{ form_id }}") not found!');
      if (messageDiv) {
        messageDiv.style.color = 'red';
        messageDiv.textContent = 'Critical error: Form element missing. Please contact support.';
      }
      return;
    }
    
    if (!messageDiv) {
      // If the message div is not found, log a warning but allow the form to function.
      // Messages just won't be displayed to the user.
      console.warn('Message area (id: "message") not found. User messages will not be displayed.');
    }

    form.addEventListener('submit', async function(event) {
      event.preventDefault(); // Prevent default synchronous submission
      
      const emailInput = document.getElementById('email'); // 'id' of email field defined in 'fields' variable
      if (!emailInput) {
        console.error('Email input field (id: "email") not found!');
        if (messageDiv) {
            messageDiv.style.color = 'red';
            messageDiv.textContent = 'Critical error: Email field missing. Please contact support.';
        }
        return;
      }
      const email = emailInput.value.trim();

      if (!email) {
        if (messageDiv) {
          messageDiv.style.color = 'red';
          messageDiv.textContent = 'Please enter your email address.';
        }
        emailInput.focus();
        return;
      }

      // Clear previous messages
      if (messageDiv) {
        messageDiv.textContent = ''; 
      }

      try {
        const response = await fetch('{{ api_url }}', { // api_url is set above
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            // If your application uses CSRF tokens for AJAX requests, include it here.
            // Example for Flask-WTF/Flask-SeaSurf:
            // {% if csrf_token %}
            // 'X-CSRFToken': '{{ csrf_token() }}'
            // {% endif %}
          },
          body: JSON.stringify({ email: email })
        });

        const data = await response.json(); // Server always returns JSON, even for errors (as per controller)

        if (messageDiv) {
          // The server consistently returns a 'msg' field.
          // For successful requests (even if email not found), status is 200.
          // For actual server errors (500), it might be different, but our controller aims for 200.
          if (response.ok) { // Typically 200-299 status codes
            messageDiv.style.color = 'green'; // Or a success class from your CSS framework
            form.reset(); // Clear the form on success
          } else {
            messageDiv.style.color = 'red'; // Or an error class
          }
          messageDiv.textContent = data.msg || 'An unexpected error occurred. Please try again.';
        }
      } catch (error) {
        // This catches network errors or issues with the fetch itself
        console.error('Error during forgot password request:', error);
        if (messageDiv) {
          messageDiv.style.color = 'red';
          messageDiv.textContent = 'An error occurred while sending your request. Please check your network and try again.';
        }
      }
    });
  });
</script>
{% endblock %}  